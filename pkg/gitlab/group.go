package gitlab

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for GetApiV4GroupsParamsVisibility.
const (
	GetApiV4GroupsParamsVisibilityInternal GetApiV4GroupsParamsVisibility = "internal"
	GetApiV4GroupsParamsVisibilityPrivate  GetApiV4GroupsParamsVisibility = "private"
	GetApiV4GroupsParamsVisibilityPublic   GetApiV4GroupsParamsVisibility = "public"
)

// Defines values for GetApiV4GroupsParamsOrderBy.
const (
	GetApiV4GroupsParamsOrderById         GetApiV4GroupsParamsOrderBy = "id"
	GetApiV4GroupsParamsOrderByName       GetApiV4GroupsParamsOrderBy = "name"
	GetApiV4GroupsParamsOrderByPath       GetApiV4GroupsParamsOrderBy = "path"
	GetApiV4GroupsParamsOrderBySimilarity GetApiV4GroupsParamsOrderBy = "similarity"
)

// Defines values for GetApiV4GroupsParamsSort.
const (
	GetApiV4GroupsParamsSortAsc  GetApiV4GroupsParamsSort = "asc"
	GetApiV4GroupsParamsSortDesc GetApiV4GroupsParamsSort = "desc"
)

// Defines values for GetApiV4GroupsParamsMinAccessLevel.
const (
	GetApiV4GroupsParamsMinAccessLevelN10 GetApiV4GroupsParamsMinAccessLevel = 10
	GetApiV4GroupsParamsMinAccessLevelN15 GetApiV4GroupsParamsMinAccessLevel = 15
	GetApiV4GroupsParamsMinAccessLevelN20 GetApiV4GroupsParamsMinAccessLevel = 20
	GetApiV4GroupsParamsMinAccessLevelN30 GetApiV4GroupsParamsMinAccessLevel = 30
	GetApiV4GroupsParamsMinAccessLevelN40 GetApiV4GroupsParamsMinAccessLevel = 40
	GetApiV4GroupsParamsMinAccessLevelN50 GetApiV4GroupsParamsMinAccessLevel = 50
)

// Defines values for PostApiV4GroupsJSONBodyDefaultBranchProtection.
const (
	PostApiV4GroupsJSONBodyDefaultBranchProtectionN0 PostApiV4GroupsJSONBodyDefaultBranchProtection = 0
	PostApiV4GroupsJSONBodyDefaultBranchProtectionN1 PostApiV4GroupsJSONBodyDefaultBranchProtection = 1
	PostApiV4GroupsJSONBodyDefaultBranchProtectionN2 PostApiV4GroupsJSONBodyDefaultBranchProtection = 2
	PostApiV4GroupsJSONBodyDefaultBranchProtectionN3 PostApiV4GroupsJSONBodyDefaultBranchProtection = 3
	PostApiV4GroupsJSONBodyDefaultBranchProtectionN4 PostApiV4GroupsJSONBodyDefaultBranchProtection = 4
)

// Defines values for PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevel.
const (
	PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevelN0  PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevel = 0
	PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevelN30 PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevel = 30
	PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevelN40 PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevel = 40
	PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevelN60 PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevel = 60
)

// Defines values for PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevel.
const (
	PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevelN0  PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevel = 0
	PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevelN30 PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevel = 30
	PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevelN40 PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevel = 40
	PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevelN60 PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevel = 60
)

// Defines values for PostApiV4GroupsJSONBodyDuoAvailability.
const (
	PostApiV4GroupsJSONBodyDuoAvailabilityDefaultOff PostApiV4GroupsJSONBodyDuoAvailability = "default_off"
	PostApiV4GroupsJSONBodyDuoAvailabilityDefaultOn  PostApiV4GroupsJSONBodyDuoAvailability = "default_on"
	PostApiV4GroupsJSONBodyDuoAvailabilityNeverOn    PostApiV4GroupsJSONBodyDuoAvailability = "never_on"
)

// Defines values for PostApiV4GroupsJSONBodyEnabledGitAccessProtocol.
const (
	PostApiV4GroupsJSONBodyEnabledGitAccessProtocolAll  PostApiV4GroupsJSONBodyEnabledGitAccessProtocol = "all"
	PostApiV4GroupsJSONBodyEnabledGitAccessProtocolHttp PostApiV4GroupsJSONBodyEnabledGitAccessProtocol = "http"
	PostApiV4GroupsJSONBodyEnabledGitAccessProtocolSsh  PostApiV4GroupsJSONBodyEnabledGitAccessProtocol = "ssh"
)

// Defines values for PostApiV4GroupsJSONBodyProjectCreationLevel.
const (
	PostApiV4GroupsJSONBodyProjectCreationLevelAdministrator PostApiV4GroupsJSONBodyProjectCreationLevel = "administrator"
	PostApiV4GroupsJSONBodyProjectCreationLevelDeveloper     PostApiV4GroupsJSONBodyProjectCreationLevel = "developer"
	PostApiV4GroupsJSONBodyProjectCreationLevelMaintainer    PostApiV4GroupsJSONBodyProjectCreationLevel = "maintainer"
	PostApiV4GroupsJSONBodyProjectCreationLevelNoone         PostApiV4GroupsJSONBodyProjectCreationLevel = "noone"
	PostApiV4GroupsJSONBodyProjectCreationLevelOwner         PostApiV4GroupsJSONBodyProjectCreationLevel = "owner"
)

// Defines values for PostApiV4GroupsJSONBodySharedRunnersSetting.
const (
	PostApiV4GroupsJSONBodySharedRunnersSettingDisabledAndOverridable   PostApiV4GroupsJSONBodySharedRunnersSetting = "disabled_and_overridable"
	PostApiV4GroupsJSONBodySharedRunnersSettingDisabledAndUnoverridable PostApiV4GroupsJSONBodySharedRunnersSetting = "disabled_and_unoverridable"
	PostApiV4GroupsJSONBodySharedRunnersSettingEnabled                  PostApiV4GroupsJSONBodySharedRunnersSetting = "enabled"
)

// Defines values for PostApiV4GroupsJSONBodySubgroupCreationLevel.
const (
	PostApiV4GroupsJSONBodySubgroupCreationLevelMaintainer PostApiV4GroupsJSONBodySubgroupCreationLevel = "maintainer"
	PostApiV4GroupsJSONBodySubgroupCreationLevelOwner      PostApiV4GroupsJSONBodySubgroupCreationLevel = "owner"
)

// Defines values for PostApiV4GroupsJSONBodyVisibility.
const (
	PostApiV4GroupsJSONBodyVisibilityInternal PostApiV4GroupsJSONBodyVisibility = "internal"
	PostApiV4GroupsJSONBodyVisibilityPrivate  PostApiV4GroupsJSONBodyVisibility = "private"
	PostApiV4GroupsJSONBodyVisibilityPublic   PostApiV4GroupsJSONBodyVisibility = "public"
)

// Defines values for PostApiV4GroupsJSONBodyWikiAccessLevel.
const (
	PostApiV4GroupsJSONBodyWikiAccessLevelDisabled PostApiV4GroupsJSONBodyWikiAccessLevel = "disabled"
	PostApiV4GroupsJSONBodyWikiAccessLevelEnabled  PostApiV4GroupsJSONBodyWikiAccessLevel = "enabled"
	PostApiV4GroupsJSONBodyWikiAccessLevelPrivate  PostApiV4GroupsJSONBodyWikiAccessLevel = "private"
)

// Defines values for PutApiV4GroupsIdJSONBodyDefaultBranchProtection.
const (
	PutApiV4GroupsIdJSONBodyDefaultBranchProtectionN0 PutApiV4GroupsIdJSONBodyDefaultBranchProtection = 0
	PutApiV4GroupsIdJSONBodyDefaultBranchProtectionN1 PutApiV4GroupsIdJSONBodyDefaultBranchProtection = 1
	PutApiV4GroupsIdJSONBodyDefaultBranchProtectionN2 PutApiV4GroupsIdJSONBodyDefaultBranchProtection = 2
	PutApiV4GroupsIdJSONBodyDefaultBranchProtectionN3 PutApiV4GroupsIdJSONBodyDefaultBranchProtection = 3
	PutApiV4GroupsIdJSONBodyDefaultBranchProtectionN4 PutApiV4GroupsIdJSONBodyDefaultBranchProtection = 4
)

// Defines values for PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevel.
const (
	PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevelN0  PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevel = 0
	PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevelN30 PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevel = 30
	PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevelN40 PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevel = 40
	PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevelN60 PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevel = 60
)

// Defines values for PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevel.
const (
	PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevelN0  PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevel = 0
	PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevelN30 PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevel = 30
	PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevelN40 PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevel = 40
	PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevelN60 PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevel = 60
)

// Defines values for PutApiV4GroupsIdJSONBodyDuoAvailability.
const (
	PutApiV4GroupsIdJSONBodyDuoAvailabilityDefaultOff PutApiV4GroupsIdJSONBodyDuoAvailability = "default_off"
	PutApiV4GroupsIdJSONBodyDuoAvailabilityDefaultOn  PutApiV4GroupsIdJSONBodyDuoAvailability = "default_on"
	PutApiV4GroupsIdJSONBodyDuoAvailabilityNeverOn    PutApiV4GroupsIdJSONBodyDuoAvailability = "never_on"
)

// Defines values for PutApiV4GroupsIdJSONBodyEnabledGitAccessProtocol.
const (
	PutApiV4GroupsIdJSONBodyEnabledGitAccessProtocolAll  PutApiV4GroupsIdJSONBodyEnabledGitAccessProtocol = "all"
	PutApiV4GroupsIdJSONBodyEnabledGitAccessProtocolHttp PutApiV4GroupsIdJSONBodyEnabledGitAccessProtocol = "http"
	PutApiV4GroupsIdJSONBodyEnabledGitAccessProtocolSsh  PutApiV4GroupsIdJSONBodyEnabledGitAccessProtocol = "ssh"
)

// Defines values for PutApiV4GroupsIdJSONBodyProjectCreationLevel.
const (
	PutApiV4GroupsIdJSONBodyProjectCreationLevelAdministrator PutApiV4GroupsIdJSONBodyProjectCreationLevel = "administrator"
	PutApiV4GroupsIdJSONBodyProjectCreationLevelDeveloper     PutApiV4GroupsIdJSONBodyProjectCreationLevel = "developer"
	PutApiV4GroupsIdJSONBodyProjectCreationLevelMaintainer    PutApiV4GroupsIdJSONBodyProjectCreationLevel = "maintainer"
	PutApiV4GroupsIdJSONBodyProjectCreationLevelNoone         PutApiV4GroupsIdJSONBodyProjectCreationLevel = "noone"
	PutApiV4GroupsIdJSONBodyProjectCreationLevelOwner         PutApiV4GroupsIdJSONBodyProjectCreationLevel = "owner"
)

// Defines values for PutApiV4GroupsIdJSONBodySharedRunnersSetting.
const (
	PutApiV4GroupsIdJSONBodySharedRunnersSettingDisabledAndOverridable   PutApiV4GroupsIdJSONBodySharedRunnersSetting = "disabled_and_overridable"
	PutApiV4GroupsIdJSONBodySharedRunnersSettingDisabledAndUnoverridable PutApiV4GroupsIdJSONBodySharedRunnersSetting = "disabled_and_unoverridable"
	PutApiV4GroupsIdJSONBodySharedRunnersSettingEnabled                  PutApiV4GroupsIdJSONBodySharedRunnersSetting = "enabled"
)

// Defines values for PutApiV4GroupsIdJSONBodySubgroupCreationLevel.
const (
	PutApiV4GroupsIdJSONBodySubgroupCreationLevelMaintainer PutApiV4GroupsIdJSONBodySubgroupCreationLevel = "maintainer"
	PutApiV4GroupsIdJSONBodySubgroupCreationLevelOwner      PutApiV4GroupsIdJSONBodySubgroupCreationLevel = "owner"
)

// Defines values for PutApiV4GroupsIdJSONBodyVisibility.
const (
	PutApiV4GroupsIdJSONBodyVisibilityInternal PutApiV4GroupsIdJSONBodyVisibility = "internal"
	PutApiV4GroupsIdJSONBodyVisibilityPrivate  PutApiV4GroupsIdJSONBodyVisibility = "private"
	PutApiV4GroupsIdJSONBodyVisibilityPublic   PutApiV4GroupsIdJSONBodyVisibility = "public"
)

// Defines values for PutApiV4GroupsIdJSONBodyWikiAccessLevel.
const (
	PutApiV4GroupsIdJSONBodyWikiAccessLevelDisabled PutApiV4GroupsIdJSONBodyWikiAccessLevel = "disabled"
	PutApiV4GroupsIdJSONBodyWikiAccessLevelEnabled  PutApiV4GroupsIdJSONBodyWikiAccessLevel = "enabled"
	PutApiV4GroupsIdJSONBodyWikiAccessLevelPrivate  PutApiV4GroupsIdJSONBodyWikiAccessLevel = "private"
)

// Defines values for GetApiV4GroupsIdBillableMembersParamsSort.
const (
	GetApiV4GroupsIdBillableMembersParamsSortAccessLevelAsc     GetApiV4GroupsIdBillableMembersParamsSort = "access_level_asc"
	GetApiV4GroupsIdBillableMembersParamsSortAccessLevelDesc    GetApiV4GroupsIdBillableMembersParamsSort = "access_level_desc"
	GetApiV4GroupsIdBillableMembersParamsSortLastActivityOnAsc  GetApiV4GroupsIdBillableMembersParamsSort = "last_activity_on_asc"
	GetApiV4GroupsIdBillableMembersParamsSortLastActivityOnDesc GetApiV4GroupsIdBillableMembersParamsSort = "last_activity_on_desc"
	GetApiV4GroupsIdBillableMembersParamsSortLastJoined         GetApiV4GroupsIdBillableMembersParamsSort = "last_joined"
	GetApiV4GroupsIdBillableMembersParamsSortNameAsc            GetApiV4GroupsIdBillableMembersParamsSort = "name_asc"
	GetApiV4GroupsIdBillableMembersParamsSortNameDesc           GetApiV4GroupsIdBillableMembersParamsSort = "name_desc"
	GetApiV4GroupsIdBillableMembersParamsSortOldestJoined       GetApiV4GroupsIdBillableMembersParamsSort = "oldest_joined"
	GetApiV4GroupsIdBillableMembersParamsSortOldestSignIn       GetApiV4GroupsIdBillableMembersParamsSort = "oldest_sign_in"
	GetApiV4GroupsIdBillableMembersParamsSortRecentSignIn       GetApiV4GroupsIdBillableMembersParamsSort = "recent_sign_in"
)

// Defines values for PostApiV4GroupsIdClustersUserJSONBodyPlatformKubernetesAttributesAuthorizationType.
const (
	PostApiV4GroupsIdClustersUserJSONBodyPlatformKubernetesAttributesAuthorizationTypeAbac                 PostApiV4GroupsIdClustersUserJSONBodyPlatformKubernetesAttributesAuthorizationType = "abac"
	PostApiV4GroupsIdClustersUserJSONBodyPlatformKubernetesAttributesAuthorizationTypeRbac                 PostApiV4GroupsIdClustersUserJSONBodyPlatformKubernetesAttributesAuthorizationType = "rbac"
	PostApiV4GroupsIdClustersUserJSONBodyPlatformKubernetesAttributesAuthorizationTypeUnknownAuthorization PostApiV4GroupsIdClustersUserJSONBodyPlatformKubernetesAttributesAuthorizationType = "unknown_authorization"
)

// Defines values for PostApiV4GroupsIdDeployTokensJSONBodyScopes.
const (
	PostApiV4GroupsIdDeployTokensJSONBodyScopesReadPackageRegistry  PostApiV4GroupsIdDeployTokensJSONBodyScopes = "read_package_registry"
	PostApiV4GroupsIdDeployTokensJSONBodyScopesReadRegistry         PostApiV4GroupsIdDeployTokensJSONBodyScopes = "read_registry"
	PostApiV4GroupsIdDeployTokensJSONBodyScopesReadRepository       PostApiV4GroupsIdDeployTokensJSONBodyScopes = "read_repository"
	PostApiV4GroupsIdDeployTokensJSONBodyScopesReadVirtualRegistry  PostApiV4GroupsIdDeployTokensJSONBodyScopes = "read_virtual_registry"
	PostApiV4GroupsIdDeployTokensJSONBodyScopesWritePackageRegistry PostApiV4GroupsIdDeployTokensJSONBodyScopes = "write_package_registry"
	PostApiV4GroupsIdDeployTokensJSONBodyScopesWriteRegistry        PostApiV4GroupsIdDeployTokensJSONBodyScopes = "write_registry"
	PostApiV4GroupsIdDeployTokensJSONBodyScopesWriteVirtualRegistry PostApiV4GroupsIdDeployTokensJSONBodyScopes = "write_virtual_registry"
)

// Defines values for GetApiV4GroupsIdDescendantGroupsParamsVisibility.
const (
	GetApiV4GroupsIdDescendantGroupsParamsVisibilityInternal GetApiV4GroupsIdDescendantGroupsParamsVisibility = "internal"
	GetApiV4GroupsIdDescendantGroupsParamsVisibilityPrivate  GetApiV4GroupsIdDescendantGroupsParamsVisibility = "private"
	GetApiV4GroupsIdDescendantGroupsParamsVisibilityPublic   GetApiV4GroupsIdDescendantGroupsParamsVisibility = "public"
)

// Defines values for GetApiV4GroupsIdDescendantGroupsParamsOrderBy.
const (
	GetApiV4GroupsIdDescendantGroupsParamsOrderById         GetApiV4GroupsIdDescendantGroupsParamsOrderBy = "id"
	GetApiV4GroupsIdDescendantGroupsParamsOrderByName       GetApiV4GroupsIdDescendantGroupsParamsOrderBy = "name"
	GetApiV4GroupsIdDescendantGroupsParamsOrderByPath       GetApiV4GroupsIdDescendantGroupsParamsOrderBy = "path"
	GetApiV4GroupsIdDescendantGroupsParamsOrderBySimilarity GetApiV4GroupsIdDescendantGroupsParamsOrderBy = "similarity"
)

// Defines values for GetApiV4GroupsIdDescendantGroupsParamsSort.
const (
	GetApiV4GroupsIdDescendantGroupsParamsSortAsc  GetApiV4GroupsIdDescendantGroupsParamsSort = "asc"
	GetApiV4GroupsIdDescendantGroupsParamsSortDesc GetApiV4GroupsIdDescendantGroupsParamsSort = "desc"
)

// Defines values for GetApiV4GroupsIdDescendantGroupsParamsMinAccessLevel.
const (
	GetApiV4GroupsIdDescendantGroupsParamsMinAccessLevelN10 GetApiV4GroupsIdDescendantGroupsParamsMinAccessLevel = 10
	GetApiV4GroupsIdDescendantGroupsParamsMinAccessLevelN15 GetApiV4GroupsIdDescendantGroupsParamsMinAccessLevel = 15
	GetApiV4GroupsIdDescendantGroupsParamsMinAccessLevelN20 GetApiV4GroupsIdDescendantGroupsParamsMinAccessLevel = 20
	GetApiV4GroupsIdDescendantGroupsParamsMinAccessLevelN30 GetApiV4GroupsIdDescendantGroupsParamsMinAccessLevel = 30
	GetApiV4GroupsIdDescendantGroupsParamsMinAccessLevelN40 GetApiV4GroupsIdDescendantGroupsParamsMinAccessLevel = 40
	GetApiV4GroupsIdDescendantGroupsParamsMinAccessLevelN50 GetApiV4GroupsIdDescendantGroupsParamsMinAccessLevel = 50
)

// Defines values for GetApiV4GroupsIdGroupsSharedParamsVisibility.
const (
	GetApiV4GroupsIdGroupsSharedParamsVisibilityInternal GetApiV4GroupsIdGroupsSharedParamsVisibility = "internal"
	GetApiV4GroupsIdGroupsSharedParamsVisibilityPrivate  GetApiV4GroupsIdGroupsSharedParamsVisibility = "private"
	GetApiV4GroupsIdGroupsSharedParamsVisibilityPublic   GetApiV4GroupsIdGroupsSharedParamsVisibility = "public"
)

// Defines values for GetApiV4GroupsIdGroupsSharedParamsMinAccessLevel.
const (
	GetApiV4GroupsIdGroupsSharedParamsMinAccessLevelN10 GetApiV4GroupsIdGroupsSharedParamsMinAccessLevel = 10
	GetApiV4GroupsIdGroupsSharedParamsMinAccessLevelN15 GetApiV4GroupsIdGroupsSharedParamsMinAccessLevel = 15
	GetApiV4GroupsIdGroupsSharedParamsMinAccessLevelN20 GetApiV4GroupsIdGroupsSharedParamsMinAccessLevel = 20
	GetApiV4GroupsIdGroupsSharedParamsMinAccessLevelN30 GetApiV4GroupsIdGroupsSharedParamsMinAccessLevel = 30
	GetApiV4GroupsIdGroupsSharedParamsMinAccessLevelN40 GetApiV4GroupsIdGroupsSharedParamsMinAccessLevel = 40
	GetApiV4GroupsIdGroupsSharedParamsMinAccessLevelN50 GetApiV4GroupsIdGroupsSharedParamsMinAccessLevel = 50
)

// Defines values for GetApiV4GroupsIdGroupsSharedParamsOrderBy.
const (
	GetApiV4GroupsIdGroupsSharedParamsOrderById         GetApiV4GroupsIdGroupsSharedParamsOrderBy = "id"
	GetApiV4GroupsIdGroupsSharedParamsOrderByName       GetApiV4GroupsIdGroupsSharedParamsOrderBy = "name"
	GetApiV4GroupsIdGroupsSharedParamsOrderByPath       GetApiV4GroupsIdGroupsSharedParamsOrderBy = "path"
	GetApiV4GroupsIdGroupsSharedParamsOrderBySimilarity GetApiV4GroupsIdGroupsSharedParamsOrderBy = "similarity"
)

// Defines values for GetApiV4GroupsIdGroupsSharedParamsSort.
const (
	GetApiV4GroupsIdGroupsSharedParamsSortAsc  GetApiV4GroupsIdGroupsSharedParamsSort = "asc"
	GetApiV4GroupsIdGroupsSharedParamsSortDesc GetApiV4GroupsIdGroupsSharedParamsSort = "desc"
)

// Defines values for DeleteApiV4GroupsIdIntegrationsSlugParamsSlug.
const (
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugAppleAppStore                                 DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "apple-app-store"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugAsana                                         DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "asana"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugAssembla                                      DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "assembla"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugBamboo                                        DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "bamboo"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugBugzilla                                      DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "bugzilla"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugBuildkite                                     DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "buildkite"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugCampfire                                      DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "campfire"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugClickup                                       DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "clickup"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugConfluence                                    DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "confluence"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugCustomIssueTracker                            DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "custom-issue-tracker"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugDatadog                                       DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "datadog"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugDiffblueCover                                 DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "diffblue-cover"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugDiscord                                       DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "discord"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugDroneCi                                       DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "drone-ci"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugEmailsOnPush                                  DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "emails-on-push"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugEwm                                           DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "ewm"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugExternalWiki                                  DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "external-wiki"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugGitGuardian                                   DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "git-guardian"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugGithub                                        DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "github"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugGitlabSlackApplication                        DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "gitlab-slack-application"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugGoogleCloudPlatformArtifactRegistry           DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "google-cloud-platform-artifact-registry"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugGoogleCloudPlatformWorkloadIdentityFederation DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "google-cloud-platform-workload-identity-federation"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugGooglePlay                                    DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "google-play"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugHangoutsChat                                  DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "hangouts-chat"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugHarbor                                        DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "harbor"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugIrker                                         DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "irker"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugJenkins                                       DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "jenkins"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugJira                                          DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "jira"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugJiraCloudApp                                  DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "jira-cloud-app"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugMatrix                                        DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "matrix"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugMattermost                                    DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "mattermost"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugMattermostSlashCommands                       DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "mattermost-slash-commands"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugMicrosoftTeams                                DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "microsoft-teams"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugMockCi                                        DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "mock-ci"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugMockMonitoring                                DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "mock-monitoring"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugPackagist                                     DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "packagist"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugPhorge                                        DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "phorge"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugPipelinesEmail                                DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "pipelines-email"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugPivotaltracker                                DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "pivotaltracker"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugPumble                                        DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "pumble"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugPushover                                      DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "pushover"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugRedmine                                       DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "redmine"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugSlack                                         DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "slack"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugSlackSlashCommands                            DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "slack-slash-commands"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugSquashTm                                      DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "squash-tm"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugTeamcity                                      DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "teamcity"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugTelegram                                      DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "telegram"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugUnifyCircuit                                  DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "unify-circuit"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugWebexTeams                                    DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "webex-teams"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugYoutrack                                      DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "youtrack"
	DeleteApiV4GroupsIdIntegrationsSlugParamsSlugZentao                                        DeleteApiV4GroupsIdIntegrationsSlugParamsSlug = "zentao"
)

// Defines values for GetApiV4GroupsIdIntegrationsSlugParamsSlug.
const (
	GetApiV4GroupsIdIntegrationsSlugParamsSlugAppleAppStore                                 GetApiV4GroupsIdIntegrationsSlugParamsSlug = "apple-app-store"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugAsana                                         GetApiV4GroupsIdIntegrationsSlugParamsSlug = "asana"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugAssembla                                      GetApiV4GroupsIdIntegrationsSlugParamsSlug = "assembla"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugBamboo                                        GetApiV4GroupsIdIntegrationsSlugParamsSlug = "bamboo"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugBugzilla                                      GetApiV4GroupsIdIntegrationsSlugParamsSlug = "bugzilla"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugBuildkite                                     GetApiV4GroupsIdIntegrationsSlugParamsSlug = "buildkite"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugCampfire                                      GetApiV4GroupsIdIntegrationsSlugParamsSlug = "campfire"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugClickup                                       GetApiV4GroupsIdIntegrationsSlugParamsSlug = "clickup"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugConfluence                                    GetApiV4GroupsIdIntegrationsSlugParamsSlug = "confluence"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugCustomIssueTracker                            GetApiV4GroupsIdIntegrationsSlugParamsSlug = "custom-issue-tracker"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugDatadog                                       GetApiV4GroupsIdIntegrationsSlugParamsSlug = "datadog"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugDiffblueCover                                 GetApiV4GroupsIdIntegrationsSlugParamsSlug = "diffblue-cover"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugDiscord                                       GetApiV4GroupsIdIntegrationsSlugParamsSlug = "discord"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugDroneCi                                       GetApiV4GroupsIdIntegrationsSlugParamsSlug = "drone-ci"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugEmailsOnPush                                  GetApiV4GroupsIdIntegrationsSlugParamsSlug = "emails-on-push"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugEwm                                           GetApiV4GroupsIdIntegrationsSlugParamsSlug = "ewm"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugExternalWiki                                  GetApiV4GroupsIdIntegrationsSlugParamsSlug = "external-wiki"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugGitGuardian                                   GetApiV4GroupsIdIntegrationsSlugParamsSlug = "git-guardian"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugGithub                                        GetApiV4GroupsIdIntegrationsSlugParamsSlug = "github"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugGitlabSlackApplication                        GetApiV4GroupsIdIntegrationsSlugParamsSlug = "gitlab-slack-application"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugGoogleCloudPlatformArtifactRegistry           GetApiV4GroupsIdIntegrationsSlugParamsSlug = "google-cloud-platform-artifact-registry"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugGoogleCloudPlatformWorkloadIdentityFederation GetApiV4GroupsIdIntegrationsSlugParamsSlug = "google-cloud-platform-workload-identity-federation"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugGooglePlay                                    GetApiV4GroupsIdIntegrationsSlugParamsSlug = "google-play"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugHangoutsChat                                  GetApiV4GroupsIdIntegrationsSlugParamsSlug = "hangouts-chat"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugHarbor                                        GetApiV4GroupsIdIntegrationsSlugParamsSlug = "harbor"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugIrker                                         GetApiV4GroupsIdIntegrationsSlugParamsSlug = "irker"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugJenkins                                       GetApiV4GroupsIdIntegrationsSlugParamsSlug = "jenkins"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugJira                                          GetApiV4GroupsIdIntegrationsSlugParamsSlug = "jira"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugJiraCloudApp                                  GetApiV4GroupsIdIntegrationsSlugParamsSlug = "jira-cloud-app"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugMatrix                                        GetApiV4GroupsIdIntegrationsSlugParamsSlug = "matrix"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugMattermost                                    GetApiV4GroupsIdIntegrationsSlugParamsSlug = "mattermost"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugMattermostSlashCommands                       GetApiV4GroupsIdIntegrationsSlugParamsSlug = "mattermost-slash-commands"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugMicrosoftTeams                                GetApiV4GroupsIdIntegrationsSlugParamsSlug = "microsoft-teams"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugMockCi                                        GetApiV4GroupsIdIntegrationsSlugParamsSlug = "mock-ci"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugMockMonitoring                                GetApiV4GroupsIdIntegrationsSlugParamsSlug = "mock-monitoring"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugPackagist                                     GetApiV4GroupsIdIntegrationsSlugParamsSlug = "packagist"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugPhorge                                        GetApiV4GroupsIdIntegrationsSlugParamsSlug = "phorge"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugPipelinesEmail                                GetApiV4GroupsIdIntegrationsSlugParamsSlug = "pipelines-email"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugPivotaltracker                                GetApiV4GroupsIdIntegrationsSlugParamsSlug = "pivotaltracker"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugPumble                                        GetApiV4GroupsIdIntegrationsSlugParamsSlug = "pumble"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugPushover                                      GetApiV4GroupsIdIntegrationsSlugParamsSlug = "pushover"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugRedmine                                       GetApiV4GroupsIdIntegrationsSlugParamsSlug = "redmine"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugSlack                                         GetApiV4GroupsIdIntegrationsSlugParamsSlug = "slack"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugSlackSlashCommands                            GetApiV4GroupsIdIntegrationsSlugParamsSlug = "slack-slash-commands"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugSquashTm                                      GetApiV4GroupsIdIntegrationsSlugParamsSlug = "squash-tm"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugTeamcity                                      GetApiV4GroupsIdIntegrationsSlugParamsSlug = "teamcity"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugTelegram                                      GetApiV4GroupsIdIntegrationsSlugParamsSlug = "telegram"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugUnifyCircuit                                  GetApiV4GroupsIdIntegrationsSlugParamsSlug = "unify-circuit"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugWebexTeams                                    GetApiV4GroupsIdIntegrationsSlugParamsSlug = "webex-teams"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugYoutrack                                      GetApiV4GroupsIdIntegrationsSlugParamsSlug = "youtrack"
	GetApiV4GroupsIdIntegrationsSlugParamsSlugZentao                                        GetApiV4GroupsIdIntegrationsSlugParamsSlug = "zentao"
)

// Defines values for PostApiV4GroupsIdInvitationsJSONBodyAccessLevel.
const (
	PostApiV4GroupsIdInvitationsJSONBodyAccessLevelN10 PostApiV4GroupsIdInvitationsJSONBodyAccessLevel = 10
	PostApiV4GroupsIdInvitationsJSONBodyAccessLevelN15 PostApiV4GroupsIdInvitationsJSONBodyAccessLevel = 15
	PostApiV4GroupsIdInvitationsJSONBodyAccessLevelN20 PostApiV4GroupsIdInvitationsJSONBodyAccessLevel = 20
	PostApiV4GroupsIdInvitationsJSONBodyAccessLevelN30 PostApiV4GroupsIdInvitationsJSONBodyAccessLevel = 30
	PostApiV4GroupsIdInvitationsJSONBodyAccessLevelN40 PostApiV4GroupsIdInvitationsJSONBodyAccessLevel = 40
	PostApiV4GroupsIdInvitationsJSONBodyAccessLevelN5  PostApiV4GroupsIdInvitationsJSONBodyAccessLevel = 5
	PostApiV4GroupsIdInvitationsJSONBodyAccessLevelN50 PostApiV4GroupsIdInvitationsJSONBodyAccessLevel = 50
)

// Defines values for PutApiV4GroupsIdInvitationsEmailJSONBodyAccessLevel.
const (
	PutApiV4GroupsIdInvitationsEmailJSONBodyAccessLevelN10 PutApiV4GroupsIdInvitationsEmailJSONBodyAccessLevel = 10
	PutApiV4GroupsIdInvitationsEmailJSONBodyAccessLevelN15 PutApiV4GroupsIdInvitationsEmailJSONBodyAccessLevel = 15
	PutApiV4GroupsIdInvitationsEmailJSONBodyAccessLevelN20 PutApiV4GroupsIdInvitationsEmailJSONBodyAccessLevel = 20
	PutApiV4GroupsIdInvitationsEmailJSONBodyAccessLevelN30 PutApiV4GroupsIdInvitationsEmailJSONBodyAccessLevel = 30
	PutApiV4GroupsIdInvitationsEmailJSONBodyAccessLevelN40 PutApiV4GroupsIdInvitationsEmailJSONBodyAccessLevel = 40
	PutApiV4GroupsIdInvitationsEmailJSONBodyAccessLevelN50 PutApiV4GroupsIdInvitationsEmailJSONBodyAccessLevel = 50
)

// Defines values for GetApiV4GroupsIdInvitedGroupsParamsRelation.
const (
	GetApiV4GroupsIdInvitedGroupsParamsRelationDirect    GetApiV4GroupsIdInvitedGroupsParamsRelation = "direct"
	GetApiV4GroupsIdInvitedGroupsParamsRelationInherited GetApiV4GroupsIdInvitedGroupsParamsRelation = "inherited"
)

// Defines values for GetApiV4GroupsIdInvitedGroupsParamsMinAccessLevel.
const (
	GetApiV4GroupsIdInvitedGroupsParamsMinAccessLevelN10 GetApiV4GroupsIdInvitedGroupsParamsMinAccessLevel = 10
	GetApiV4GroupsIdInvitedGroupsParamsMinAccessLevelN15 GetApiV4GroupsIdInvitedGroupsParamsMinAccessLevel = 15
	GetApiV4GroupsIdInvitedGroupsParamsMinAccessLevelN20 GetApiV4GroupsIdInvitedGroupsParamsMinAccessLevel = 20
	GetApiV4GroupsIdInvitedGroupsParamsMinAccessLevelN30 GetApiV4GroupsIdInvitedGroupsParamsMinAccessLevel = 30
	GetApiV4GroupsIdInvitedGroupsParamsMinAccessLevelN40 GetApiV4GroupsIdInvitedGroupsParamsMinAccessLevel = 40
	GetApiV4GroupsIdInvitedGroupsParamsMinAccessLevelN50 GetApiV4GroupsIdInvitedGroupsParamsMinAccessLevel = 50
)

// Defines values for GetApiV4GroupsIdMembersAllParamsState.
const (
	GetApiV4GroupsIdMembersAllParamsStateActive   GetApiV4GroupsIdMembersAllParamsState = "active"
	GetApiV4GroupsIdMembersAllParamsStateAwaiting GetApiV4GroupsIdMembersAllParamsState = "awaiting"
)

// Defines values for PutApiV4GroupsIdMembersUserIdStateJSONBodyState.
const (
	PutApiV4GroupsIdMembersUserIdStateJSONBodyStateActive   PutApiV4GroupsIdMembersUserIdStateJSONBodyState = "active"
	PutApiV4GroupsIdMembersUserIdStateJSONBodyStateAwaiting PutApiV4GroupsIdMembersUserIdStateJSONBodyState = "awaiting"
)

// Defines values for GetApiV4GroupsIdMergeRequestsParamsState.
const (
	GetApiV4GroupsIdMergeRequestsParamsStateAll    GetApiV4GroupsIdMergeRequestsParamsState = "all"
	GetApiV4GroupsIdMergeRequestsParamsStateClosed GetApiV4GroupsIdMergeRequestsParamsState = "closed"
	GetApiV4GroupsIdMergeRequestsParamsStateLocked GetApiV4GroupsIdMergeRequestsParamsState = "locked"
	GetApiV4GroupsIdMergeRequestsParamsStateMerged GetApiV4GroupsIdMergeRequestsParamsState = "merged"
	GetApiV4GroupsIdMergeRequestsParamsStateOpened GetApiV4GroupsIdMergeRequestsParamsState = "opened"
)

// Defines values for GetApiV4GroupsIdMergeRequestsParamsOrderBy.
const (
	GetApiV4GroupsIdMergeRequestsParamsOrderByCreatedAt     GetApiV4GroupsIdMergeRequestsParamsOrderBy = "created_at"
	GetApiV4GroupsIdMergeRequestsParamsOrderByLabelPriority GetApiV4GroupsIdMergeRequestsParamsOrderBy = "label_priority"
	GetApiV4GroupsIdMergeRequestsParamsOrderByMergedAt      GetApiV4GroupsIdMergeRequestsParamsOrderBy = "merged_at"
	GetApiV4GroupsIdMergeRequestsParamsOrderByMilestoneDue  GetApiV4GroupsIdMergeRequestsParamsOrderBy = "milestone_due"
	GetApiV4GroupsIdMergeRequestsParamsOrderByPopularity    GetApiV4GroupsIdMergeRequestsParamsOrderBy = "popularity"
	GetApiV4GroupsIdMergeRequestsParamsOrderByPriority      GetApiV4GroupsIdMergeRequestsParamsOrderBy = "priority"
	GetApiV4GroupsIdMergeRequestsParamsOrderByTitle         GetApiV4GroupsIdMergeRequestsParamsOrderBy = "title"
	GetApiV4GroupsIdMergeRequestsParamsOrderByUpdatedAt     GetApiV4GroupsIdMergeRequestsParamsOrderBy = "updated_at"
)

// Defines values for GetApiV4GroupsIdMergeRequestsParamsSort.
const (
	GetApiV4GroupsIdMergeRequestsParamsSortAsc  GetApiV4GroupsIdMergeRequestsParamsSort = "asc"
	GetApiV4GroupsIdMergeRequestsParamsSortDesc GetApiV4GroupsIdMergeRequestsParamsSort = "desc"
)

// Defines values for GetApiV4GroupsIdMergeRequestsParamsView.
const (
	GetApiV4GroupsIdMergeRequestsParamsViewSimple GetApiV4GroupsIdMergeRequestsParamsView = "simple"
)

// Defines values for GetApiV4GroupsIdMergeRequestsParamsScope.
const (
	GetApiV4GroupsIdMergeRequestsParamsScopeAll           GetApiV4GroupsIdMergeRequestsParamsScope = "all"
	GetApiV4GroupsIdMergeRequestsParamsScopeAssignedToMe  GetApiV4GroupsIdMergeRequestsParamsScope = "assigned-to-me"
	GetApiV4GroupsIdMergeRequestsParamsScopeAssignedToMe1 GetApiV4GroupsIdMergeRequestsParamsScope = "assigned_to_me"
	GetApiV4GroupsIdMergeRequestsParamsScopeCreatedByMe   GetApiV4GroupsIdMergeRequestsParamsScope = "created-by-me"
	GetApiV4GroupsIdMergeRequestsParamsScopeCreatedByMe1  GetApiV4GroupsIdMergeRequestsParamsScope = "created_by_me"
)

// Defines values for GetApiV4GroupsIdMergeRequestsParamsWip.
const (
	GetApiV4GroupsIdMergeRequestsParamsWipNo  GetApiV4GroupsIdMergeRequestsParamsWip = "no"
	GetApiV4GroupsIdMergeRequestsParamsWipYes GetApiV4GroupsIdMergeRequestsParamsWip = "yes"
)

// Defines values for GetApiV4GroupsIdMergeRequestsParamsApproved.
const (
	GetApiV4GroupsIdMergeRequestsParamsApprovedNo  GetApiV4GroupsIdMergeRequestsParamsApproved = "no"
	GetApiV4GroupsIdMergeRequestsParamsApprovedYes GetApiV4GroupsIdMergeRequestsParamsApproved = "yes"
)

// Defines values for GetApiV4GroupsIdPackagesParamsOrderBy.
const (
	GetApiV4GroupsIdPackagesParamsOrderByCreatedAt   GetApiV4GroupsIdPackagesParamsOrderBy = "created_at"
	GetApiV4GroupsIdPackagesParamsOrderByName        GetApiV4GroupsIdPackagesParamsOrderBy = "name"
	GetApiV4GroupsIdPackagesParamsOrderByProjectPath GetApiV4GroupsIdPackagesParamsOrderBy = "project_path"
	GetApiV4GroupsIdPackagesParamsOrderByType        GetApiV4GroupsIdPackagesParamsOrderBy = "type"
	GetApiV4GroupsIdPackagesParamsOrderByVersion     GetApiV4GroupsIdPackagesParamsOrderBy = "version"
)

// Defines values for GetApiV4GroupsIdPackagesParamsSort.
const (
	GetApiV4GroupsIdPackagesParamsSortAsc  GetApiV4GroupsIdPackagesParamsSort = "asc"
	GetApiV4GroupsIdPackagesParamsSortDesc GetApiV4GroupsIdPackagesParamsSort = "desc"
)

// Defines values for GetApiV4GroupsIdPackagesParamsPackageType.
const (
	GetApiV4GroupsIdPackagesParamsPackageTypeComposer        GetApiV4GroupsIdPackagesParamsPackageType = "composer"
	GetApiV4GroupsIdPackagesParamsPackageTypeConan           GetApiV4GroupsIdPackagesParamsPackageType = "conan"
	GetApiV4GroupsIdPackagesParamsPackageTypeDebian          GetApiV4GroupsIdPackagesParamsPackageType = "debian"
	GetApiV4GroupsIdPackagesParamsPackageTypeGeneric         GetApiV4GroupsIdPackagesParamsPackageType = "generic"
	GetApiV4GroupsIdPackagesParamsPackageTypeGolang          GetApiV4GroupsIdPackagesParamsPackageType = "golang"
	GetApiV4GroupsIdPackagesParamsPackageTypeHelm            GetApiV4GroupsIdPackagesParamsPackageType = "helm"
	GetApiV4GroupsIdPackagesParamsPackageTypeMaven           GetApiV4GroupsIdPackagesParamsPackageType = "maven"
	GetApiV4GroupsIdPackagesParamsPackageTypeMlModel         GetApiV4GroupsIdPackagesParamsPackageType = "ml_model"
	GetApiV4GroupsIdPackagesParamsPackageTypeNpm             GetApiV4GroupsIdPackagesParamsPackageType = "npm"
	GetApiV4GroupsIdPackagesParamsPackageTypeNuget           GetApiV4GroupsIdPackagesParamsPackageType = "nuget"
	GetApiV4GroupsIdPackagesParamsPackageTypePypi            GetApiV4GroupsIdPackagesParamsPackageType = "pypi"
	GetApiV4GroupsIdPackagesParamsPackageTypeRpm             GetApiV4GroupsIdPackagesParamsPackageType = "rpm"
	GetApiV4GroupsIdPackagesParamsPackageTypeRubygems        GetApiV4GroupsIdPackagesParamsPackageType = "rubygems"
	GetApiV4GroupsIdPackagesParamsPackageTypeTerraformModule GetApiV4GroupsIdPackagesParamsPackageType = "terraform_module"
)

// Defines values for GetApiV4GroupsIdPackagesParamsStatus.
const (
	GetApiV4GroupsIdPackagesParamsStatusDefault            GetApiV4GroupsIdPackagesParamsStatus = "default"
	GetApiV4GroupsIdPackagesParamsStatusDeprecated         GetApiV4GroupsIdPackagesParamsStatus = "deprecated"
	GetApiV4GroupsIdPackagesParamsStatusError              GetApiV4GroupsIdPackagesParamsStatus = "error"
	GetApiV4GroupsIdPackagesParamsStatusHidden             GetApiV4GroupsIdPackagesParamsStatus = "hidden"
	GetApiV4GroupsIdPackagesParamsStatusPendingDestruction GetApiV4GroupsIdPackagesParamsStatus = "pending_destruction"
	GetApiV4GroupsIdPackagesParamsStatusProcessing         GetApiV4GroupsIdPackagesParamsStatus = "processing"
)

// Defines values for GetApiV4GroupsIdProjectsParamsVisibility.
const (
	GetApiV4GroupsIdProjectsParamsVisibilityInternal GetApiV4GroupsIdProjectsParamsVisibility = "internal"
	GetApiV4GroupsIdProjectsParamsVisibilityPrivate  GetApiV4GroupsIdProjectsParamsVisibility = "private"
	GetApiV4GroupsIdProjectsParamsVisibilityPublic   GetApiV4GroupsIdProjectsParamsVisibility = "public"
)

// Defines values for GetApiV4GroupsIdProjectsParamsOrderBy.
const (
	GetApiV4GroupsIdProjectsParamsOrderByCreatedAt      GetApiV4GroupsIdProjectsParamsOrderBy = "created_at"
	GetApiV4GroupsIdProjectsParamsOrderById             GetApiV4GroupsIdProjectsParamsOrderBy = "id"
	GetApiV4GroupsIdProjectsParamsOrderByLastActivityAt GetApiV4GroupsIdProjectsParamsOrderBy = "last_activity_at"
	GetApiV4GroupsIdProjectsParamsOrderByName           GetApiV4GroupsIdProjectsParamsOrderBy = "name"
	GetApiV4GroupsIdProjectsParamsOrderByPath           GetApiV4GroupsIdProjectsParamsOrderBy = "path"
	GetApiV4GroupsIdProjectsParamsOrderBySimilarity     GetApiV4GroupsIdProjectsParamsOrderBy = "similarity"
	GetApiV4GroupsIdProjectsParamsOrderByStarCount      GetApiV4GroupsIdProjectsParamsOrderBy = "star_count"
	GetApiV4GroupsIdProjectsParamsOrderByUpdatedAt      GetApiV4GroupsIdProjectsParamsOrderBy = "updated_at"
)

// Defines values for GetApiV4GroupsIdProjectsParamsSort.
const (
	GetApiV4GroupsIdProjectsParamsSortAsc  GetApiV4GroupsIdProjectsParamsSort = "asc"
	GetApiV4GroupsIdProjectsParamsSortDesc GetApiV4GroupsIdProjectsParamsSort = "desc"
)

// Defines values for GetApiV4GroupsIdProjectsParamsMinAccessLevel.
const (
	GetApiV4GroupsIdProjectsParamsMinAccessLevelN10 GetApiV4GroupsIdProjectsParamsMinAccessLevel = 10
	GetApiV4GroupsIdProjectsParamsMinAccessLevelN15 GetApiV4GroupsIdProjectsParamsMinAccessLevel = 15
	GetApiV4GroupsIdProjectsParamsMinAccessLevelN20 GetApiV4GroupsIdProjectsParamsMinAccessLevel = 20
	GetApiV4GroupsIdProjectsParamsMinAccessLevelN30 GetApiV4GroupsIdProjectsParamsMinAccessLevel = 30
	GetApiV4GroupsIdProjectsParamsMinAccessLevelN40 GetApiV4GroupsIdProjectsParamsMinAccessLevel = 40
	GetApiV4GroupsIdProjectsParamsMinAccessLevelN50 GetApiV4GroupsIdProjectsParamsMinAccessLevel = 50
)

// Defines values for GetApiV4GroupsIdProjectsSharedParamsVisibility.
const (
	GetApiV4GroupsIdProjectsSharedParamsVisibilityInternal GetApiV4GroupsIdProjectsSharedParamsVisibility = "internal"
	GetApiV4GroupsIdProjectsSharedParamsVisibilityPrivate  GetApiV4GroupsIdProjectsSharedParamsVisibility = "private"
	GetApiV4GroupsIdProjectsSharedParamsVisibilityPublic   GetApiV4GroupsIdProjectsSharedParamsVisibility = "public"
)

// Defines values for GetApiV4GroupsIdProjectsSharedParamsOrderBy.
const (
	GetApiV4GroupsIdProjectsSharedParamsOrderByCreatedAt      GetApiV4GroupsIdProjectsSharedParamsOrderBy = "created_at"
	GetApiV4GroupsIdProjectsSharedParamsOrderById             GetApiV4GroupsIdProjectsSharedParamsOrderBy = "id"
	GetApiV4GroupsIdProjectsSharedParamsOrderByLastActivityAt GetApiV4GroupsIdProjectsSharedParamsOrderBy = "last_activity_at"
	GetApiV4GroupsIdProjectsSharedParamsOrderByName           GetApiV4GroupsIdProjectsSharedParamsOrderBy = "name"
	GetApiV4GroupsIdProjectsSharedParamsOrderByPath           GetApiV4GroupsIdProjectsSharedParamsOrderBy = "path"
	GetApiV4GroupsIdProjectsSharedParamsOrderByStarCount      GetApiV4GroupsIdProjectsSharedParamsOrderBy = "star_count"
	GetApiV4GroupsIdProjectsSharedParamsOrderByUpdatedAt      GetApiV4GroupsIdProjectsSharedParamsOrderBy = "updated_at"
)

// Defines values for GetApiV4GroupsIdProjectsSharedParamsSort.
const (
	GetApiV4GroupsIdProjectsSharedParamsSortAsc  GetApiV4GroupsIdProjectsSharedParamsSort = "asc"
	GetApiV4GroupsIdProjectsSharedParamsSortDesc GetApiV4GroupsIdProjectsSharedParamsSort = "desc"
)

// Defines values for GetApiV4GroupsIdProjectsSharedParamsMinAccessLevel.
const (
	GetApiV4GroupsIdProjectsSharedParamsMinAccessLevelN10 GetApiV4GroupsIdProjectsSharedParamsMinAccessLevel = 10
	GetApiV4GroupsIdProjectsSharedParamsMinAccessLevelN15 GetApiV4GroupsIdProjectsSharedParamsMinAccessLevel = 15
	GetApiV4GroupsIdProjectsSharedParamsMinAccessLevelN20 GetApiV4GroupsIdProjectsSharedParamsMinAccessLevel = 20
	GetApiV4GroupsIdProjectsSharedParamsMinAccessLevelN30 GetApiV4GroupsIdProjectsSharedParamsMinAccessLevel = 30
	GetApiV4GroupsIdProjectsSharedParamsMinAccessLevelN40 GetApiV4GroupsIdProjectsSharedParamsMinAccessLevel = 40
	GetApiV4GroupsIdProjectsSharedParamsMinAccessLevelN50 GetApiV4GroupsIdProjectsSharedParamsMinAccessLevel = 50
)

// Defines values for GetApiV4GroupsIdReleasesParamsSort.
const (
	GetApiV4GroupsIdReleasesParamsSortAsc  GetApiV4GroupsIdReleasesParamsSort = "asc"
	GetApiV4GroupsIdReleasesParamsSortDesc GetApiV4GroupsIdReleasesParamsSort = "desc"
)

// Defines values for GetApiV4GroupsIdRunnersParamsType.
const (
	GetApiV4GroupsIdRunnersParamsTypeGroupType    GetApiV4GroupsIdRunnersParamsType = "group_type"
	GetApiV4GroupsIdRunnersParamsTypeInstanceType GetApiV4GroupsIdRunnersParamsType = "instance_type"
	GetApiV4GroupsIdRunnersParamsTypeProjectType  GetApiV4GroupsIdRunnersParamsType = "project_type"
)

// Defines values for GetApiV4GroupsIdRunnersParamsStatus.
const (
	GetApiV4GroupsIdRunnersParamsStatusActive         GetApiV4GroupsIdRunnersParamsStatus = "active"
	GetApiV4GroupsIdRunnersParamsStatusNeverContacted GetApiV4GroupsIdRunnersParamsStatus = "never_contacted"
	GetApiV4GroupsIdRunnersParamsStatusOffline        GetApiV4GroupsIdRunnersParamsStatus = "offline"
	GetApiV4GroupsIdRunnersParamsStatusOnline         GetApiV4GroupsIdRunnersParamsStatus = "online"
	GetApiV4GroupsIdRunnersParamsStatusPaused         GetApiV4GroupsIdRunnersParamsStatus = "paused"
	GetApiV4GroupsIdRunnersParamsStatusStale          GetApiV4GroupsIdRunnersParamsStatus = "stale"
)

// Defines values for PostApiV4GroupsIdShareJSONBodyGroupAccess.
const (
	PostApiV4GroupsIdShareJSONBodyGroupAccessN10 PostApiV4GroupsIdShareJSONBodyGroupAccess = 10
	PostApiV4GroupsIdShareJSONBodyGroupAccessN15 PostApiV4GroupsIdShareJSONBodyGroupAccess = 15
	PostApiV4GroupsIdShareJSONBodyGroupAccessN20 PostApiV4GroupsIdShareJSONBodyGroupAccess = 20
	PostApiV4GroupsIdShareJSONBodyGroupAccessN30 PostApiV4GroupsIdShareJSONBodyGroupAccess = 30
	PostApiV4GroupsIdShareJSONBodyGroupAccessN40 PostApiV4GroupsIdShareJSONBodyGroupAccess = 40
	PostApiV4GroupsIdShareJSONBodyGroupAccessN50 PostApiV4GroupsIdShareJSONBodyGroupAccess = 50
)

// Defines values for GetApiV4GroupsIdSubgroupsParamsVisibility.
const (
	GetApiV4GroupsIdSubgroupsParamsVisibilityInternal GetApiV4GroupsIdSubgroupsParamsVisibility = "internal"
	GetApiV4GroupsIdSubgroupsParamsVisibilityPrivate  GetApiV4GroupsIdSubgroupsParamsVisibility = "private"
	GetApiV4GroupsIdSubgroupsParamsVisibilityPublic   GetApiV4GroupsIdSubgroupsParamsVisibility = "public"
)

// Defines values for GetApiV4GroupsIdSubgroupsParamsOrderBy.
const (
	GetApiV4GroupsIdSubgroupsParamsOrderById         GetApiV4GroupsIdSubgroupsParamsOrderBy = "id"
	GetApiV4GroupsIdSubgroupsParamsOrderByName       GetApiV4GroupsIdSubgroupsParamsOrderBy = "name"
	GetApiV4GroupsIdSubgroupsParamsOrderByPath       GetApiV4GroupsIdSubgroupsParamsOrderBy = "path"
	GetApiV4GroupsIdSubgroupsParamsOrderBySimilarity GetApiV4GroupsIdSubgroupsParamsOrderBy = "similarity"
)

// Defines values for GetApiV4GroupsIdSubgroupsParamsSort.
const (
	GetApiV4GroupsIdSubgroupsParamsSortAsc  GetApiV4GroupsIdSubgroupsParamsSort = "asc"
	GetApiV4GroupsIdSubgroupsParamsSortDesc GetApiV4GroupsIdSubgroupsParamsSort = "desc"
)

// Defines values for GetApiV4GroupsIdSubgroupsParamsMinAccessLevel.
const (
	GetApiV4GroupsIdSubgroupsParamsMinAccessLevelN10 GetApiV4GroupsIdSubgroupsParamsMinAccessLevel = 10
	GetApiV4GroupsIdSubgroupsParamsMinAccessLevelN15 GetApiV4GroupsIdSubgroupsParamsMinAccessLevel = 15
	GetApiV4GroupsIdSubgroupsParamsMinAccessLevelN20 GetApiV4GroupsIdSubgroupsParamsMinAccessLevel = 20
	GetApiV4GroupsIdSubgroupsParamsMinAccessLevelN30 GetApiV4GroupsIdSubgroupsParamsMinAccessLevel = 30
	GetApiV4GroupsIdSubgroupsParamsMinAccessLevelN40 GetApiV4GroupsIdSubgroupsParamsMinAccessLevel = 40
	GetApiV4GroupsIdSubgroupsParamsMinAccessLevelN50 GetApiV4GroupsIdSubgroupsParamsMinAccessLevel = 50
)

// Defines values for PostApiV4GroupsIdVariablesJSONBodyVariableType.
const (
	PostApiV4GroupsIdVariablesJSONBodyVariableTypeEnvVar PostApiV4GroupsIdVariablesJSONBodyVariableType = "env_var"
	PostApiV4GroupsIdVariablesJSONBodyVariableTypeFile   PostApiV4GroupsIdVariablesJSONBodyVariableType = "file"
)

// Defines values for PutApiV4GroupsIdVariablesKeyJSONBodyVariableType.
const (
	PutApiV4GroupsIdVariablesKeyJSONBodyVariableTypeEnvVar PutApiV4GroupsIdVariablesKeyJSONBodyVariableType = "env_var"
	PutApiV4GroupsIdVariablesKeyJSONBodyVariableTypeFile   PutApiV4GroupsIdVariablesKeyJSONBodyVariableType = "file"
)

// Defines values for PostApiV4GroupsIdWikisJSONBodyFormat.
const (
	PostApiV4GroupsIdWikisJSONBodyFormatAsciidoc PostApiV4GroupsIdWikisJSONBodyFormat = "asciidoc"
	PostApiV4GroupsIdWikisJSONBodyFormatMarkdown PostApiV4GroupsIdWikisJSONBodyFormat = "markdown"
	PostApiV4GroupsIdWikisJSONBodyFormatOrg      PostApiV4GroupsIdWikisJSONBodyFormat = "org"
	PostApiV4GroupsIdWikisJSONBodyFormatRdoc     PostApiV4GroupsIdWikisJSONBodyFormat = "rdoc"
)

// Defines values for PutApiV4GroupsIdWikisSlugJSONBodyFormat.
const (
	PutApiV4GroupsIdWikisSlugJSONBodyFormatAsciidoc PutApiV4GroupsIdWikisSlugJSONBodyFormat = "asciidoc"
	PutApiV4GroupsIdWikisSlugJSONBodyFormatMarkdown PutApiV4GroupsIdWikisSlugJSONBodyFormat = "markdown"
	PutApiV4GroupsIdWikisSlugJSONBodyFormatOrg      PutApiV4GroupsIdWikisSlugJSONBodyFormat = "org"
	PutApiV4GroupsIdWikisSlugJSONBodyFormatRdoc     PutApiV4GroupsIdWikisSlugJSONBodyFormat = "rdoc"
)

type GetApiV4GroupIdPackagesComposerpackageNameParams struct {
	// PackageName The Composer package name
	PackageName string `form:"package_name" json:"package_name"`
}
type GetApiV4GroupIdPackagesComposerP2packageNameParams struct {
	// PackageName The Composer package name
	PackageName string `form:"package_name" json:"package_name"`
}
type GetApiV4GroupsParams struct {
	// Statistics Include project statistics
	Statistics *bool `form:"statistics,omitempty" json:"statistics,omitempty"`

	// Archived Limit by archived status
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`

	// SkipGroups Array of group ids to exclude from list
	SkipGroups *[]int32 `form:"skip_groups,omitempty" json:"skip_groups,omitempty"`

	// AllAvailable When `true`, returns all accessible groups. When `false`, returns only groups where the user is a member.
	AllAvailable *bool `form:"all_available,omitempty" json:"all_available,omitempty"`

	// Visibility Limit by visibility
	Visibility *GetApiV4GroupsParamsVisibility `form:"visibility,omitempty" json:"visibility,omitempty"`

	// Search Search for a specific group
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Owned Limit by owned by authenticated user
	Owned *bool `form:"owned,omitempty" json:"owned,omitempty"`

	// OrderBy Order by name, path, id or similarity if searching
	OrderBy *GetApiV4GroupsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Sort Sort by asc (ascending) or desc (descending)
	Sort *GetApiV4GroupsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// MinAccessLevel Minimum access level of authenticated user
	MinAccessLevel *GetApiV4GroupsParamsMinAccessLevel `form:"min_access_level,omitempty" json:"min_access_level,omitempty"`

	// TopLevelOnly Only include top-level groups
	TopLevelOnly *bool `form:"top_level_only,omitempty" json:"top_level_only,omitempty"`

	// MarkedForDeletionOn Return groups that are marked for deletion on this date
	MarkedForDeletionOn *openapi_types.Date `form:"marked_for_deletion_on,omitempty" json:"marked_for_deletion_on,omitempty"`

	// Active Limit by groups that are not archived and not marked for deletion
	Active *bool `form:"active,omitempty" json:"active,omitempty"`

	// RepositoryStorage Filter by repository storage used by the group
	RepositoryStorage *string `form:"repository_storage,omitempty" json:"repository_storage,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// WithCustomAttributes Include custom attributes in the response
	WithCustomAttributes *bool `form:"with_custom_attributes,omitempty" json:"with_custom_attributes,omitempty"`
}
type GetApiV4GroupsParamsVisibility string
type GetApiV4GroupsParamsOrderBy string
type GetApiV4GroupsParamsSort string
type GetApiV4GroupsParamsMinAccessLevel int32
type PostApiV4GroupsJSONBody struct {
	// AiSettingsAttributes AI-related settings
	AiSettingsAttributes *struct {
		// DuoWorkflowMcpEnabled Enable MCP support for Duo Workflow
		DuoWorkflowMcpEnabled *bool `json:"duo_workflow_mcp_enabled,omitempty"`
	} `json:"ai_settings_attributes,omitempty"`

	// AmazonQAutoReviewEnabled Enable Amazon Q auto review for merge request
	AmazonQAutoReviewEnabled *bool `json:"amazon_q_auto_review_enabled,omitempty"`

	// AutoDevopsEnabled Default to Auto DevOps pipeline for all projects within this group
	AutoDevopsEnabled *bool `json:"auto_devops_enabled,omitempty"`

	// Avatar Avatar image for the group
	Avatar *string `json:"avatar,omitempty"`

	// DefaultBranch The default branch of group's projects
	DefaultBranch *string `json:"default_branch,omitempty"`

	// DefaultBranchProtection Determine if developers can push to default branch
	DefaultBranchProtection *PostApiV4GroupsJSONBodyDefaultBranchProtection `json:"default_branch_protection,omitempty"`

	// DefaultBranchProtectionDefaults Determine if developers can push to default branch
	DefaultBranchProtectionDefaults *struct {
		// AllowForcePush Allow force push for all users with push access.
		AllowForcePush *bool `json:"allow_force_push,omitempty"`

		// AllowedToMerge An array of access levels allowed to merge
		AllowedToMerge *[]struct {
			// AccessLevel A valid access level
			AccessLevel PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevel `json:"access_level"`
		} `json:"allowed_to_merge,omitempty"`

		// AllowedToPush An array of access levels allowed to push
		AllowedToPush *[]struct {
			// AccessLevel A valid access level
			AccessLevel PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevel `json:"access_level"`
		} `json:"allowed_to_push,omitempty"`

		// CodeOwnerApprovalRequired Require approval from code owners
		CodeOwnerApprovalRequired *bool `json:"code_owner_approval_required,omitempty"`

		// DeveloperCanInitialPush Allow developers to initial push
		DeveloperCanInitialPush *bool `json:"developer_can_initial_push,omitempty"`
	} `json:"default_branch_protection_defaults,omitempty"`

	// Description The description of the group
	Description *string `json:"description,omitempty"`

	// DuoAvailability Duo availability. One of `default_on`, `default_off` or `never_on`
	DuoAvailability *PostApiV4GroupsJSONBodyDuoAvailability `json:"duo_availability,omitempty"`

	// EmailsDisabled _(Deprecated)_ Disable email notifications. Use: emails_enabled
	EmailsDisabled *bool `json:"emails_disabled,omitempty"`

	// EmailsEnabled Enable email notifications
	EmailsEnabled *bool `json:"emails_enabled,omitempty"`

	// EnabledGitAccessProtocol Allow only the selected protocols to be used for Git access.
	EnabledGitAccessProtocol *PostApiV4GroupsJSONBodyEnabledGitAccessProtocol `json:"enabled_git_access_protocol,omitempty"`

	// ExperimentFeaturesEnabled Enable experiment features for this group
	ExperimentFeaturesEnabled *bool `json:"experiment_features_enabled,omitempty"`

	// ExtraSharedRunnersMinutesLimit (admin-only) Extra compute minutes quota for this group
	ExtraSharedRunnersMinutesLimit *int32 `json:"extra_shared_runners_minutes_limit,omitempty"`

	// LdapAccess A valid access level
	LdapAccess *int32 `json:"ldap_access,omitempty"`

	// LdapCn LDAP Common Name
	LdapCn *string `json:"ldap_cn,omitempty"`

	// LfsEnabled Enable/disable LFS for the projects in this group
	LfsEnabled *bool `json:"lfs_enabled,omitempty"`

	// MembershipLock Prevent adding new members to projects within this group
	MembershipLock *bool `json:"membership_lock,omitempty"`

	// MentionsDisabled Disable a group from getting mentioned
	MentionsDisabled *bool `json:"mentions_disabled,omitempty"`

	// ModelPromptCacheEnabled Enable model prompt cache for this group
	ModelPromptCacheEnabled *bool `json:"model_prompt_cache_enabled,omitempty"`

	// Name The name of the group
	Name string `json:"name"`

	// OrganizationId The organization id for the group
	OrganizationId *int32 `json:"organization_id,omitempty"`

	// ParentId The parent group id for creating nested group
	ParentId *int32 `json:"parent_id,omitempty"`

	// Path The path of the group
	Path string `json:"path"`

	// ProjectCreationLevel Determine if developers can create projects in the group
	ProjectCreationLevel *PostApiV4GroupsJSONBodyProjectCreationLevel `json:"project_creation_level,omitempty"`

	// RequestAccessEnabled Allow users to request member access
	RequestAccessEnabled *bool `json:"request_access_enabled,omitempty"`

	// RequireTwoFactorAuthentication Require all users in this group to setup Two-factor authentication
	RequireTwoFactorAuthentication *bool `json:"require_two_factor_authentication,omitempty"`

	// ShareWithGroupLock Prevent sharing a project with another group within this group
	ShareWithGroupLock *bool `json:"share_with_group_lock,omitempty"`

	// SharedRunnersMinutesLimit (admin-only) compute minutes quota for this group
	SharedRunnersMinutesLimit *int32 `json:"shared_runners_minutes_limit,omitempty"`

	// SharedRunnersSetting Enable/disable shared runners for the group and its subgroups and projects
	SharedRunnersSetting *PostApiV4GroupsJSONBodySharedRunnersSetting `json:"shared_runners_setting,omitempty"`

	// ShowDiffPreviewInEmail Include the code diff preview in merge request notification emails
	ShowDiffPreviewInEmail *bool `json:"show_diff_preview_in_email,omitempty"`

	// SubgroupCreationLevel Allowed to create subgroups
	SubgroupCreationLevel *PostApiV4GroupsJSONBodySubgroupCreationLevel `json:"subgroup_creation_level,omitempty"`

	// TwoFactorGracePeriod Time before Two-factor authentication is enforced
	TwoFactorGracePeriod *int32 `json:"two_factor_grace_period,omitempty"`

	// Visibility The visibility of the group
	Visibility *PostApiV4GroupsJSONBodyVisibility `json:"visibility,omitempty"`

	// WikiAccessLevel Wiki access level. One of `disabled`, `private` or `enabled`
	WikiAccessLevel *PostApiV4GroupsJSONBodyWikiAccessLevel `json:"wiki_access_level,omitempty"`
}
type PostApiV4GroupsJSONBodyDefaultBranchProtection int32
type PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevel int32
type PostApiV4GroupsJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevel int32
type PostApiV4GroupsJSONBodyDuoAvailability string
type PostApiV4GroupsJSONBodyEnabledGitAccessProtocol string
type PostApiV4GroupsJSONBodyProjectCreationLevel string
type PostApiV4GroupsJSONBodySharedRunnersSetting string
type PostApiV4GroupsJSONBodySubgroupCreationLevel string
type PostApiV4GroupsJSONBodyVisibility string
type PostApiV4GroupsJSONBodyWikiAccessLevel string
type PostApiV4GroupsImportMultipartBody struct {
	// File The group export file to be imported
	File string `json:"file"`

	// Name Group name
	Name string `json:"name"`

	// OrganizationId The ID of the organization that the group will be part of.
	OrganizationId *int32 `json:"organization_id,omitempty"`

	// ParentId The ID of the parent group that the group will be imported into. Defaults to the current user's namespace.
	ParentId *int32 `json:"parent_id,omitempty"`

	// Path Group path
	Path string `json:"path"`
}
type GetApiV4GroupsIdParams struct {
	// WithCustomAttributes Include custom attributes in the response
	WithCustomAttributes *bool `form:"with_custom_attributes,omitempty" json:"with_custom_attributes,omitempty"`

	// WithProjects Omit project details
	WithProjects *bool `form:"with_projects,omitempty" json:"with_projects,omitempty"`
}
type PutApiV4GroupsIdJSONBody struct {
	// AiSettingsAttributes AI-related settings
	AiSettingsAttributes *struct {
		// DuoWorkflowMcpEnabled Enable MCP support for Duo Workflow
		DuoWorkflowMcpEnabled *bool `json:"duo_workflow_mcp_enabled,omitempty"`
	} `json:"ai_settings_attributes,omitempty"`

	// AllowedEmailDomainsList List of allowed email domains for group
	AllowedEmailDomainsList *string `json:"allowed_email_domains_list,omitempty"`

	// AmazonQAutoReviewEnabled Enable Amazon Q auto review for merge request
	AmazonQAutoReviewEnabled *bool `json:"amazon_q_auto_review_enabled,omitempty"`

	// AutoBanUserOnExcessiveProjectsDownload Ban users from the group when they exceed maximum number of unique projects download in the specified time period
	AutoBanUserOnExcessiveProjectsDownload *bool `json:"auto_ban_user_on_excessive_projects_download,omitempty"`

	// AutoDevopsEnabled Default to Auto DevOps pipeline for all projects within this group
	AutoDevopsEnabled *bool `json:"auto_devops_enabled,omitempty"`

	// Avatar Avatar image for the group
	Avatar *string `json:"avatar,omitempty"`

	// DefaultBranch The default branch of group's projects
	DefaultBranch *string `json:"default_branch,omitempty"`

	// DefaultBranchProtection Determine if developers can push to default branch
	DefaultBranchProtection *PutApiV4GroupsIdJSONBodyDefaultBranchProtection `json:"default_branch_protection,omitempty"`

	// DefaultBranchProtectionDefaults Determine if developers can push to default branch
	DefaultBranchProtectionDefaults *struct {
		// AllowForcePush Allow force push for all users with push access.
		AllowForcePush *bool `json:"allow_force_push,omitempty"`

		// AllowedToMerge An array of access levels allowed to merge
		AllowedToMerge *[]struct {
			// AccessLevel A valid access level
			AccessLevel PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevel `json:"access_level"`
		} `json:"allowed_to_merge,omitempty"`

		// AllowedToPush An array of access levels allowed to push
		AllowedToPush *[]struct {
			// AccessLevel A valid access level
			AccessLevel PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevel `json:"access_level"`
		} `json:"allowed_to_push,omitempty"`

		// CodeOwnerApprovalRequired Require approval from code owners
		CodeOwnerApprovalRequired *bool `json:"code_owner_approval_required,omitempty"`

		// DeveloperCanInitialPush Allow developers to initial push
		DeveloperCanInitialPush *bool `json:"developer_can_initial_push,omitempty"`
	} `json:"default_branch_protection_defaults,omitempty"`

	// Description The description of the group
	Description *string `json:"description,omitempty"`

	// DuoAvailability Duo availability. One of `default_on`, `default_off` or `never_on`
	DuoAvailability *PutApiV4GroupsIdJSONBodyDuoAvailability `json:"duo_availability,omitempty"`

	// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
	DuoCoreFeaturesEnabled *bool `json:"duo_core_features_enabled,omitempty"`

	// DuoFeaturesEnabled Indicates whether GitLab Duo features are enabled for the group
	DuoFeaturesEnabled *bool `json:"duo_features_enabled,omitempty"`

	// EmailsDisabled _(Deprecated)_ Disable email notifications. Use: emails_enabled
	EmailsDisabled *bool `json:"emails_disabled,omitempty"`

	// EmailsEnabled Enable email notifications
	EmailsEnabled *bool `json:"emails_enabled,omitempty"`

	// EnabledGitAccessProtocol Allow only the selected protocols to be used for Git access.
	EnabledGitAccessProtocol *PutApiV4GroupsIdJSONBodyEnabledGitAccessProtocol `json:"enabled_git_access_protocol,omitempty"`

	// ExperimentFeaturesEnabled Enable experiment features for this group
	ExperimentFeaturesEnabled *bool `json:"experiment_features_enabled,omitempty"`

	// ExtraSharedRunnersMinutesLimit (admin-only) Extra compute minutes quota for this group
	ExtraSharedRunnersMinutesLimit *int32 `json:"extra_shared_runners_minutes_limit,omitempty"`

	// FileTemplateProjectId The ID of a project to use for custom templates in this group
	FileTemplateProjectId *int32 `json:"file_template_project_id,omitempty"`

	// IpRestrictionRanges List of IP addresses which need to be restricted for group
	IpRestrictionRanges *string `json:"ip_restriction_ranges,omitempty"`

	// LdapAccess A valid access level
	LdapAccess *int32 `json:"ldap_access,omitempty"`

	// LdapCn LDAP Common Name
	LdapCn *string `json:"ldap_cn,omitempty"`

	// LfsEnabled Enable/disable LFS for the projects in this group
	LfsEnabled *bool `json:"lfs_enabled,omitempty"`

	// LockDuoFeaturesEnabled Indicates if the GitLab Duo features enabled setting is enforced for all subgroups
	LockDuoFeaturesEnabled *bool `json:"lock_duo_features_enabled,omitempty"`

	// LockMathRenderingLimitsEnabled Indicates if math rendering limits are locked for all descendent groups.
	LockMathRenderingLimitsEnabled *bool `json:"lock_math_rendering_limits_enabled,omitempty"`

	// MathRenderingLimitsEnabled Indicates if math rendering limits are used for this group.
	MathRenderingLimitsEnabled *bool `json:"math_rendering_limits_enabled,omitempty"`

	// MaxArtifactsSize Set the maximum file size for each job's artifacts
	MaxArtifactsSize *int32 `json:"max_artifacts_size,omitempty"`

	// MembershipLock Prevent adding new members to projects within this group
	MembershipLock *bool `json:"membership_lock,omitempty"`

	// MentionsDisabled Disable a group from getting mentioned
	MentionsDisabled *bool `json:"mentions_disabled,omitempty"`

	// ModelPromptCacheEnabled Enable model prompt cache for this group
	ModelPromptCacheEnabled *bool `json:"model_prompt_cache_enabled,omitempty"`

	// Name The name of the group
	Name *string `json:"name,omitempty"`

	// Path The path of the group
	Path *string `json:"path,omitempty"`

	// PreventForkingOutsideGroup Prevent forking projects inside this group to external namespaces
	PreventForkingOutsideGroup *bool `json:"prevent_forking_outside_group,omitempty"`

	// PreventSharingGroupsOutsideHierarchy Prevent sharing groups within this namespace with any groups outside the namespace. Only available on top-level groups.
	PreventSharingGroupsOutsideHierarchy *bool `json:"prevent_sharing_groups_outside_hierarchy,omitempty"`

	// ProjectCreationLevel Determine if developers can create projects in the group
	ProjectCreationLevel *PutApiV4GroupsIdJSONBodyProjectCreationLevel `json:"project_creation_level,omitempty"`

	// RequestAccessEnabled Allow users to request member access
	RequestAccessEnabled *bool `json:"request_access_enabled,omitempty"`

	// RequireTwoFactorAuthentication Require all users in this group to setup Two-factor authentication
	RequireTwoFactorAuthentication *bool `json:"require_two_factor_authentication,omitempty"`

	// ServiceAccessTokensExpirationEnforced To enforce token expiration for Service accounts users for group
	ServiceAccessTokensExpirationEnforced *bool `json:"service_access_tokens_expiration_enforced,omitempty"`

	// ShareWithGroupLock Prevent sharing a project with another group within this group
	ShareWithGroupLock *bool `json:"share_with_group_lock,omitempty"`

	// SharedRunnersMinutesLimit (admin-only) compute minutes quota for this group
	SharedRunnersMinutesLimit *int32 `json:"shared_runners_minutes_limit,omitempty"`

	// SharedRunnersSetting Enable/disable shared runners for the group and its subgroups and projects
	SharedRunnersSetting *PutApiV4GroupsIdJSONBodySharedRunnersSetting `json:"shared_runners_setting,omitempty"`

	// ShowDiffPreviewInEmail Include the code diff preview in merge request notification emails
	ShowDiffPreviewInEmail *bool `json:"show_diff_preview_in_email,omitempty"`

	// SubgroupCreationLevel Allowed to create subgroups
	SubgroupCreationLevel *PutApiV4GroupsIdJSONBodySubgroupCreationLevel `json:"subgroup_creation_level,omitempty"`

	// TwoFactorGracePeriod Time before Two-factor authentication is enforced
	TwoFactorGracePeriod *int32 `json:"two_factor_grace_period,omitempty"`

	// UniqueProjectDownloadLimit Maximum number of unique projects a user can download in the specified time period before they are banned.
	UniqueProjectDownloadLimit *int32 `json:"unique_project_download_limit,omitempty"`

	// UniqueProjectDownloadLimitAlertlist List of user ids who will be emailed when Git abuse rate limit is exceeded
	UniqueProjectDownloadLimitAlertlist *[]int32 `json:"unique_project_download_limit_alertlist,omitempty"`

	// UniqueProjectDownloadLimitAllowlist List of usernames excluded from the unique project download limit
	UniqueProjectDownloadLimitAllowlist *[]string `json:"unique_project_download_limit_allowlist,omitempty"`

	// UniqueProjectDownloadLimitIntervalInSeconds Time period during which a user can download a maximum amount of projects before they are banned.
	UniqueProjectDownloadLimitIntervalInSeconds *int32 `json:"unique_project_download_limit_interval_in_seconds,omitempty"`

	// Visibility The visibility of the group
	Visibility *PutApiV4GroupsIdJSONBodyVisibility `json:"visibility,omitempty"`

	// WebBasedCommitSigningEnabled Enable web based commit signing for this group
	WebBasedCommitSigningEnabled *bool `json:"web_based_commit_signing_enabled,omitempty"`

	// WikiAccessLevel Wiki access level. One of `disabled`, `private` or `enabled`
	WikiAccessLevel *PutApiV4GroupsIdJSONBodyWikiAccessLevel `json:"wiki_access_level,omitempty"`
}
type PutApiV4GroupsIdJSONBodyDefaultBranchProtection int32
type PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToMergeAccessLevel int32
type PutApiV4GroupsIdJSONBodyDefaultBranchProtectionDefaultsAllowedToPushAccessLevel int32
type PutApiV4GroupsIdJSONBodyDuoAvailability string
type PutApiV4GroupsIdJSONBodyEnabledGitAccessProtocol string
type PutApiV4GroupsIdJSONBodyProjectCreationLevel string
type PutApiV4GroupsIdJSONBodySharedRunnersSetting string
type PutApiV4GroupsIdJSONBodySubgroupCreationLevel string
type PutApiV4GroupsIdJSONBodyVisibility string
type PutApiV4GroupsIdJSONBodyWikiAccessLevel string
type GetApiV4GroupsIdDebianDistributionsParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Codename The Debian Codename
	Codename *string `form:"codename,omitempty" json:"codename,omitempty"`

	// Suite The Debian Suite
	Suite *string `form:"suite,omitempty" json:"suite,omitempty"`

	// Origin The Debian Origin
	Origin *string `form:"origin,omitempty" json:"origin,omitempty"`

	// Label The Debian Label
	Label *string `form:"label,omitempty" json:"label,omitempty"`

	// Version The Debian Version
	Version *string `form:"version,omitempty" json:"version,omitempty"`

	// Description The Debian Description
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// ValidTimeDurationSeconds The duration before the Release file should be considered expired by the client
	ValidTimeDurationSeconds *int32 `form:"valid_time_duration_seconds,omitempty" json:"valid_time_duration_seconds,omitempty"`

	// Components The list of Components
	Components *[]string `form:"components,omitempty" json:"components,omitempty"`

	// Architectures The list of Architectures
	Architectures *[]string `form:"architectures,omitempty" json:"architectures,omitempty"`
}
type PostApiV4GroupsIdDebianDistributionsJSONBody struct {
	// Architectures The list of Architectures
	Architectures *[]string `json:"architectures,omitempty"`

	// Codename The Debian Codename
	Codename string `json:"codename"`

	// Components The list of Components
	Components *[]string `json:"components,omitempty"`

	// Description The Debian Description
	Description *string `json:"description,omitempty"`

	// Label The Debian Label
	Label *string `json:"label,omitempty"`

	// Origin The Debian Origin
	Origin *string `json:"origin,omitempty"`

	// Suite The Debian Suite
	Suite *string `json:"suite,omitempty"`

	// ValidTimeDurationSeconds The duration before the Release file should be considered expired by the client
	ValidTimeDurationSeconds *int32 `json:"valid_time_duration_seconds,omitempty"`

	// Version The Debian Version
	Version *string `json:"version,omitempty"`
}
type DeleteApiV4GroupsIdDebianDistributionsCodenameParams struct {
	// Suite The Debian Suite
	Suite *string `form:"suite,omitempty" json:"suite,omitempty"`

	// Origin The Debian Origin
	Origin *string `form:"origin,omitempty" json:"origin,omitempty"`

	// Label The Debian Label
	Label *string `form:"label,omitempty" json:"label,omitempty"`

	// Version The Debian Version
	Version *string `form:"version,omitempty" json:"version,omitempty"`

	// Description The Debian Description
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// ValidTimeDurationSeconds The duration before the Release file should be considered expired by the client
	ValidTimeDurationSeconds *int32 `form:"valid_time_duration_seconds,omitempty" json:"valid_time_duration_seconds,omitempty"`

	// Components The list of Components
	Components *[]string `form:"components,omitempty" json:"components,omitempty"`

	// Architectures The list of Architectures
	Architectures *[]string `form:"architectures,omitempty" json:"architectures,omitempty"`
}
type PutApiV4GroupsIdDebianDistributionsCodenameJSONBody struct {
	// Architectures The list of Architectures
	Architectures *[]string `json:"architectures,omitempty"`

	// Components The list of Components
	Components *[]string `json:"components,omitempty"`

	// Description The Debian Description
	Description *string `json:"description,omitempty"`

	// Label The Debian Label
	Label *string `json:"label,omitempty"`

	// Origin The Debian Origin
	Origin *string `json:"origin,omitempty"`

	// Suite The Debian Suite
	Suite *string `json:"suite,omitempty"`

	// ValidTimeDurationSeconds The duration before the Release file should be considered expired by the client
	ValidTimeDurationSeconds *int32 `json:"valid_time_duration_seconds,omitempty"`

	// Version The Debian Version
	Version *string `json:"version,omitempty"`
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionInreleaseParams struct {
	// Distribution The Debian Codename or Suite
	Distribution string `form:"distribution" json:"distribution"`
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseParams struct {
	// Distribution The Debian Codename or Suite
	Distribution string `form:"distribution" json:"distribution"`
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpgParams struct {
	// Distribution The Debian Codename or Suite
	Distribution string `form:"distribution" json:"distribution"`
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackagesParams struct {
	// Distribution The Debian Codename or Suite
	Distribution string `form:"distribution" json:"distribution"`
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256Params struct {
	// Distribution The Debian Codename or Suite
	Distribution string `form:"distribution" json:"distribution"`
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackagesParams struct {
	// Distribution The Debian Codename or Suite
	Distribution string `form:"distribution" json:"distribution"`
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256Params struct {
	// Distribution The Debian Codename or Suite
	Distribution string `form:"distribution" json:"distribution"`
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSourcesParams struct {
	// Distribution The Debian Codename or Suite
	Distribution string `form:"distribution" json:"distribution"`
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256Params struct {
	// Distribution The Debian Codename or Suite
	Distribution string `form:"distribution" json:"distribution"`
}
type GetApiV4GroupsIdPackagesMavenpathFileNameParams struct {
	// Path Package path
	Path string `form:"path" json:"path"`
}
type GetApiV4GroupsIdPackagesNpmpackageNameParams struct {
	// PackageName Package name
	PackageName string `form:"package_name" json:"package_name"`
}
type GetApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsParams struct {
	// PackageName Package name
	PackageName string `form:"package_name" json:"package_name"`
}
type DeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagParams struct {
	// PackageName Package name
	PackageName string `form:"package_name" json:"package_name"`
}
type PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagJSONBody struct {
	// PackageName Package name
	PackageName string `json:"package_name"`
}
type GetApiV4GroupsIdPackagesNugetQueryParams struct {
	// Q The search term
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Skip The number of results to skip
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Take The number of results to return
	Take *int32 `form:"take,omitempty" json:"take,omitempty"`

	// Prerelease Include prerelease versions
	Prerelease *bool `form:"prerelease,omitempty" json:"prerelease,omitempty"`
}
type GetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileNameParams struct {
	// FileName The symbol file name
	FileName string `form:"file_name" json:"file_name"`

	// Signature The symbol file signature
	Signature      string `form:"signature" json:"signature"`
	SameFileName   string `form:"same_file_name" json:"same_file_name"`
	Symbolchecksum string `json:"Symbolchecksum"`
}
type GetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifierParams struct {
	// FileIdentifier The PyPi package file identifier
	FileIdentifier string `form:"file_identifier" json:"file_identifier"`
}
type GetApiV4GroupsIdPackagesPypiSimplepackageNameParams struct {
	// PackageName The PyPi package name
	PackageName string `form:"package_name" json:"package_name"`
}
type GetApiV4GroupsIdAccessRequestsParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type PutApiV4GroupsIdAccessRequestsUserIdApproveJSONBody struct {
	// AccessLevel A valid access level (defaults: `30`, the Developer role)
	AccessLevel *int32 `json:"access_level,omitempty"`
}
type PostApiV4GroupsIdAccessTokensSelfRotateJSONBody struct {
	// ExpiresAt The expiration date of the token
	ExpiresAt *openapi_types.Date `json:"expires_at,omitempty"`
}
type GetApiV4GroupsIdAuditEventsParams struct {
	// CreatedAfter Return audit events created after the specified time
	CreatedAfter *time.Time `form:"created_after,omitempty" json:"created_after,omitempty"`

	// CreatedBefore Return audit events created before the specified time
	CreatedBefore *time.Time `form:"created_before,omitempty" json:"created_before,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type GetApiV4GroupsIdBadgesParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Name Name for the badge
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}
type PostApiV4GroupsIdBadgesJSONBody struct {
	// ImageUrl URL of the badge image
	ImageUrl string `json:"image_url"`

	// LinkUrl URL of the badge link
	LinkUrl string `json:"link_url"`

	// Name Name for the badge
	Name *string `json:"name,omitempty"`
}
type GetApiV4GroupsIdBadgesRenderParams struct {
	// LinkUrl URL of the badge link
	LinkUrl string `form:"link_url" json:"link_url"`

	// ImageUrl URL of the badge image
	ImageUrl string `form:"image_url" json:"image_url"`
}
type PutApiV4GroupsIdBadgesBadgeIdJSONBody struct {
	// ImageUrl URL of the badge image
	ImageUrl *string `json:"image_url,omitempty"`

	// LinkUrl URL of the badge link
	LinkUrl *string `json:"link_url,omitempty"`

	// Name Name for the badge
	Name *string `json:"name,omitempty"`
}
type GetApiV4GroupsIdBillableMembersParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Search The exact name of the subscribed member
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort The sorting option
	Sort *GetApiV4GroupsIdBillableMembersParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}
type GetApiV4GroupsIdBillableMembersParamsSort string
type GetApiV4GroupsIdBillableMembersUserIdIndirectParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type GetApiV4GroupsIdBillableMembersUserIdMembershipsParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type GetApiV4GroupsIdClustersParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type PostApiV4GroupsIdClustersUserJSONBody struct {
	// Domain Cluster base domain
	Domain *string `json:"domain,omitempty"`

	// Enabled Determines if cluster is active or not, defaults to true
	Enabled *bool `json:"enabled,omitempty"`

	// EnvironmentScope The associated environment to the cluster
	EnvironmentScope *string `json:"environment_scope,omitempty"`

	// Managed Determines if GitLab will manage namespaces and service accounts for this cluster, defaults to true
	Managed *bool `json:"managed,omitempty"`

	// ManagementProjectId The ID of the management project
	ManagementProjectId *int32 `json:"management_project_id,omitempty"`

	// Name Cluster name
	Name string `json:"name"`

	// NamespacePerEnvironment Deploy each environment to a separate Kubernetes namespace
	NamespacePerEnvironment *bool `json:"namespace_per_environment,omitempty"`

	// PlatformKubernetesAttributes Platform Kubernetes data
	PlatformKubernetesAttributes struct {
		// ApiUrl URL to access the Kubernetes API
		ApiUrl string `json:"api_url"`

		// AuthorizationType Cluster authorization type, defaults to RBAC
		AuthorizationType *PostApiV4GroupsIdClustersUserJSONBodyPlatformKubernetesAttributesAuthorizationType `json:"authorization_type,omitempty"`

		// CaCert TLS certificate (needed if API is using a self-signed TLS certificate)
		CaCert *string `json:"ca_cert,omitempty"`

		// Namespace Unique namespace related to Group
		Namespace *string `json:"namespace,omitempty"`

		// Token Token to authenticate against Kubernetes
		Token string `json:"token"`
	} `json:"platform_kubernetes_attributes"`
}
type PostApiV4GroupsIdClustersUserJSONBodyPlatformKubernetesAttributesAuthorizationType string
type PutApiV4GroupsIdClustersClusterIdJSONBody struct {
	// Domain Cluster base domain
	Domain *string `json:"domain,omitempty"`

	// Enabled Determines if cluster is active or not
	Enabled *bool `json:"enabled,omitempty"`

	// EnvironmentScope The associated environment to the cluster
	EnvironmentScope *string `json:"environment_scope,omitempty"`

	// Managed Determines if GitLab will manage namespaces and service accounts for this cluster
	Managed *bool `json:"managed,omitempty"`

	// ManagementProjectId The ID of the management project
	ManagementProjectId *int32 `json:"management_project_id,omitempty"`

	// Name Cluster name
	Name *string `json:"name,omitempty"`

	// NamespacePerEnvironment Deploy each environment to a separate Kubernetes namespace
	NamespacePerEnvironment *bool `json:"namespace_per_environment,omitempty"`

	// PlatformKubernetesAttributes Platform Kubernetes data
	PlatformKubernetesAttributes *struct {
		// ApiUrl URL to access the Kubernetes API
		ApiUrl *string `json:"api_url,omitempty"`

		// CaCert TLS certificate (needed if API is using a self-signed TLS certificate)
		CaCert *string `json:"ca_cert,omitempty"`

		// Namespace Unique namespace related to Group
		Namespace *string `json:"namespace,omitempty"`

		// Token Token to authenticate against Kubernetes
		Token *string `json:"token,omitempty"`
	} `json:"platform_kubernetes_attributes,omitempty"`
}
type PutApiV4GroupsIdCustomAttributesKeyJSONBody struct {
	// Value The value of the custom attribute
	Value string `json:"value"`
}
type GetApiV4GroupsIdDeployTokensParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Active Limit by active status
	Active *bool `form:"active,omitempty" json:"active,omitempty"`
}
type PostApiV4GroupsIdDeployTokensJSONBody struct {
	// ExpiresAt Expiration date for the deploy token. Does not expire if no value is provided. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`)
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// Name New deploy token's name
	Name string `json:"name"`

	// Scopes Indicates the deploy token scopes. Must be at least one of `read_repository`, `read_registry`, `write_registry`, `read_package_registry`, or `write_package_registry`
	Scopes []PostApiV4GroupsIdDeployTokensJSONBodyScopes `json:"scopes"`

	// Username Username for deploy token. Default is `gitlab+deploy-token-{n}`
	Username *string `json:"username,omitempty"`
}
type PostApiV4GroupsIdDeployTokensJSONBodyScopes string
type GetApiV4GroupsIdDescendantGroupsParams struct {
	// Statistics Include project statistics
	Statistics *bool `form:"statistics,omitempty" json:"statistics,omitempty"`

	// Archived Limit by archived status
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`

	// SkipGroups Array of group ids to exclude from list
	SkipGroups *[]int32 `form:"skip_groups,omitempty" json:"skip_groups,omitempty"`

	// AllAvailable When `true`, returns all accessible groups. When `false`, returns only groups where the user is a member.
	AllAvailable *bool `form:"all_available,omitempty" json:"all_available,omitempty"`

	// Visibility Limit by visibility
	Visibility *GetApiV4GroupsIdDescendantGroupsParamsVisibility `form:"visibility,omitempty" json:"visibility,omitempty"`

	// Search Search for a specific group
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Owned Limit by owned by authenticated user
	Owned *bool `form:"owned,omitempty" json:"owned,omitempty"`

	// OrderBy Order by name, path, id or similarity if searching
	OrderBy *GetApiV4GroupsIdDescendantGroupsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Sort Sort by asc (ascending) or desc (descending)
	Sort *GetApiV4GroupsIdDescendantGroupsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// MinAccessLevel Minimum access level of authenticated user
	MinAccessLevel *GetApiV4GroupsIdDescendantGroupsParamsMinAccessLevel `form:"min_access_level,omitempty" json:"min_access_level,omitempty"`

	// TopLevelOnly Only include top-level groups
	TopLevelOnly *bool `form:"top_level_only,omitempty" json:"top_level_only,omitempty"`

	// MarkedForDeletionOn Return groups that are marked for deletion on this date
	MarkedForDeletionOn *openapi_types.Date `form:"marked_for_deletion_on,omitempty" json:"marked_for_deletion_on,omitempty"`

	// Active Limit by groups that are not archived and not marked for deletion
	Active *bool `form:"active,omitempty" json:"active,omitempty"`

	// RepositoryStorage Filter by repository storage used by the group
	RepositoryStorage *string `form:"repository_storage,omitempty" json:"repository_storage,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// WithCustomAttributes Include custom attributes in the response
	WithCustomAttributes *bool `form:"with_custom_attributes,omitempty" json:"with_custom_attributes,omitempty"`
}
type GetApiV4GroupsIdDescendantGroupsParamsVisibility string
type GetApiV4GroupsIdDescendantGroupsParamsOrderBy string
type GetApiV4GroupsIdDescendantGroupsParamsSort string
type GetApiV4GroupsIdDescendantGroupsParamsMinAccessLevel int32
type GetApiV4GroupsIdEpicsEpicIidAwardEmojiParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type PostApiV4GroupsIdEpicsEpicIidAwardEmojiJSONBody struct {
	// Name Name of the emoji without colons.
	Name string `json:"name"`
}
type GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiJSONBody struct {
	// Name Name of the emoji without colons.
	Name string `json:"name"`
}
type PostApiV4GroupsIdExportRelationsJSONBody struct {
	// Batched Whether to export in batches
	Batched *bool `json:"batched,omitempty"`
}
type GetApiV4GroupsIdExportRelationsDownloadParams struct {
	// Relation Group relation name
	Relation string `form:"relation" json:"relation"`

	// Batched Whether to download in batches
	Batched *bool `form:"batched,omitempty" json:"batched,omitempty"`

	// BatchNumber Batch number to download
	BatchNumber *int32 `form:"batch_number,omitempty" json:"batch_number,omitempty"`
}
type GetApiV4GroupsIdExportRelationsStatusParams struct {
	// Relation Group relation name
	Relation *string `form:"relation,omitempty" json:"relation,omitempty"`
}
type GetApiV4GroupsIdGroupsSharedParams struct {
	// SkipGroups Array of group ids to exclude from list
	SkipGroups *[]int32 `form:"skip_groups,omitempty" json:"skip_groups,omitempty"`

	// Visibility Limit by visibility
	Visibility *GetApiV4GroupsIdGroupsSharedParamsVisibility `form:"visibility,omitempty" json:"visibility,omitempty"`

	// Search Search for a specific group
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// MinAccessLevel Minimum access level of authenticated user
	MinAccessLevel *GetApiV4GroupsIdGroupsSharedParamsMinAccessLevel `form:"min_access_level,omitempty" json:"min_access_level,omitempty"`

	// OrderBy Order by name, path, id or similarity if searching
	OrderBy *GetApiV4GroupsIdGroupsSharedParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Sort Sort by asc (ascending) or desc (descending)
	Sort *GetApiV4GroupsIdGroupsSharedParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// WithCustomAttributes Include custom attributes in the response
	WithCustomAttributes *bool `form:"with_custom_attributes,omitempty" json:"with_custom_attributes,omitempty"`
}
type GetApiV4GroupsIdGroupsSharedParamsVisibility string
type GetApiV4GroupsIdGroupsSharedParamsMinAccessLevel int32
type GetApiV4GroupsIdGroupsSharedParamsOrderBy string
type GetApiV4GroupsIdGroupsSharedParamsSort string
type PutApiV4GroupsIdIntegrationsAppleAppStoreJSONBody struct {
	// AppStoreIssuerId Apple App Store Connect issuer ID.
	AppStoreIssuerId string `json:"app_store_issuer_id"`

	// AppStoreKeyId Apple App Store Connect key ID.
	AppStoreKeyId string `json:"app_store_key_id"`

	// AppStorePrivateKey Apple App Store Connect private key.
	AppStorePrivateKey string `json:"app_store_private_key"`

	// AppStorePrivateKeyFileName Apple App Store Connect private key file name.
	AppStorePrivateKeyFileName string `json:"app_store_private_key_file_name"`

	// AppStoreProtectedRefs Set variables on protected branches and tags only.
	AppStoreProtectedRefs *bool `json:"app_store_protected_refs,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsAsanaJSONBody struct {
	// ApiKey User API token. The user must have access to the task. All comments are attributed to this user.
	ApiKey string `json:"api_key"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// RestrictToBranch Comma-separated list of branches to be automatically inspected. Leave blank to include all branches.
	RestrictToBranch *string `json:"restrict_to_branch,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsAssemblaJSONBody struct {
	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// Subdomain The subdomain setting.
	Subdomain *string `json:"subdomain,omitempty"`

	// Token The authentication token.
	Token string `json:"token"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsBambooJSONBody struct {
	// BambooUrl Bamboo root URL (for example, `https://bamboo.example.com`).
	BambooUrl string `json:"bamboo_url"`

	// BuildKey Bamboo build plan key (for example, `KEY`).
	BuildKey string `json:"build_key"`

	// EnableSslVerification Enable SSL verification. Defaults to `true` (enabled).
	EnableSslVerification *bool `json:"enable_ssl_verification,omitempty"`

	// Password Password of the user.
	Password string `json:"password"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// Username User with API access to the Bamboo server.
	Username string `json:"username"`
}
type PutApiV4GroupsIdIntegrationsBugzillaJSONBody struct {
	// IssuesUrl URL of the issue.
	IssuesUrl string `json:"issues_url"`

	// NewIssueUrl URL of the new issue.
	NewIssueUrl string `json:"new_issue_url"`

	// ProjectUrl URL of the project.
	ProjectUrl string `json:"project_url"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsBuildkiteJSONBody struct {
	// EnableSslVerification DEPRECATED: This parameter has no effect because SSL verification is always enabled.
	EnableSslVerification *bool `json:"enable_ssl_verification,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// ProjectUrl Pipeline URL (for example, `https://buildkite.com/example/pipeline`).
	ProjectUrl string `json:"project_url"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// Token Token you get after you create a Buildkite pipeline with a GitLab repository.
	Token string `json:"token"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsCampfireJSONBody struct {
	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// Room ID portion of the Campfire room URL.
	Room *string `json:"room,omitempty"`

	// Subdomain `.campfirenow.com` subdomain when you're signed in.
	Subdomain *string `json:"subdomain,omitempty"`

	// Token API authentication token from Campfire. To get the token, sign in to Campfire and select **My info**.
	Token string `json:"token"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsClickupJSONBody struct {
	// IssuesUrl URL of the issue.
	IssuesUrl string `json:"issues_url"`

	// ProjectUrl URL of the project.
	ProjectUrl string `json:"project_url"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsConfluenceJSONBody struct {
	// ConfluenceUrl URL of the Confluence Workspace hosted on `atlassian.net`.
	ConfluenceUrl string `json:"confluence_url"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsCustomIssueTrackerJSONBody struct {
	// IssuesUrl URL of the issue.
	IssuesUrl string `json:"issues_url"`

	// NewIssueUrl URL of the new issue.
	NewIssueUrl string `json:"new_issue_url"`

	// ProjectUrl URL of the project.
	ProjectUrl string `json:"project_url"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsDatadogJSONBody struct {
	// ApiKey <a target="_blank" rel="noopener noreferrer" href="https://docs.datadoghq.com/account_management/api-app-keys/">API key</a> used for authentication with Datadog.
	ApiKey string `json:"api_key"`

	// ApiUrl Full URL of your Datadog site. Only required if you do not use a standard Datadog site.
	ApiUrl *string `json:"api_url,omitempty"`

	// ArchiveTraceEvents When enabled, job logs are collected by Datadog and displayed along with pipeline execution traces.
	ArchiveTraceEvents *bool `json:"archive_trace_events,omitempty"`

	// BuildEvents Trigger event when a build is created.
	BuildEvents *bool `json:"build_events,omitempty"`

	// DatadogCiVisibility Enable CI Visibility
	DatadogCiVisibility *bool `json:"datadog_ci_visibility,omitempty"`

	// DatadogEnv For self-managed deployments, `env` tag for all the data sent to Datadog.
	DatadogEnv *string `json:"datadog_env,omitempty"`

	// DatadogService Tag all pipeline data from this GitLab instance in Datadog. Can be used when managing several self-managed deployments.
	DatadogService *string `json:"datadog_service,omitempty"`

	// DatadogSite Datadog site to send data to. Learn more about Datadog sites in the <a target="_blank" rel="noopener noreferrer" href="https://docs.datadoghq.com/getting_started/site/">documentation</a>.
	DatadogSite *string `json:"datadog_site,omitempty"`

	// DatadogTags Custom tags in Datadog. Specify one tag per line in the format `key:value\nkey2:value2`.
	DatadogTags *string `json:"datadog_tags,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// NoteEvents Trigger event for new comments.
	NoteEvents *bool `json:"note_events,omitempty"`

	// PipelineEvents Trigger event when a pipeline status changes.
	PipelineEvents *bool `json:"pipeline_events,omitempty"`
	ProjectEvents  *bool `json:"project_events,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents     *bool `json:"push_events,omitempty"`
	SubgroupEvents *bool `json:"subgroup_events,omitempty"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsDiffblueCoverJSONBody struct {
	// DiffblueAccessTokenName Access token name used by Diffblue Cover in pipelines.
	DiffblueAccessTokenName string `json:"diffblue_access_token_name"`

	// DiffblueAccessTokenSecret Access token secret used by Diffblue Cover in pipelines.
	DiffblueAccessTokenSecret string `json:"diffblue_access_token_secret"`

	// DiffblueLicenseKey Diffblue Cover license key.
	DiffblueLicenseKey string `json:"diffblue_license_key"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsDiscordJSONBody struct {
	// AlertChannel The name of the channel to receive alert_events notifications
	AlertChannel *string `json:"alert_channel,omitempty"`

	// BranchesToBeNotified Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.
	BranchesToBeNotified *string `json:"branches_to_be_notified,omitempty"`

	// ConfidentialIssueChannel The name of the channel to receive confidential_issues_events notifications
	ConfidentialIssueChannel *string `json:"confidential_issue_channel,omitempty"`

	// ConfidentialIssuesEvents Trigger event when a confidential issue is created, updated, or closed.
	ConfidentialIssuesEvents *bool `json:"confidential_issues_events,omitempty"`

	// ConfidentialNoteChannel The name of the channel to receive confidential_note_events notifications
	ConfidentialNoteChannel *string `json:"confidential_note_channel,omitempty"`

	// ConfidentialNoteEvents Trigger event for new comments on confidential issues.
	ConfidentialNoteEvents *bool `json:"confidential_note_events,omitempty"`

	// DeploymentChannel The name of the channel to receive deployment_events notifications
	DeploymentChannel *string `json:"deployment_channel,omitempty"`

	// DeploymentEvents Trigger event when a deployment starts or finishes.
	DeploymentEvents *bool `json:"deployment_events,omitempty"`

	// IncidentChannel The name of the channel to receive incident_events notifications
	IncidentChannel *string `json:"incident_channel,omitempty"`

	// IssueChannel The name of the channel to receive issues_events notifications
	IssueChannel *string `json:"issue_channel,omitempty"`

	// IssuesEvents Trigger event when an issue is created, updated, or closed.
	IssuesEvents *bool `json:"issues_events,omitempty"`

	// MergeRequestChannel The name of the channel to receive merge_requests_events notifications
	MergeRequestChannel *string `json:"merge_request_channel,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// NoteChannel The name of the channel to receive note_events notifications
	NoteChannel *string `json:"note_channel,omitempty"`

	// NoteEvents Trigger event for new comments.
	NoteEvents *bool `json:"note_events,omitempty"`

	// NotifyOnlyBrokenPipelines Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines *bool `json:"notify_only_broken_pipelines,omitempty"`

	// PipelineChannel The name of the channel to receive pipeline_events notifications
	PipelineChannel *string `json:"pipeline_channel,omitempty"`

	// PipelineEvents Trigger event when a pipeline status changes.
	PipelineEvents *bool `json:"pipeline_events,omitempty"`

	// PushChannel The name of the channel to receive push_events notifications
	PushChannel *string `json:"push_channel,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// TagPushChannel The name of the channel to receive tag_push_events notifications
	TagPushChannel *string `json:"tag_push_channel,omitempty"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// VulnerabilityChannel The name of the channel to receive vulnerability_events notifications
	VulnerabilityChannel *string `json:"vulnerability_channel,omitempty"`

	// Webhook Discord webhook (for example, `https://discord.com/api/webhooks/…`).
	Webhook string `json:"webhook"`

	// WikiPageChannel The name of the channel to receive wiki_page_events notifications
	WikiPageChannel *string `json:"wiki_page_channel,omitempty"`

	// WikiPageEvents Trigger event when a wiki page is created or updated.
	WikiPageEvents *bool `json:"wiki_page_events,omitempty"`
}
type PutApiV4GroupsIdIntegrationsDroneCiJSONBody struct {
	// DroneUrl Drone CI URL (for example, `http://drone.example.com`).
	DroneUrl string `json:"drone_url"`

	// EnableSslVerification Enable SSL verification. Defaults to `true` (enabled).
	EnableSslVerification *bool `json:"enable_ssl_verification,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// Token Drone CI token.
	Token string `json:"token"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsEmailsOnPushJSONBody struct {
	// BranchesToBeNotified Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.
	BranchesToBeNotified *string `json:"branches_to_be_notified,omitempty"`

	// DisableDiffs Disable code diffs
	DisableDiffs *bool `json:"disable_diffs,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// Recipients Emails separated by whitespace.
	Recipients string `json:"recipients"`

	// SendFromCommitterEmail Send from committer
	SendFromCommitterEmail *bool `json:"send_from_committer_email,omitempty"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsEwmJSONBody struct {
	// IssuesUrl URL of the issue.
	IssuesUrl string `json:"issues_url"`

	// NewIssueUrl URL of the new issue.
	NewIssueUrl string `json:"new_issue_url"`

	// ProjectUrl URL of the project.
	ProjectUrl string `json:"project_url"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsExternalWikiJSONBody struct {
	// ExternalWikiUrl URL of the external wiki.
	ExternalWikiUrl string `json:"external_wiki_url"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsGitGuardianJSONBody struct {
	// Token Personal access token to authenticate calls to the GitGuardian API.
	Token string `json:"token"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsGithubJSONBody struct {
	// PipelineEvents Trigger event when a pipeline status changes.
	PipelineEvents *bool `json:"pipeline_events,omitempty"`

	// RepositoryUrl GitHub repository URL.
	RepositoryUrl string `json:"repository_url"`

	// StaticContext Append the hostname of your GitLab instance to the status check name.
	StaticContext *bool `json:"static_context,omitempty"`

	// Token GitHub API token with `repo:status` OAuth scope.
	Token string `json:"token"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsGitlabSlackApplicationJSONBody struct {
	// AlertChannel The name of the channel to receive alert_events notifications
	AlertChannel *string `json:"alert_channel,omitempty"`

	// AlertEvents Trigger event when a new, unique alert is recorded.
	AlertEvents *bool `json:"alert_events,omitempty"`

	// BranchesToBeNotified Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.
	BranchesToBeNotified *string `json:"branches_to_be_notified,omitempty"`

	// Channel Default channel to use if no other channel is configured.
	Channel *string `json:"channel,omitempty"`

	// ConfidentialIssueChannel The name of the channel to receive confidential_issues_events notifications
	ConfidentialIssueChannel *string `json:"confidential_issue_channel,omitempty"`

	// ConfidentialIssuesEvents Trigger event when a confidential issue is created, updated, or closed.
	ConfidentialIssuesEvents *bool `json:"confidential_issues_events,omitempty"`

	// ConfidentialNoteChannel The name of the channel to receive confidential_note_events notifications
	ConfidentialNoteChannel *string `json:"confidential_note_channel,omitempty"`

	// ConfidentialNoteEvents Trigger event for new comments on confidential issues.
	ConfidentialNoteEvents *bool `json:"confidential_note_events,omitempty"`

	// DeploymentChannel The name of the channel to receive deployment_events notifications
	DeploymentChannel *string `json:"deployment_channel,omitempty"`

	// DeploymentEvents Trigger event when a deployment starts or finishes.
	DeploymentEvents *bool `json:"deployment_events,omitempty"`

	// IncidentChannel The name of the channel to receive incident_events notifications
	IncidentChannel *string `json:"incident_channel,omitempty"`

	// IncidentEvents Trigger event when an incident is created.
	IncidentEvents *bool `json:"incident_events,omitempty"`

	// IssueChannel The name of the channel to receive issues_events notifications
	IssueChannel *string `json:"issue_channel,omitempty"`

	// IssuesEvents Trigger event when an issue is created, updated, or closed.
	IssuesEvents *bool `json:"issues_events,omitempty"`

	// LabelsToBeNotified Labels to send notifications for. Leave blank to receive notifications for all events.
	LabelsToBeNotified *string `json:"labels_to_be_notified,omitempty"`

	// LabelsToBeNotifiedBehavior Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`.
	LabelsToBeNotifiedBehavior *string `json:"labels_to_be_notified_behavior,omitempty"`

	// MergeRequestChannel The name of the channel to receive merge_requests_events notifications
	MergeRequestChannel *string `json:"merge_request_channel,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// NoteChannel The name of the channel to receive note_events notifications
	NoteChannel *string `json:"note_channel,omitempty"`

	// NoteEvents Trigger event for new comments.
	NoteEvents *bool `json:"note_events,omitempty"`

	// NotifyOnlyBrokenPipelines Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines *bool `json:"notify_only_broken_pipelines,omitempty"`

	// PipelineChannel The name of the channel to receive pipeline_events notifications
	PipelineChannel *string `json:"pipeline_channel,omitempty"`

	// PipelineEvents Trigger event when a pipeline status changes.
	PipelineEvents *bool `json:"pipeline_events,omitempty"`

	// PushChannel The name of the channel to receive push_events notifications
	PushChannel *string `json:"push_channel,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// TagPushChannel The name of the channel to receive tag_push_events notifications
	TagPushChannel *string `json:"tag_push_channel,omitempty"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// VulnerabilityChannel The name of the channel to receive vulnerability_events notifications
	VulnerabilityChannel *string `json:"vulnerability_channel,omitempty"`
	VulnerabilityEvents  *bool   `json:"vulnerability_events,omitempty"`

	// WikiPageChannel The name of the channel to receive wiki_page_events notifications
	WikiPageChannel *string `json:"wiki_page_channel,omitempty"`

	// WikiPageEvents Trigger event when a wiki page is created or updated.
	WikiPageEvents *bool `json:"wiki_page_events,omitempty"`
}
type PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryJSONBody struct {
	// ArtifactRegistryLocation Location of the Artifact Registry repository.
	ArtifactRegistryLocation string `json:"artifact_registry_location"`

	// ArtifactRegistryProjectId ID of the Google Cloud project.
	ArtifactRegistryProjectId string `json:"artifact_registry_project_id"`

	// ArtifactRegistryRepositories Repository of Artifact Registry.
	ArtifactRegistryRepositories string `json:"artifact_registry_repositories"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationJSONBody struct {
	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// WorkloadIdentityFederationProjectId Google Cloud project ID for the Workload Identity Federation.
	WorkloadIdentityFederationProjectId string `json:"workload_identity_federation_project_id"`

	// WorkloadIdentityFederationProjectNumber Google Cloud project number for the Workload Identity Federation.
	WorkloadIdentityFederationProjectNumber string `json:"workload_identity_federation_project_number"`

	// WorkloadIdentityPoolId ID of the Workload Identity Pool.
	WorkloadIdentityPoolId string `json:"workload_identity_pool_id"`

	// WorkloadIdentityPoolProviderId ID of the Workload Identity Pool provider.
	WorkloadIdentityPoolProviderId string `json:"workload_identity_pool_provider_id"`
}
type PutApiV4GroupsIdIntegrationsGooglePlayJSONBody struct {
	// GooglePlayProtectedRefs Set variables on protected branches and tags only.
	GooglePlayProtectedRefs *bool `json:"google_play_protected_refs,omitempty"`

	// PackageName Package name of the app in Google Play.
	PackageName string `json:"package_name"`

	// ServiceAccountKey Google Play service account key.
	ServiceAccountKey string `json:"service_account_key"`

	// ServiceAccountKeyFileName File name of the Google Play service account key.
	ServiceAccountKeyFileName string `json:"service_account_key_file_name"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsHangoutsChatJSONBody struct {
	// BranchesToBeNotified Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.
	BranchesToBeNotified *string `json:"branches_to_be_notified,omitempty"`

	// ConfidentialIssuesEvents Trigger event when a confidential issue is created, updated, or closed.
	ConfidentialIssuesEvents *bool `json:"confidential_issues_events,omitempty"`

	// ConfidentialNoteEvents Trigger event for new comments on confidential issues.
	ConfidentialNoteEvents *bool `json:"confidential_note_events,omitempty"`

	// IssuesEvents Trigger event when an issue is created, updated, or closed.
	IssuesEvents *bool `json:"issues_events,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// NoteEvents Trigger event for new comments.
	NoteEvents *bool `json:"note_events,omitempty"`

	// NotifyOnlyBrokenPipelines Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines *bool `json:"notify_only_broken_pipelines,omitempty"`

	// PipelineEvents Trigger event when a pipeline status changes.
	PipelineEvents *bool `json:"pipeline_events,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// Webhook The Hangouts Chat webhook (for example, `https://chat.googleapis.com/v1/spaces...`).
	Webhook string `json:"webhook"`

	// WikiPageEvents Trigger event when a wiki page is created or updated.
	WikiPageEvents *bool `json:"wiki_page_events,omitempty"`
}
type PutApiV4GroupsIdIntegrationsHarborJSONBody struct {
	// Password The password of the user.
	Password string `json:"password"`

	// ProjectName The name of the project in the Harbor instance. For example, `testproject`.
	ProjectName string `json:"project_name"`

	// Url The base URL to the Harbor instance linked to the GitLab project. For example, `https://demo.goharbor.io`.
	Url string `json:"url"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// Username The username created in the Harbor interface.
	Username string `json:"username"`
}
type PutApiV4GroupsIdIntegrationsIrkerJSONBody struct {
	// ColorizeMessages Colorize messages
	ColorizeMessages *bool `json:"colorize_messages,omitempty"`

	// DefaultIrcUri URI to add before each recipient. The default value is `irc://irc.network.net:6697/`.
	DefaultIrcUri *string `json:"default_irc_uri,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// Recipients Comma-separated list of channels or email addresses.
	Recipients string `json:"recipients"`

	// ServerHost irker daemon hostname. The default value is `localhost`.
	ServerHost *string `json:"server_host,omitempty"`

	// ServerPort irker daemon port. The default value is `6659`.
	ServerPort *int32 `json:"server_port,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsJenkinsJSONBody struct {
	// EnableSslVerification Enable SSL verification. Defaults to `true` (enabled).
	EnableSslVerification *bool `json:"enable_ssl_verification,omitempty"`

	// JenkinsUrl URL of the Jenkins server.
	JenkinsUrl string `json:"jenkins_url"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// Password Password of the Jenkins server.
	Password *string `json:"password,omitempty"`

	// ProjectName Name of the Jenkins project.
	ProjectName string `json:"project_name"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// Username Username of the Jenkins server.
	Username *string `json:"username,omitempty"`
}
type PutApiV4GroupsIdIntegrationsJiraJSONBody struct {
	// ApiUrl The base URL to the Jira instance API. Web URL value is used if not set (for example, `https://jira-api.example.com`).
	ApiUrl *string `json:"api_url,omitempty"`

	// CommitEvents Trigger event when a commit is created or updated.
	CommitEvents *bool `json:"commit_events,omitempty"`

	// CustomizeJiraIssueEnabled When set to `true`, opens a prefilled form on the Jira instancewhen creating a Jira issue from a vulnerability.
	CustomizeJiraIssueEnabled *bool `json:"customize_jira_issue_enabled,omitempty"`

	// IssuesEnabled Enable viewing Jira issues in GitLab.
	IssuesEnabled *string `json:"issues_enabled,omitempty"`

	// JiraAuthType The authentication method to use with Jira. Use `0` for Basic Authentication, and `1` for Jira personal access token. Defaults to `0`.
	JiraAuthType *int32 `json:"jira_auth_type,omitempty"`

	// JiraIssuePrefix Prefix to match Jira issue keys.
	JiraIssuePrefix *string `json:"jira_issue_prefix,omitempty"`

	// JiraIssueRegex Regular expression to match Jira issue keys.
	JiraIssueRegex *string `json:"jira_issue_regex,omitempty"`

	// JiraIssueTransitionId The ID of one or more transitions for [custom issue transitions](../integration/jira/issues.md#custom-issue-transitions).Ignored when `jira_issue_transition_automatic` is enabled. Defaults to a blank string,which disables custom transitions.
	JiraIssueTransitionId *string `json:"jira_issue_transition_id,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// Password The Jira API token, password, or personal access token to use with Jira. When using Basic Authentication (`jira_auth_type` is `0`), use an API token for Jira Cloud, and a password for Jira Data Center or Jira Server. For a Jira personal access token (`jira_auth_type` is `1`), use the personal access token.
	Password string `json:"password"`

	// ProjectKey Key of the project to use when creating issues from vulnerabilities.This parameter is required if using the integration to create Jira issues from vulnerabilities.
	ProjectKey *string `json:"project_key,omitempty"`

	// ProjectKeys Keys of Jira projects. When `issues_enabled` is `true`, this setting specifies which Jira projects to view issues from in GitLab.
	ProjectKeys *[]string `json:"project_keys,omitempty"`

	// Url The URL to the Jira project which is being linked to this GitLab project (for example, `https://jira.example.com`).
	Url string `json:"url"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// Username The email or username to use with Jira. Use an email for Jira Cloud, and a username for Jira Data Center and Jira Server. Required when using Basic Authentication (`jira_auth_type` is `0`).
	Username *string `json:"username,omitempty"`

	// VulnerabilitiesEnabled Turn on Jira issue creation for GitLab vulnerabilities.
	VulnerabilitiesEnabled *bool `json:"vulnerabilities_enabled,omitempty"`

	// VulnerabilitiesIssuetype Jira issue type to use when creating issues from vulnerabilities.
	VulnerabilitiesIssuetype *string `json:"vulnerabilities_issuetype,omitempty"`
}
type PutApiV4GroupsIdIntegrationsJiraCloudAppJSONBody struct {
	// JiraCloudAppDeploymentGatingEnvironments Enter the environment (production,staging,testing,development) where you want to enable deployment gating. Use comma (,) to separate multiple environments.
	JiraCloudAppDeploymentGatingEnvironments *string `json:"jira_cloud_app_deployment_gating_environments,omitempty"`

	// JiraCloudAppEnableDeploymentGating Enable to approve or reject blocked GitLab deployments from Jira Service Management.
	JiraCloudAppEnableDeploymentGating *bool `json:"jira_cloud_app_enable_deployment_gating,omitempty"`

	// JiraCloudAppServiceIds Copy and paste your JSM Service ID here. Use comma (,) to separate multiple IDs.
	JiraCloudAppServiceIds *string `json:"jira_cloud_app_service_ids,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsMatrixJSONBody struct {
	// BranchesToBeNotified Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.
	BranchesToBeNotified *string `json:"branches_to_be_notified,omitempty"`

	// ConfidentialIssuesEvents Trigger event when a confidential issue is created, updated, or closed.
	ConfidentialIssuesEvents *bool `json:"confidential_issues_events,omitempty"`

	// ConfidentialNoteEvents Trigger event for new comments on confidential issues.
	ConfidentialNoteEvents *bool `json:"confidential_note_events,omitempty"`

	// Hostname Custom hostname of the Matrix server. The default value is `https://matrix-client.matrix.org`.
	Hostname *string `json:"hostname,omitempty"`

	// IncidentEvents Trigger event when an incident is created.
	IncidentEvents *bool `json:"incident_events,omitempty"`

	// IssuesEvents Trigger event when an issue is created, updated, or closed.
	IssuesEvents *bool `json:"issues_events,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// NoteEvents Trigger event for new comments.
	NoteEvents *bool `json:"note_events,omitempty"`

	// NotifyOnlyBrokenPipelines Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines *bool `json:"notify_only_broken_pipelines,omitempty"`

	// PipelineEvents Trigger event when a pipeline status changes.
	PipelineEvents *bool `json:"pipeline_events,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// Room Unique identifier for the target room (in the format `!qPKKM111FFKKsfoCVy:matrix.org`).
	Room string `json:"room"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// Token The Matrix access token (for example, `syt-zyx57W2v1u123ew11`).
	Token string `json:"token"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
	VulnerabilityEvents  *bool `json:"vulnerability_events,omitempty"`

	// WikiPageEvents Trigger event when a wiki page is created or updated.
	WikiPageEvents *bool `json:"wiki_page_events,omitempty"`
}
type PutApiV4GroupsIdIntegrationsMattermostJSONBody struct {
	// AlertChannel The name of the channel to receive alert_events notifications
	AlertChannel *string `json:"alert_channel,omitempty"`

	// BranchesToBeNotified Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.
	BranchesToBeNotified *string `json:"branches_to_be_notified,omitempty"`

	// Channel Default channel to use if no other channel is configured.
	Channel *string `json:"channel,omitempty"`

	// ConfidentialIssueChannel The name of the channel to receive confidential_issues_events notifications
	ConfidentialIssueChannel *string `json:"confidential_issue_channel,omitempty"`

	// ConfidentialIssuesEvents Trigger event when a confidential issue is created, updated, or closed.
	ConfidentialIssuesEvents *bool `json:"confidential_issues_events,omitempty"`

	// ConfidentialNoteChannel The name of the channel to receive confidential_note_events notifications
	ConfidentialNoteChannel *string `json:"confidential_note_channel,omitempty"`

	// ConfidentialNoteEvents Trigger event for new comments on confidential issues.
	ConfidentialNoteEvents *bool `json:"confidential_note_events,omitempty"`

	// DeploymentChannel The name of the channel to receive deployment_events notifications
	DeploymentChannel *string `json:"deployment_channel,omitempty"`

	// DeploymentEvents Trigger event when a deployment starts or finishes.
	DeploymentEvents *bool `json:"deployment_events,omitempty"`

	// IncidentChannel The name of the channel to receive incident_events notifications
	IncidentChannel *string `json:"incident_channel,omitempty"`

	// IncidentEvents Trigger event when an incident is created.
	IncidentEvents *bool `json:"incident_events,omitempty"`

	// IssueChannel The name of the channel to receive issues_events notifications
	IssueChannel *string `json:"issue_channel,omitempty"`

	// IssuesEvents Trigger event when an issue is created, updated, or closed.
	IssuesEvents *bool `json:"issues_events,omitempty"`

	// LabelsToBeNotified Labels to send notifications for. Leave blank to receive notifications for all events.
	LabelsToBeNotified *string `json:"labels_to_be_notified,omitempty"`

	// LabelsToBeNotifiedBehavior Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`.
	LabelsToBeNotifiedBehavior *string `json:"labels_to_be_notified_behavior,omitempty"`

	// MergeRequestChannel The name of the channel to receive merge_requests_events notifications
	MergeRequestChannel *string `json:"merge_request_channel,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// NoteChannel The name of the channel to receive note_events notifications
	NoteChannel *string `json:"note_channel,omitempty"`

	// NoteEvents Trigger event for new comments.
	NoteEvents *bool `json:"note_events,omitempty"`

	// NotifyOnlyBrokenPipelines Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines *bool `json:"notify_only_broken_pipelines,omitempty"`

	// PipelineChannel The name of the channel to receive pipeline_events notifications
	PipelineChannel *string `json:"pipeline_channel,omitempty"`

	// PipelineEvents Trigger event when a pipeline status changes.
	PipelineEvents *bool `json:"pipeline_events,omitempty"`

	// PushChannel The name of the channel to receive push_events notifications
	PushChannel *string `json:"push_channel,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// TagPushChannel The name of the channel to receive tag_push_events notifications
	TagPushChannel *string `json:"tag_push_channel,omitempty"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// Username Mattermost notifications username.
	Username *string `json:"username,omitempty"`

	// VulnerabilityChannel The name of the channel to receive vulnerability_events notifications
	VulnerabilityChannel *string `json:"vulnerability_channel,omitempty"`
	VulnerabilityEvents  *bool   `json:"vulnerability_events,omitempty"`

	// Webhook Mattermost notifications webhook (for example, `http://mattermost.example.com/hooks/...`).
	Webhook string `json:"webhook"`

	// WikiPageChannel The name of the channel to receive wiki_page_events notifications
	WikiPageChannel *string `json:"wiki_page_channel,omitempty"`

	// WikiPageEvents Trigger event when a wiki page is created or updated.
	WikiPageEvents *bool `json:"wiki_page_events,omitempty"`
}
type PutApiV4GroupsIdIntegrationsMattermostSlashCommandsJSONBody struct {
	// Token The Mattermost token.
	Token string `json:"token"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsMicrosoftTeamsJSONBody struct {
	// BranchesToBeNotified Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.
	BranchesToBeNotified *string `json:"branches_to_be_notified,omitempty"`

	// ConfidentialIssuesEvents Trigger event when a confidential issue is created, updated, or closed.
	ConfidentialIssuesEvents *bool `json:"confidential_issues_events,omitempty"`

	// ConfidentialNoteEvents Trigger event for new comments on confidential issues.
	ConfidentialNoteEvents *bool `json:"confidential_note_events,omitempty"`

	// IssuesEvents Trigger event when an issue is created, updated, or closed.
	IssuesEvents *bool `json:"issues_events,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// NoteEvents Trigger event for new comments.
	NoteEvents *bool `json:"note_events,omitempty"`

	// NotifyOnlyBrokenPipelines Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines *bool `json:"notify_only_broken_pipelines,omitempty"`

	// PipelineEvents Trigger event when a pipeline status changes.
	PipelineEvents *bool `json:"pipeline_events,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// Webhook The Microsoft Teams webhook (for example, `https://outlook.office.com/webhook/...`).
	Webhook string `json:"webhook"`

	// WikiPageEvents Trigger event when a wiki page is created or updated.
	WikiPageEvents *bool `json:"wiki_page_events,omitempty"`
}
type PutApiV4GroupsIdIntegrationsMockCiJSONBody struct {
	// EnableSslVerification Enable SSL verification. Defaults to `true` (enabled).
	EnableSslVerification *bool `json:"enable_ssl_verification,omitempty"`

	// MockServiceUrl URL of the Mock CI integration.
	MockServiceUrl string `json:"mock_service_url"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsMockMonitoringJSONBody struct {
	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsPackagistJSONBody struct {
	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// Server URL of the Packagist server. The default value is `https://packagist.org`.
	Server *string `json:"server,omitempty"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// Token API token of the Packagist server.
	Token string `json:"token"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// Username Username of a Packagist account.
	Username string `json:"username"`
}
type PutApiV4GroupsIdIntegrationsPhorgeJSONBody struct {
	// IssuesUrl URL of the issue.
	IssuesUrl string `json:"issues_url"`

	// ProjectUrl URL of the project.
	ProjectUrl string `json:"project_url"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsPipelinesEmailJSONBody struct {
	// BranchesToBeNotified Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.
	BranchesToBeNotified *string `json:"branches_to_be_notified,omitempty"`

	// NotifyOnlyBrokenPipelines Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines *bool `json:"notify_only_broken_pipelines,omitempty"`

	// NotifyOnlyDefaultBranch Send notifications for the default branch.
	NotifyOnlyDefaultBranch *bool `json:"notify_only_default_branch,omitempty"`

	// PipelineEvents Trigger event when a pipeline status changes.
	PipelineEvents *bool `json:"pipeline_events,omitempty"`

	// Recipients Comma-separated list of recipient email addresses.
	Recipients string `json:"recipients"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsPivotaltrackerJSONBody struct {
	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// RestrictToBranch Comma-separated list of branches to automatically inspect. Leave blank to include all branches.
	RestrictToBranch *string `json:"restrict_to_branch,omitempty"`

	// Token The Pivotal Tracker token.
	Token string `json:"token"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsPumbleJSONBody struct {
	// BranchesToBeNotified Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.
	BranchesToBeNotified *string `json:"branches_to_be_notified,omitempty"`

	// ConfidentialIssuesEvents Trigger event when a confidential issue is created, updated, or closed.
	ConfidentialIssuesEvents *bool `json:"confidential_issues_events,omitempty"`

	// ConfidentialNoteEvents Trigger event for new comments on confidential issues.
	ConfidentialNoteEvents *bool `json:"confidential_note_events,omitempty"`

	// IssuesEvents Trigger event when an issue is created, updated, or closed.
	IssuesEvents *bool `json:"issues_events,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// NoteEvents Trigger event for new comments.
	NoteEvents *bool `json:"note_events,omitempty"`

	// NotifyOnlyBrokenPipelines Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines *bool `json:"notify_only_broken_pipelines,omitempty"`

	// PipelineEvents Trigger event when a pipeline status changes.
	PipelineEvents *bool `json:"pipeline_events,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// Webhook The Pumble webhook (for example, `https://api.pumble.com/workspaces/x/...`).
	Webhook string `json:"webhook"`

	// WikiPageEvents Trigger event when a wiki page is created or updated.
	WikiPageEvents *bool `json:"wiki_page_events,omitempty"`
}
type PutApiV4GroupsIdIntegrationsPushoverJSONBody struct {
	// ApiKey The application key.
	ApiKey string `json:"api_key"`

	// Device Leave blank for all active devices.
	Device *string `json:"device,omitempty"`

	// Priority The priority.
	Priority string `json:"priority"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// Sound The sound of the notification.
	Sound *string `json:"sound,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// UserKey The user key.
	UserKey string `json:"user_key"`
}
type PutApiV4GroupsIdIntegrationsRedmineJSONBody struct {
	// IssuesUrl URL of the issue.
	IssuesUrl string `json:"issues_url"`

	// NewIssueUrl URL of the new issue.
	NewIssueUrl string `json:"new_issue_url"`

	// ProjectUrl URL of the project.
	ProjectUrl string `json:"project_url"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsSlackJSONBody struct {
	// AlertChannel The name of the channel to receive alert_events notifications
	AlertChannel *string `json:"alert_channel,omitempty"`

	// AlertEvents Trigger event when a new, unique alert is recorded.
	AlertEvents *bool `json:"alert_events,omitempty"`

	// BranchesToBeNotified Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.
	BranchesToBeNotified *string `json:"branches_to_be_notified,omitempty"`

	// Channel Default channel to use if no other channel is configured.
	Channel *string `json:"channel,omitempty"`

	// ConfidentialIssueChannel The name of the channel to receive confidential_issues_events notifications
	ConfidentialIssueChannel *string `json:"confidential_issue_channel,omitempty"`

	// ConfidentialIssuesEvents Trigger event when a confidential issue is created, updated, or closed.
	ConfidentialIssuesEvents *bool `json:"confidential_issues_events,omitempty"`

	// ConfidentialNoteChannel The name of the channel to receive confidential_note_events notifications
	ConfidentialNoteChannel *string `json:"confidential_note_channel,omitempty"`

	// ConfidentialNoteEvents Trigger event for new comments on confidential issues.
	ConfidentialNoteEvents *bool `json:"confidential_note_events,omitempty"`

	// DeploymentChannel The name of the channel to receive deployment_events notifications
	DeploymentChannel *string `json:"deployment_channel,omitempty"`

	// DeploymentEvents Trigger event when a deployment starts or finishes.
	DeploymentEvents *bool `json:"deployment_events,omitempty"`

	// IncidentChannel The name of the channel to receive incident_events notifications
	IncidentChannel *string `json:"incident_channel,omitempty"`

	// IncidentEvents Trigger event when an incident is created.
	IncidentEvents *bool `json:"incident_events,omitempty"`

	// IssueChannel The name of the channel to receive issues_events notifications
	IssueChannel *string `json:"issue_channel,omitempty"`

	// IssuesEvents Trigger event when an issue is created, updated, or closed.
	IssuesEvents *bool `json:"issues_events,omitempty"`

	// LabelsToBeNotified Labels to send notifications for. Leave blank to receive notifications for all events.
	LabelsToBeNotified *string `json:"labels_to_be_notified,omitempty"`

	// LabelsToBeNotifiedBehavior Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`.
	LabelsToBeNotifiedBehavior *string `json:"labels_to_be_notified_behavior,omitempty"`

	// MergeRequestChannel The name of the channel to receive merge_requests_events notifications
	MergeRequestChannel *string `json:"merge_request_channel,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// NoteChannel The name of the channel to receive note_events notifications
	NoteChannel *string `json:"note_channel,omitempty"`

	// NoteEvents Trigger event for new comments.
	NoteEvents *bool `json:"note_events,omitempty"`

	// NotifyOnlyBrokenPipelines Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines *bool `json:"notify_only_broken_pipelines,omitempty"`

	// PipelineChannel The name of the channel to receive pipeline_events notifications
	PipelineChannel *string `json:"pipeline_channel,omitempty"`

	// PipelineEvents Trigger event when a pipeline status changes.
	PipelineEvents *bool `json:"pipeline_events,omitempty"`

	// PushChannel The name of the channel to receive push_events notifications
	PushChannel *string `json:"push_channel,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// TagPushChannel The name of the channel to receive tag_push_events notifications
	TagPushChannel *string `json:"tag_push_channel,omitempty"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// Username Slack notifications username.
	Username *string `json:"username,omitempty"`

	// VulnerabilityChannel The name of the channel to receive vulnerability_events notifications
	VulnerabilityChannel *string `json:"vulnerability_channel,omitempty"`
	VulnerabilityEvents  *bool   `json:"vulnerability_events,omitempty"`

	// Webhook Slack notifications webhook (for example, `https://hooks.slack.com/services/...`).
	Webhook string `json:"webhook"`

	// WikiPageChannel The name of the channel to receive wiki_page_events notifications
	WikiPageChannel *string `json:"wiki_page_channel,omitempty"`

	// WikiPageEvents Trigger event when a wiki page is created or updated.
	WikiPageEvents *bool `json:"wiki_page_events,omitempty"`
}
type PutApiV4GroupsIdIntegrationsSlackSlashCommandsJSONBody struct {
	// Token The Slack token.
	Token string `json:"token"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsSquashTmJSONBody struct {
	// ConfidentialIssuesEvents Trigger event when a confidential issue is created, updated, or closed.
	ConfidentialIssuesEvents *bool `json:"confidential_issues_events,omitempty"`

	// IssuesEvents Trigger event when an issue is created, updated, or closed.
	IssuesEvents *bool `json:"issues_events,omitempty"`

	// Token Secret token.
	Token *string `json:"token,omitempty"`

	// Url URL of the Squash TM webhook.
	Url string `json:"url"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsTeamcityJSONBody struct {
	// BuildType The build configuration ID of the TeamCity project.
	BuildType string `json:"build_type"`

	// EnableSslVerification Enable SSL verification. Defaults to `true` (enabled).
	EnableSslVerification *bool `json:"enable_ssl_verification,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// Password The password of the user.
	Password string `json:"password"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// TeamcityUrl TeamCity root URL (for example, `https://teamcity.example.com`).
	TeamcityUrl string `json:"teamcity_url"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// Username A user with permissions to trigger a manual build.
	Username string `json:"username"`
}
type PutApiV4GroupsIdIntegrationsTelegramJSONBody struct {
	// BranchesToBeNotified Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.
	BranchesToBeNotified *string `json:"branches_to_be_notified,omitempty"`

	// ConfidentialIssuesEvents Trigger event when a confidential issue is created, updated, or closed.
	ConfidentialIssuesEvents *bool `json:"confidential_issues_events,omitempty"`

	// ConfidentialNoteEvents Trigger event for new comments on confidential issues.
	ConfidentialNoteEvents *bool `json:"confidential_note_events,omitempty"`

	// Hostname Custom hostname of the Telegram API. The default value is `https://api.telegram.org`.
	Hostname *string `json:"hostname,omitempty"`

	// IncidentEvents Trigger event when an incident is created.
	IncidentEvents *bool `json:"incident_events,omitempty"`

	// IssuesEvents Trigger event when an issue is created, updated, or closed.
	IssuesEvents *bool `json:"issues_events,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// NoteEvents Trigger event for new comments.
	NoteEvents *bool `json:"note_events,omitempty"`

	// NotifyOnlyBrokenPipelines Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines *bool `json:"notify_only_broken_pipelines,omitempty"`

	// PipelineEvents Trigger event when a pipeline status changes.
	PipelineEvents *bool `json:"pipeline_events,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// Room Unique identifier for the target chat or the username of the target channel (in the format `@channelusername`).
	Room string `json:"room"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// Thread Unique identifier for the target message thread (topic in a forum supergroup).
	Thread *string `json:"thread,omitempty"`

	// Token The Telegram bot token (for example, `123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11`).
	Token string `json:"token"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
	VulnerabilityEvents  *bool `json:"vulnerability_events,omitempty"`

	// WikiPageEvents Trigger event when a wiki page is created or updated.
	WikiPageEvents *bool `json:"wiki_page_events,omitempty"`
}
type PutApiV4GroupsIdIntegrationsUnifyCircuitJSONBody struct {
	// BranchesToBeNotified Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.
	BranchesToBeNotified *string `json:"branches_to_be_notified,omitempty"`

	// ConfidentialIssuesEvents Trigger event when a confidential issue is created, updated, or closed.
	ConfidentialIssuesEvents *bool `json:"confidential_issues_events,omitempty"`

	// ConfidentialNoteEvents Trigger event for new comments on confidential issues.
	ConfidentialNoteEvents *bool `json:"confidential_note_events,omitempty"`

	// IssuesEvents Trigger event when an issue is created, updated, or closed.
	IssuesEvents *bool `json:"issues_events,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// NoteEvents Trigger event for new comments.
	NoteEvents *bool `json:"note_events,omitempty"`

	// NotifyOnlyBrokenPipelines Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines *bool `json:"notify_only_broken_pipelines,omitempty"`

	// PipelineEvents Trigger event when a pipeline status changes.
	PipelineEvents *bool `json:"pipeline_events,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// Webhook The Unify Circuit webhook (for example, `https://circuit.com/rest/v2/webhooks/incoming/...`).
	Webhook string `json:"webhook"`

	// WikiPageEvents Trigger event when a wiki page is created or updated.
	WikiPageEvents *bool `json:"wiki_page_events,omitempty"`
}
type PutApiV4GroupsIdIntegrationsWebexTeamsJSONBody struct {
	// BranchesToBeNotified Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.
	BranchesToBeNotified *string `json:"branches_to_be_notified,omitempty"`

	// ConfidentialIssuesEvents Trigger event when a confidential issue is created, updated, or closed.
	ConfidentialIssuesEvents *bool `json:"confidential_issues_events,omitempty"`

	// ConfidentialNoteEvents Trigger event for new comments on confidential issues.
	ConfidentialNoteEvents *bool `json:"confidential_note_events,omitempty"`

	// IssuesEvents Trigger event when an issue is created, updated, or closed.
	IssuesEvents *bool `json:"issues_events,omitempty"`

	// MergeRequestsEvents Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents *bool `json:"merge_requests_events,omitempty"`

	// NoteEvents Trigger event for new comments.
	NoteEvents *bool `json:"note_events,omitempty"`

	// NotifyOnlyBrokenPipelines Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines *bool `json:"notify_only_broken_pipelines,omitempty"`

	// PipelineEvents Trigger event when a pipeline status changes.
	PipelineEvents *bool `json:"pipeline_events,omitempty"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// TagPushEvents Trigger event for new tags pushed to the repository.
	TagPushEvents *bool `json:"tag_push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`

	// Webhook The Webex Teams webhook. For example, https://api.ciscospark.com/v1/webhooks/incoming/...
	Webhook string `json:"webhook"`

	// WikiPageEvents Trigger event when a wiki page is created or updated.
	WikiPageEvents *bool `json:"wiki_page_events,omitempty"`
}
type PutApiV4GroupsIdIntegrationsYoutrackJSONBody struct {
	// IssuesUrl URL of the issue.
	IssuesUrl string `json:"issues_url"`

	// ProjectUrl URL of the project.
	ProjectUrl string `json:"project_url"`

	// PushEvents Trigger event for pushes to the repository.
	PushEvents *bool `json:"push_events,omitempty"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool `json:"use_inherited_settings,omitempty"`
}
type PutApiV4GroupsIdIntegrationsZentaoJSONBody struct {
	ApiToken string `json:"api_token"`

	// ApiUrl If different from Web URL.
	ApiUrl *string `json:"api_url,omitempty"`

	// Url Base URL of the ZenTao instance.
	Url string `json:"url"`

	// UseInheritedSettings Indicates whether to inherit the default settings. Defaults to `false`.
	UseInheritedSettings *bool  `json:"use_inherited_settings,omitempty"`
	ZentaoProductXid     string `json:"zentao_product_xid"`
}
type DeleteApiV4GroupsIdIntegrationsSlugParamsSlug string
type GetApiV4GroupsIdIntegrationsSlugParamsSlug string
type GetApiV4GroupsIdInvitationsParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Query A query string to search for members
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}
type PostApiV4GroupsIdInvitationsJSONBody struct {
	// AccessLevel A valid access level (defaults: `30`, developer access level)
	AccessLevel PostApiV4GroupsIdInvitationsJSONBodyAccessLevel `json:"access_level"`

	// Email The email address to invite, or multiple emails separated by comma
	Email *[]string `json:"email,omitempty"`

	// ExpiresAt Date string in the format YEAR-MONTH-DAY
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// InviteSource Source that triggered the member creation process
	InviteSource *string `json:"invite_source,omitempty"`

	// MemberRoleId The ID of a member role for the invited user
	MemberRoleId *int32 `json:"member_role_id,omitempty"`

	// UserId The user ID of the new member or multiple IDs separated by commas.
	UserId *[]string `json:"user_id,omitempty"`
}
type PostApiV4GroupsIdInvitationsJSONBodyAccessLevel int32
type PutApiV4GroupsIdInvitationsEmailJSONBody struct {
	// AccessLevel A valid access level (defaults: `30`, developer access level)
	AccessLevel *PutApiV4GroupsIdInvitationsEmailJSONBodyAccessLevel `json:"access_level,omitempty"`

	// ExpiresAt Date string in ISO 8601 format (`YYYY-MM-DDTHH:MM:SSZ`)
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// MemberRoleId The ID of a member role for the invited user
	MemberRoleId *int32 `json:"member_role_id,omitempty"`
}
type PutApiV4GroupsIdInvitationsEmailJSONBodyAccessLevel int32
type GetApiV4GroupsIdInvitedGroupsParams struct {
	// Relation Include group relations
	Relation *[]GetApiV4GroupsIdInvitedGroupsParamsRelation `form:"relation,omitempty" json:"relation,omitempty"`

	// Search Search for a specific group
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// MinAccessLevel Minimum access level of authenticated user
	MinAccessLevel *GetApiV4GroupsIdInvitedGroupsParamsMinAccessLevel `form:"min_access_level,omitempty" json:"min_access_level,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// WithCustomAttributes Include custom attributes in the response
	WithCustomAttributes *bool `form:"with_custom_attributes,omitempty" json:"with_custom_attributes,omitempty"`
}
type GetApiV4GroupsIdInvitedGroupsParamsRelation string
type GetApiV4GroupsIdInvitedGroupsParamsMinAccessLevel int32
type GetApiV4GroupsIdIssuesParams struct {
	// AssigneeId Return issues assigned to the given user
	AssigneeId *int `form:"assignee_id,omitempty" json:"assignee_id,omitempty"`

	// AssigneeUsername Return issues assigned to the given
	AssigneeUsername *[]string `form:"assignee_username,omitempty" json:"assignee_username,omitempty"`

	// AuthorId Return issues created by the given user
	AuthorId *int `form:"author_id,omitempty" json:"author_id,omitempty"`

	// AuthorUsername Return issues created by the given
	AuthorUsername *string `form:"author_username,omitempty" json:"author_username,omitempty"`

	// Confidential Filter confidential or public issues.
	Confidential *bool `form:"confidential,omitempty" json:"confidential,omitempty"`

	// CreatedAfter Return issues created on or after the given time. Expected in ISO 8601 format (
	CreatedAfter *string `form:"created_after,omitempty" json:"created_after,omitempty"`

	// CreatedBefore Return issues created on or before the given time. Expected in ISO 8601 format (
	CreatedBefore *string `form:"created_before,omitempty" json:"created_before,omitempty"`

	// DueDate Return issues that have no due date, are overdue, or whose due date is this week, this month, or between two weeks ago and next month. Accepts:
	DueDate *string `form:"due_date,omitempty" json:"due_date,omitempty"`

	// EpicId Return issues associated with the given epic ID.
	EpicId *int `form:"epic_id,omitempty" json:"epic_id,omitempty"`

	// Iids Return only the issues having the given
	Iids *[]int `form:"iids[],omitempty" json:"iids[],omitempty"`

	// IssueType Filter to a given type of issue. One of
	IssueType *string `form:"issue_type,omitempty" json:"issue_type,omitempty"`

	// IterationId Return issues assigned to the given iteration ID.
	IterationId *int `form:"iteration_id,omitempty" json:"iteration_id,omitempty"`

	// IterationTitle Return issues assigned to the iteration with the given title. Similar to
	IterationTitle *string `form:"iteration_title,omitempty" json:"iteration_title,omitempty"`

	// Labels Comma-separated list of label names, issues must have all labels to be returned.
	Labels *string `form:"labels,omitempty" json:"labels,omitempty"`

	// Milestone The milestone title.
	Milestone *string `form:"milestone,omitempty" json:"milestone,omitempty"`

	// MyReactionEmoji Return issues reacted by the authenticated user by the given
	MyReactionEmoji *string `form:"my_reaction_emoji,omitempty" json:"my_reaction_emoji,omitempty"`

	// NonArchived Return issues from non archived projects. Default is true.
	NonArchived *bool `form:"non_archived,omitempty" json:"non_archived,omitempty"`

	// Not Return issues that do not match the parameters supplied. Accepts:
	Not *string `form:"not,omitempty" json:"not,omitempty"`

	// OrderBy Return issues ordered by
	OrderBy *string `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Scope Return issues for the given scope:
	Scope *string `form:"scope,omitempty" json:"scope,omitempty"`

	// Search Search group issues against their
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Sort Return issues sorted in
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// State Return all issues or just those that are
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// UpdatedAfter Return issues updated on or after the given time. Expected in ISO 8601 format (
	UpdatedAfter *string `form:"updated_after,omitempty" json:"updated_after,omitempty"`

	// UpdatedBefore Return issues updated on or before the given time. Expected in ISO 8601 format (
	UpdatedBefore *string `form:"updated_before,omitempty" json:"updated_before,omitempty"`

	// Weight Return issues with the specified
	Weight *int `form:"weight,omitempty" json:"weight,omitempty"`

	// WithLabelsDetails If
	WithLabelsDetails *bool `form:"with_labels_details,omitempty" json:"with_labels_details,omitempty"`
}
type GetApiV4GroupsIdMembersParams struct {
	// Query A query string to search for members
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// UserIds Array of user ids to look up for membership
	UserIds *[]int32 `form:"user_ids,omitempty" json:"user_ids,omitempty"`

	// SkipUsers Array of user ids to be skipped for membership
	SkipUsers *[]int32 `form:"skip_users,omitempty" json:"skip_users,omitempty"`

	// ShowSeatInfo Show seat information for members
	ShowSeatInfo *bool `form:"show_seat_info,omitempty" json:"show_seat_info,omitempty"`

	// WithSamlIdentity List only members with linked SAML identity
	WithSamlIdentity *bool `form:"with_saml_identity,omitempty" json:"with_saml_identity,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type PostApiV4GroupsIdMembersJSONBody struct {
	// AccessLevel A valid access level.
	AccessLevel int32 `json:"access_level"`

	// ExpiresAt Date string in the format YEAR-MONTH-DAY
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// InviteSource Source that triggered the member creation process
	InviteSource *string `json:"invite_source,omitempty"`

	// UserId The user ID of the new member or multiple IDs separated by commas.
	UserId *int32 `json:"user_id,omitempty"`

	// Username The username of the new member or multiple usernames separated by commas.
	Username *string `json:"username,omitempty"`
}
type GetApiV4GroupsIdMembersAllParams struct {
	// Query A query string to search for members
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// UserIds Array of user ids to look up for membership
	UserIds *[]int32 `form:"user_ids,omitempty" json:"user_ids,omitempty"`

	// ShowSeatInfo Show seat information for members
	ShowSeatInfo *bool `form:"show_seat_info,omitempty" json:"show_seat_info,omitempty"`

	// State Filter results by member state
	State *GetApiV4GroupsIdMembersAllParamsState `form:"state,omitempty" json:"state,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type GetApiV4GroupsIdMembersAllParamsState string
type DeleteApiV4GroupsIdMembersUserIdParams struct {
	// SkipSubresources Flag indicating if the deletion of direct memberships of the removed member in subgroups and projects should be skipped
	SkipSubresources *bool `form:"skip_subresources,omitempty" json:"skip_subresources,omitempty"`

	// UnassignIssuables Flag indicating if the removed member should be unassigned from any issues or merge requests within given group or project
	UnassignIssuables *bool `form:"unassign_issuables,omitempty" json:"unassign_issuables,omitempty"`
}
type PutApiV4GroupsIdMembersUserIdJSONBody struct {
	// AccessLevel A valid access level
	AccessLevel int32 `json:"access_level"`

	// ExpiresAt Date string in the format YEAR-MONTH-DAY
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// MemberRoleId The ID of the Member Role to be updated
	MemberRoleId *int32 `json:"member_role_id,omitempty"`
}
type PutApiV4GroupsIdMembersUserIdStateJSONBody struct {
	// State The new state for the memberships of the user
	State PutApiV4GroupsIdMembersUserIdStateJSONBodyState `json:"state"`
}
type PutApiV4GroupsIdMembersUserIdStateJSONBodyState string
type GetApiV4GroupsIdMergeRequestsParams struct {
	// AuthorId Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.
	AuthorId *int32 `form:"author_id,omitempty" json:"author_id,omitempty"`

	// AuthorUsername Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.
	AuthorUsername *string `form:"author_username,omitempty" json:"author_username,omitempty"`

	// AssigneeId Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.
	AssigneeId *int32 `form:"assignee_id,omitempty" json:"assignee_id,omitempty"`

	// AssigneeUsername Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.
	AssigneeUsername *[]string `form:"assignee_username,omitempty" json:"assignee_username,omitempty"`

	// ReviewerUsername Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.
	ReviewerUsername *string `form:"reviewer_username,omitempty" json:"reviewer_username,omitempty"`

	// Labels Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.
	Labels *[]string `form:"labels,omitempty" json:"labels,omitempty"`

	// Milestone Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
	Milestone *string `form:"milestone,omitempty" json:"milestone,omitempty"`

	// MyReactionEmoji Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
	MyReactionEmoji *string `form:"my_reaction_emoji,omitempty" json:"my_reaction_emoji,omitempty"`

	// ReviewerId Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.
	ReviewerId *int32 `form:"reviewer_id,omitempty" json:"reviewer_id,omitempty"`

	// State Returns `all` merge requests or just those that are `opened`, `closed`, `locked`, or `merged`.
	State *GetApiV4GroupsIdMergeRequestsParamsState `form:"state,omitempty" json:"state,omitempty"`

	// OrderBy Returns merge requests ordered by `created_at`, `label_priority`, `milestone_due`, `popularity`, `priority`, `title`, `updated_at` or `merged_at` fields. Introduced in GitLab 14.8.
	OrderBy *GetApiV4GroupsIdMergeRequestsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Sort Returns merge requests sorted in `asc` or `desc` order.
	Sort *GetApiV4GroupsIdMergeRequestsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// WithLabelsDetails If `true`, response returns more details for each label in labels field: `:name`,`:color`, `:description`, `:description_html`, `:text_color`
	WithLabelsDetails *bool `form:"with_labels_details,omitempty" json:"with_labels_details,omitempty"`

	// WithMergeStatusRecheck If `true`, this projection requests (but does not guarantee) that the `merge_status` field be recalculated asynchronously. Introduced in GitLab 13.0.
	WithMergeStatusRecheck *bool `form:"with_merge_status_recheck,omitempty" json:"with_merge_status_recheck,omitempty"`

	// CreatedAfter Returns merge requests created on or after the given time. Expected in ISO 8601 format.
	CreatedAfter *time.Time `form:"created_after,omitempty" json:"created_after,omitempty"`

	// CreatedBefore Returns merge requests created on or before the given time. Expected in ISO 8601 format.
	CreatedBefore *time.Time `form:"created_before,omitempty" json:"created_before,omitempty"`

	// UpdatedAfter Returns merge requests updated on or after the given time. Expected in ISO 8601 format.
	UpdatedAfter *time.Time `form:"updated_after,omitempty" json:"updated_after,omitempty"`

	// UpdatedBefore Returns merge requests updated on or before the given time. Expected in ISO 8601 format.
	UpdatedBefore *time.Time `form:"updated_before,omitempty" json:"updated_before,omitempty"`

	// View If simple, returns the `iid`, URL, title, description, and basic state of merge request
	View *GetApiV4GroupsIdMergeRequestsParamsView `form:"view,omitempty" json:"view,omitempty"`

	// Scope Returns merge requests for the given scope: `created_by_me`, `assigned_to_me` or `all`
	Scope *GetApiV4GroupsIdMergeRequestsParamsScope `form:"scope,omitempty" json:"scope,omitempty"`

	// SourceBranch Returns merge requests with the given source branch
	SourceBranch *string `form:"source_branch,omitempty" json:"source_branch,omitempty"`

	// SourceProjectId Returns merge requests with the given source project id
	SourceProjectId *int32 `form:"source_project_id,omitempty" json:"source_project_id,omitempty"`

	// TargetBranch Returns merge requests with the given target branch
	TargetBranch *string `form:"target_branch,omitempty" json:"target_branch,omitempty"`

	// Search Search merge requests against their `title` and `description`.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// In Modify the scope of the search attribute. `title`, `description`, or a string joining them with comma.
	In *string `form:"in,omitempty" json:"in,omitempty"`

	// Wip Filter merge requests against their `wip` status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.
	Wip *GetApiV4GroupsIdMergeRequestsParamsWip `form:"wip,omitempty" json:"wip,omitempty"`

	// NotAuthorId `<Negated>` Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.
	NotAuthorId *int32 `form:"not[author_id],omitempty" json:"not[author_id],omitempty"`

	// NotAuthorUsername `<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.
	NotAuthorUsername *string `form:"not[author_username],omitempty" json:"not[author_username],omitempty"`

	// NotAssigneeId `<Negated>` Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.
	NotAssigneeId *int32 `form:"not[assignee_id],omitempty" json:"not[assignee_id],omitempty"`

	// NotAssigneeUsername `<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.
	NotAssigneeUsername *[]string `form:"not[assignee_username],omitempty" json:"not[assignee_username],omitempty"`

	// NotReviewerUsername `<Negated>` Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.
	NotReviewerUsername *string `form:"not[reviewer_username],omitempty" json:"not[reviewer_username],omitempty"`

	// NotLabels `<Negated>` Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.
	NotLabels *[]string `form:"not[labels],omitempty" json:"not[labels],omitempty"`

	// NotMilestone `<Negated>` Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.
	NotMilestone *string `form:"not[milestone],omitempty" json:"not[milestone],omitempty"`

	// NotMyReactionEmoji `<Negated>` Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.
	NotMyReactionEmoji *string `form:"not[my_reaction_emoji],omitempty" json:"not[my_reaction_emoji],omitempty"`

	// NotReviewerId `<Negated>` Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.
	NotReviewerId *int32 `form:"not[reviewer_id],omitempty" json:"not[reviewer_id],omitempty"`

	// DeployedBefore Returns merge requests deployed before the given date/time. Expected in ISO 8601 format.
	DeployedBefore *string `form:"deployed_before,omitempty" json:"deployed_before,omitempty"`

	// DeployedAfter Returns merge requests deployed after the given date/time. Expected in ISO 8601 format
	DeployedAfter *string `form:"deployed_after,omitempty" json:"deployed_after,omitempty"`

	// Environment Returns merge requests deployed to the given environment
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`

	// Approved Filters merge requests by their `approved` status. `yes` returns only approved merge requests. `no` returns only non-approved merge requests.
	Approved *GetApiV4GroupsIdMergeRequestsParamsApproved `form:"approved,omitempty" json:"approved,omitempty"`

	// MergeUserId Returns merge requests which have been merged by the user with the given user `id`. Mutually exclusive with `merge_user_username`.
	MergeUserId *int32 `form:"merge_user_id,omitempty" json:"merge_user_id,omitempty"`

	// MergeUserUsername Returns merge requests which have been merged by the user with the given `username`. Mutually exclusive with `merge_user_id`.
	MergeUserUsername *string `form:"merge_user_username,omitempty" json:"merge_user_username,omitempty"`

	// ApproverIds Return merge requests which have specified the users with the given IDs as an individual approver
	ApproverIds *string `form:"approver_ids,omitempty" json:"approver_ids,omitempty"`

	// ApprovedByIds Return merge requests which have been approved by the specified users with the given IDs
	ApprovedByIds *string `form:"approved_by_ids,omitempty" json:"approved_by_ids,omitempty"`

	// ApprovedByUsernames Return merge requests which have been approved by the specified users with the given
	//
	//
	//             usernames
	ApprovedByUsernames *string `form:"approved_by_usernames,omitempty" json:"approved_by_usernames,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// NonArchived Returns merge requests from non archived projects only.
	NonArchived *bool `form:"non_archived,omitempty" json:"non_archived,omitempty"`
}
type GetApiV4GroupsIdMergeRequestsParamsState string
type GetApiV4GroupsIdMergeRequestsParamsOrderBy string
type GetApiV4GroupsIdMergeRequestsParamsSort string
type GetApiV4GroupsIdMergeRequestsParamsView string
type GetApiV4GroupsIdMergeRequestsParamsScope string
type GetApiV4GroupsIdMergeRequestsParamsWip string
type GetApiV4GroupsIdMergeRequestsParamsApproved string
type GetApiV4GroupsIdPackagesParams struct {
	// ExcludeSubgroups Determines if subgroups should be excluded
	ExcludeSubgroups *bool `form:"exclude_subgroups,omitempty" json:"exclude_subgroups,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// OrderBy Return packages ordered by `created_at`, `name`, `version` or `type` fields.
	OrderBy *GetApiV4GroupsIdPackagesParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Sort Return packages sorted in `asc` or `desc` order.
	Sort *GetApiV4GroupsIdPackagesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// PackageType Return packages of a certain type
	PackageType *GetApiV4GroupsIdPackagesParamsPackageType `form:"package_type,omitempty" json:"package_type,omitempty"`

	// PackageName Return packages with this name
	PackageName *string `form:"package_name,omitempty" json:"package_name,omitempty"`

	// PackageVersion Return packages with this version
	PackageVersion *string `form:"package_version,omitempty" json:"package_version,omitempty"`

	// IncludeVersionless Returns packages without a version
	IncludeVersionless *bool `form:"include_versionless,omitempty" json:"include_versionless,omitempty"`

	// Status Return packages with specified status
	Status *GetApiV4GroupsIdPackagesParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}
type GetApiV4GroupsIdPackagesParamsOrderBy string
type GetApiV4GroupsIdPackagesParamsSort string
type GetApiV4GroupsIdPackagesParamsPackageType string
type GetApiV4GroupsIdPackagesParamsStatus string
type GetApiV4GroupsIdPendingMembersParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type PostApiV4GroupsIdPlaceholderReassignmentsJSONBody struct {
	// File The CSV file containing the reassignments
	File string `json:"file"`
}
type GetApiV4GroupsIdProjectsParams struct {
	// Archived Limit by archived status
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`

	// Visibility Limit by visibility
	Visibility *GetApiV4GroupsIdProjectsParamsVisibility `form:"visibility,omitempty" json:"visibility,omitempty"`

	// Search Return list of authorized projects matching the search criteria
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// OrderBy Return projects ordered by field
	OrderBy *GetApiV4GroupsIdProjectsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Sort Return projects sorted in ascending and descending order
	Sort *GetApiV4GroupsIdProjectsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Simple Return only the ID, URL, name, and path of each project
	Simple *bool `form:"simple,omitempty" json:"simple,omitempty"`

	// Owned Limit by owned by authenticated user
	Owned *bool `form:"owned,omitempty" json:"owned,omitempty"`

	// Starred Limit by starred status
	Starred *bool `form:"starred,omitempty" json:"starred,omitempty"`

	// WithIssuesEnabled Limit by enabled issues feature
	WithIssuesEnabled *bool `form:"with_issues_enabled,omitempty" json:"with_issues_enabled,omitempty"`

	// WithMergeRequestsEnabled Limit by enabled merge requests feature
	WithMergeRequestsEnabled *bool `form:"with_merge_requests_enabled,omitempty" json:"with_merge_requests_enabled,omitempty"`

	// WithShared Include projects shared to this group
	WithShared *bool `form:"with_shared,omitempty" json:"with_shared,omitempty"`

	// IncludeSubgroups Includes projects in subgroups of this group
	IncludeSubgroups *bool `form:"include_subgroups,omitempty" json:"include_subgroups,omitempty"`

	// IncludeAncestorGroups Includes projects in ancestors of this group
	IncludeAncestorGroups *bool `form:"include_ancestor_groups,omitempty" json:"include_ancestor_groups,omitempty"`

	// MinAccessLevel Limit by minimum access level of authenticated user on projects
	MinAccessLevel *GetApiV4GroupsIdProjectsParamsMinAccessLevel `form:"min_access_level,omitempty" json:"min_access_level,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// WithCustomAttributes Include custom attributes in the response
	WithCustomAttributes *bool `form:"with_custom_attributes,omitempty" json:"with_custom_attributes,omitempty"`

	// WithSecurityReports Return only projects having security report artifacts present
	WithSecurityReports *bool `form:"with_security_reports,omitempty" json:"with_security_reports,omitempty"`
}
type GetApiV4GroupsIdProjectsParamsVisibility string
type GetApiV4GroupsIdProjectsParamsOrderBy string
type GetApiV4GroupsIdProjectsParamsSort string
type GetApiV4GroupsIdProjectsParamsMinAccessLevel int32
type GetApiV4GroupsIdProjectsSharedParams struct {
	// Archived Limit by archived status
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`

	// Visibility Limit by visibility
	Visibility *GetApiV4GroupsIdProjectsSharedParamsVisibility `form:"visibility,omitempty" json:"visibility,omitempty"`

	// Search Return list of authorized projects matching the search criteria
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// OrderBy Return projects ordered by field
	OrderBy *GetApiV4GroupsIdProjectsSharedParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Sort Return projects sorted in ascending and descending order
	Sort *GetApiV4GroupsIdProjectsSharedParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Simple Return only the ID, URL, name, and path of each project
	Simple *bool `form:"simple,omitempty" json:"simple,omitempty"`

	// Starred Limit by starred status
	Starred *bool `form:"starred,omitempty" json:"starred,omitempty"`

	// WithIssuesEnabled Limit by enabled issues feature
	WithIssuesEnabled *bool `form:"with_issues_enabled,omitempty" json:"with_issues_enabled,omitempty"`

	// WithMergeRequestsEnabled Limit by enabled merge requests feature
	WithMergeRequestsEnabled *bool `form:"with_merge_requests_enabled,omitempty" json:"with_merge_requests_enabled,omitempty"`

	// MinAccessLevel Limit by minimum access level of authenticated user on projects
	MinAccessLevel *GetApiV4GroupsIdProjectsSharedParamsMinAccessLevel `form:"min_access_level,omitempty" json:"min_access_level,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// WithCustomAttributes Include custom attributes in the response
	WithCustomAttributes *bool `form:"with_custom_attributes,omitempty" json:"with_custom_attributes,omitempty"`
}
type GetApiV4GroupsIdProjectsSharedParamsVisibility string
type GetApiV4GroupsIdProjectsSharedParamsOrderBy string
type GetApiV4GroupsIdProjectsSharedParamsSort string
type GetApiV4GroupsIdProjectsSharedParamsMinAccessLevel int32
type GetApiV4GroupsIdProvisionedUsersParams struct {
	// Username Return a single user with a specific username
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Search Search users by name, email or username
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Active Return only active users
	Active *bool `form:"active,omitempty" json:"active,omitempty"`

	// Blocked Return only blocked users
	Blocked *bool `form:"blocked,omitempty" json:"blocked,omitempty"`

	// CreatedAfter Return users created after the specified time
	CreatedAfter *time.Time `form:"created_after,omitempty" json:"created_after,omitempty"`

	// CreatedBefore Return users created before the specified time
	CreatedBefore *time.Time `form:"created_before,omitempty" json:"created_before,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type GetApiV4GroupsIdRegistryRepositoriesParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type GetApiV4GroupsIdReleasesParams struct {
	// Sort The direction of the order. Either `desc` (default) for descending order or `asc` for ascending order
	Sort *GetApiV4GroupsIdReleasesParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Simple Return only limited fields for each release
	Simple *bool `form:"simple,omitempty" json:"simple,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type GetApiV4GroupsIdReleasesParamsSort string
type GetApiV4GroupsIdRunnersParams struct {
	// Type The type of runners to return
	Type *GetApiV4GroupsIdRunnersParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Paused Whether to include only runners that are accepting or ignoring new jobs
	Paused *bool `form:"paused,omitempty" json:"paused,omitempty"`

	// Status The status of runners to return
	Status *GetApiV4GroupsIdRunnersParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// TagList A list of runner tags
	TagList *[]string `form:"tag_list,omitempty" json:"tag_list,omitempty"`

	// VersionPrefix The version prefix of runners to return
	VersionPrefix *string `form:"version_prefix,omitempty" json:"version_prefix,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type GetApiV4GroupsIdRunnersParamsType string
type GetApiV4GroupsIdRunnersParamsStatus string
type GetApiV4GroupsIdSamlUsersParams struct {
	// Username Return single user with a specific username.
	Username *string `form:"username,omitempty" json:"username,omitempty"`

	// Search Search users by name, email, username.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Active Return only active users.
	Active *bool `form:"active,omitempty" json:"active,omitempty"`

	// Blocked Return only blocked users.
	Blocked *bool `form:"blocked,omitempty" json:"blocked,omitempty"`

	// CreatedAfter Return users created after the specified time.
	CreatedAfter *time.Time `form:"created_after,omitempty" json:"created_after,omitempty"`

	// CreatedBefore Return users created before the specified time.
	CreatedBefore *time.Time `form:"created_before,omitempty" json:"created_before,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type PostApiV4GroupsIdShareJSONBody struct {
	// ExpiresAt Share expiration date
	ExpiresAt *openapi_types.Date `json:"expires_at,omitempty"`

	// GroupAccess The group access level
	GroupAccess PostApiV4GroupsIdShareJSONBodyGroupAccess `json:"group_access"`

	// GroupId The ID of the group to share
	GroupId int32 `json:"group_id"`

	// MemberRoleId The ID of the Member Role to be assigned to the group
	MemberRoleId *int32 `json:"member_role_id,omitempty"`
}
type PostApiV4GroupsIdShareJSONBodyGroupAccess int32
type GetApiV4GroupsIdSshCertificatesParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type PostApiV4GroupsIdSshCertificatesJSONBody struct {
	// Key The key of the ssh certificate
	Key string `json:"key"`

	// Title The title of the ssh certificate
	Title string `json:"title"`
}
type GetApiV4GroupsIdSubgroupsParams struct {
	// Statistics Include project statistics
	Statistics *bool `form:"statistics,omitempty" json:"statistics,omitempty"`

	// Archived Limit by archived status
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`

	// SkipGroups Array of group ids to exclude from list
	SkipGroups *[]int32 `form:"skip_groups,omitempty" json:"skip_groups,omitempty"`

	// AllAvailable When `true`, returns all accessible groups. When `false`, returns only groups where the user is a member.
	AllAvailable *bool `form:"all_available,omitempty" json:"all_available,omitempty"`

	// Visibility Limit by visibility
	Visibility *GetApiV4GroupsIdSubgroupsParamsVisibility `form:"visibility,omitempty" json:"visibility,omitempty"`

	// Search Search for a specific group
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Owned Limit by owned by authenticated user
	Owned *bool `form:"owned,omitempty" json:"owned,omitempty"`

	// OrderBy Order by name, path, id or similarity if searching
	OrderBy *GetApiV4GroupsIdSubgroupsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`

	// Sort Sort by asc (ascending) or desc (descending)
	Sort *GetApiV4GroupsIdSubgroupsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// MinAccessLevel Minimum access level of authenticated user
	MinAccessLevel *GetApiV4GroupsIdSubgroupsParamsMinAccessLevel `form:"min_access_level,omitempty" json:"min_access_level,omitempty"`

	// TopLevelOnly Only include top-level groups
	TopLevelOnly *bool `form:"top_level_only,omitempty" json:"top_level_only,omitempty"`

	// MarkedForDeletionOn Return groups that are marked for deletion on this date
	MarkedForDeletionOn *openapi_types.Date `form:"marked_for_deletion_on,omitempty" json:"marked_for_deletion_on,omitempty"`

	// Active Limit by groups that are not archived and not marked for deletion
	Active *bool `form:"active,omitempty" json:"active,omitempty"`

	// RepositoryStorage Filter by repository storage used by the group
	RepositoryStorage *string `form:"repository_storage,omitempty" json:"repository_storage,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`

	// WithCustomAttributes Include custom attributes in the response
	WithCustomAttributes *bool `form:"with_custom_attributes,omitempty" json:"with_custom_attributes,omitempty"`
}
type GetApiV4GroupsIdSubgroupsParamsVisibility string
type GetApiV4GroupsIdSubgroupsParamsOrderBy string
type GetApiV4GroupsIdSubgroupsParamsSort string
type GetApiV4GroupsIdSubgroupsParamsMinAccessLevel int32
type PostApiV4GroupsIdTokensRevokeJSONBody struct {
	// Token The token to revoke
	Token string `json:"token"`
}
type PostApiV4GroupsIdTransferJSONBody struct {
	// GroupId The ID of the target group to which the group needs to be transferred to.If not provided, the source group will be promoted to a top-level group.
	GroupId *int32 `json:"group_id,omitempty"`
}
type GetApiV4GroupsIdTransferLocationsParams struct {
	// Search Return list of namespaces matching the search criteria
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type GetApiV4GroupsIdUploadsParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type GetApiV4GroupsIdUsersParams struct {
	// Search Search users by name, email or username
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Active Filters only active users
	Active *bool `form:"active,omitempty" json:"active,omitempty"`

	// IncludeSamlUsers Return users with a SAML identity in this group
	IncludeSamlUsers *bool `form:"include_saml_users,omitempty" json:"include_saml_users,omitempty"`

	// IncludeServiceAccounts Return service accounts owned by this group
	IncludeServiceAccounts *bool `form:"include_service_accounts,omitempty" json:"include_service_accounts,omitempty"`

	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type GetApiV4GroupsIdVariablesParams struct {
	// Page Current page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items per page
	PerPage *int32 `form:"per_page,omitempty" json:"per_page,omitempty"`
}
type PostApiV4GroupsIdVariablesJSONBody struct {
	// Description The description of the variable
	Description *string `json:"description,omitempty"`

	// EnvironmentScope The environment scope of the variable
	EnvironmentScope *string `json:"environment_scope,omitempty"`

	// Key The ID of a group or URL-encoded path of the group owned by the
	//         authenticated user
	Key string `json:"key"`

	// Masked Whether the variable is masked
	Masked *string `json:"masked,omitempty"`

	// MaskedAndHidden Whether the variable is masked and hidden
	MaskedAndHidden *string `json:"masked_and_hidden,omitempty"`

	// Protected Whether the variable is protected
	Protected *string `json:"protected,omitempty"`

	// Raw Whether the variable will be expanded
	Raw *string `json:"raw,omitempty"`

	// Value The value of a variable
	Value string `json:"value"`

	// VariableType The type of the variable. Default: env_var
	VariableType *PostApiV4GroupsIdVariablesJSONBodyVariableType `json:"variable_type,omitempty"`
}
type PostApiV4GroupsIdVariablesJSONBodyVariableType string
type PutApiV4GroupsIdVariablesKeyJSONBody struct {
	// Description The description of the variable
	Description *string `json:"description,omitempty"`

	// EnvironmentScope The environment scope of the variable
	EnvironmentScope *string `json:"environment_scope,omitempty"`

	// Masked Whether the variable is masked
	Masked *string `json:"masked,omitempty"`

	// Protected Whether the variable is protected
	Protected *string `json:"protected,omitempty"`

	// Raw Whether the variable will be expanded
	Raw *string `json:"raw,omitempty"`

	// Value The value of a variable
	Value *string `json:"value,omitempty"`

	// VariableType The type of the variable. Default: env_var
	VariableType *PutApiV4GroupsIdVariablesKeyJSONBodyVariableType `json:"variable_type,omitempty"`
}
type PutApiV4GroupsIdVariablesKeyJSONBodyVariableType string
type GetApiV4GroupsIdWikisParams struct {
	// WithContent Include pages' content
	WithContent *bool `form:"with_content,omitempty" json:"with_content,omitempty"`
}
type PostApiV4GroupsIdWikisJSONBody struct {
	// Content Content of a wiki page
	Content string `json:"content"`

	// Format Format of a wiki page. Available formats are markdown, rdoc, asciidoc and org
	Format      *PostApiV4GroupsIdWikisJSONBodyFormat `json:"format,omitempty"`
	FrontMatter *struct {
		// Title Front matter title of a wiki page
		Title *string `json:"title,omitempty"`
	} `json:"front_matter,omitempty"`

	// Title Title of a wiki page
	Title string `json:"title"`
}
type PostApiV4GroupsIdWikisJSONBodyFormat string
type PostApiV4GroupsIdWikisAttachmentsJSONBody struct {
	// Branch The name of the branch
	Branch *string `json:"branch,omitempty"`

	// File The attachment file to be uploaded
	File string `json:"file"`
}
type GetApiV4GroupsIdWikisSlugParams struct {
	// Version The version hash of a wiki page
	Version *string `form:"version,omitempty" json:"version,omitempty"`

	// RenderHtml Render content to HTML
	RenderHtml *bool `form:"render_html,omitempty" json:"render_html,omitempty"`
}
type PutApiV4GroupsIdWikisSlugJSONBody struct {
	// Content Content of a wiki page
	Content *string `json:"content,omitempty"`

	// Format Format of a wiki page. Available formats are markdown, rdoc, asciidoc and org
	Format      *PutApiV4GroupsIdWikisSlugJSONBodyFormat `json:"format,omitempty"`
	FrontMatter *struct {
		// Title Front matter title of a wiki page
		Title *string `json:"title,omitempty"`
	} `json:"front_matter,omitempty"`

	// Title Title of a wiki page
	Title *string `json:"title,omitempty"`
}
type PutApiV4GroupsIdWikisSlugJSONBodyFormat string
type PostApiV4GroupsJSONRequestBody PostApiV4GroupsJSONBody
type PostApiV4GroupsImportMultipartRequestBody PostApiV4GroupsImportMultipartBody
type PutApiV4GroupsIdJSONRequestBody PutApiV4GroupsIdJSONBody
type PostApiV4GroupsIdDebianDistributionsJSONRequestBody PostApiV4GroupsIdDebianDistributionsJSONBody
type PutApiV4GroupsIdDebianDistributionsCodenameJSONRequestBody PutApiV4GroupsIdDebianDistributionsCodenameJSONBody
type PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagJSONRequestBody PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagJSONBody
type PutApiV4GroupsIdAccessRequestsUserIdApproveJSONRequestBody PutApiV4GroupsIdAccessRequestsUserIdApproveJSONBody
type PostApiV4GroupsIdAccessTokensSelfRotateJSONRequestBody PostApiV4GroupsIdAccessTokensSelfRotateJSONBody
type PostApiV4GroupsIdBadgesJSONRequestBody PostApiV4GroupsIdBadgesJSONBody
type PutApiV4GroupsIdBadgesBadgeIdJSONRequestBody PutApiV4GroupsIdBadgesBadgeIdJSONBody
type PostApiV4GroupsIdClustersUserJSONRequestBody PostApiV4GroupsIdClustersUserJSONBody
type PutApiV4GroupsIdClustersClusterIdJSONRequestBody PutApiV4GroupsIdClustersClusterIdJSONBody
type PutApiV4GroupsIdCustomAttributesKeyJSONRequestBody PutApiV4GroupsIdCustomAttributesKeyJSONBody
type PostApiV4GroupsIdDeployTokensJSONRequestBody PostApiV4GroupsIdDeployTokensJSONBody
type PostApiV4GroupsIdEpicsEpicIidAwardEmojiJSONRequestBody PostApiV4GroupsIdEpicsEpicIidAwardEmojiJSONBody
type PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiJSONRequestBody PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiJSONBody
type PostApiV4GroupsIdExportRelationsJSONRequestBody PostApiV4GroupsIdExportRelationsJSONBody
type PutApiV4GroupsIdIntegrationsAppleAppStoreJSONRequestBody PutApiV4GroupsIdIntegrationsAppleAppStoreJSONBody
type PutApiV4GroupsIdIntegrationsAsanaJSONRequestBody PutApiV4GroupsIdIntegrationsAsanaJSONBody
type PutApiV4GroupsIdIntegrationsAssemblaJSONRequestBody PutApiV4GroupsIdIntegrationsAssemblaJSONBody
type PutApiV4GroupsIdIntegrationsBambooJSONRequestBody PutApiV4GroupsIdIntegrationsBambooJSONBody
type PutApiV4GroupsIdIntegrationsBugzillaJSONRequestBody PutApiV4GroupsIdIntegrationsBugzillaJSONBody
type PutApiV4GroupsIdIntegrationsBuildkiteJSONRequestBody PutApiV4GroupsIdIntegrationsBuildkiteJSONBody
type PutApiV4GroupsIdIntegrationsCampfireJSONRequestBody PutApiV4GroupsIdIntegrationsCampfireJSONBody
type PutApiV4GroupsIdIntegrationsClickupJSONRequestBody PutApiV4GroupsIdIntegrationsClickupJSONBody
type PutApiV4GroupsIdIntegrationsConfluenceJSONRequestBody PutApiV4GroupsIdIntegrationsConfluenceJSONBody
type PutApiV4GroupsIdIntegrationsCustomIssueTrackerJSONRequestBody PutApiV4GroupsIdIntegrationsCustomIssueTrackerJSONBody
type PutApiV4GroupsIdIntegrationsDatadogJSONRequestBody PutApiV4GroupsIdIntegrationsDatadogJSONBody
type PutApiV4GroupsIdIntegrationsDiffblueCoverJSONRequestBody PutApiV4GroupsIdIntegrationsDiffblueCoverJSONBody
type PutApiV4GroupsIdIntegrationsDiscordJSONRequestBody PutApiV4GroupsIdIntegrationsDiscordJSONBody
type PutApiV4GroupsIdIntegrationsDroneCiJSONRequestBody PutApiV4GroupsIdIntegrationsDroneCiJSONBody
type PutApiV4GroupsIdIntegrationsEmailsOnPushJSONRequestBody PutApiV4GroupsIdIntegrationsEmailsOnPushJSONBody
type PutApiV4GroupsIdIntegrationsEwmJSONRequestBody PutApiV4GroupsIdIntegrationsEwmJSONBody
type PutApiV4GroupsIdIntegrationsExternalWikiJSONRequestBody PutApiV4GroupsIdIntegrationsExternalWikiJSONBody
type PutApiV4GroupsIdIntegrationsGitGuardianJSONRequestBody PutApiV4GroupsIdIntegrationsGitGuardianJSONBody
type PutApiV4GroupsIdIntegrationsGithubJSONRequestBody PutApiV4GroupsIdIntegrationsGithubJSONBody
type PutApiV4GroupsIdIntegrationsGitlabSlackApplicationJSONRequestBody PutApiV4GroupsIdIntegrationsGitlabSlackApplicationJSONBody
type PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryJSONRequestBody PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryJSONBody
type PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationJSONRequestBody PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationJSONBody
type PutApiV4GroupsIdIntegrationsGooglePlayJSONRequestBody PutApiV4GroupsIdIntegrationsGooglePlayJSONBody
type PutApiV4GroupsIdIntegrationsHangoutsChatJSONRequestBody PutApiV4GroupsIdIntegrationsHangoutsChatJSONBody
type PutApiV4GroupsIdIntegrationsHarborJSONRequestBody PutApiV4GroupsIdIntegrationsHarborJSONBody
type PutApiV4GroupsIdIntegrationsIrkerJSONRequestBody PutApiV4GroupsIdIntegrationsIrkerJSONBody
type PutApiV4GroupsIdIntegrationsJenkinsJSONRequestBody PutApiV4GroupsIdIntegrationsJenkinsJSONBody
type PutApiV4GroupsIdIntegrationsJiraJSONRequestBody PutApiV4GroupsIdIntegrationsJiraJSONBody
type PutApiV4GroupsIdIntegrationsJiraCloudAppJSONRequestBody PutApiV4GroupsIdIntegrationsJiraCloudAppJSONBody
type PutApiV4GroupsIdIntegrationsMatrixJSONRequestBody PutApiV4GroupsIdIntegrationsMatrixJSONBody
type PutApiV4GroupsIdIntegrationsMattermostJSONRequestBody PutApiV4GroupsIdIntegrationsMattermostJSONBody
type PutApiV4GroupsIdIntegrationsMattermostSlashCommandsJSONRequestBody PutApiV4GroupsIdIntegrationsMattermostSlashCommandsJSONBody
type PutApiV4GroupsIdIntegrationsMicrosoftTeamsJSONRequestBody PutApiV4GroupsIdIntegrationsMicrosoftTeamsJSONBody
type PutApiV4GroupsIdIntegrationsMockCiJSONRequestBody PutApiV4GroupsIdIntegrationsMockCiJSONBody
type PutApiV4GroupsIdIntegrationsMockMonitoringJSONRequestBody PutApiV4GroupsIdIntegrationsMockMonitoringJSONBody
type PutApiV4GroupsIdIntegrationsPackagistJSONRequestBody PutApiV4GroupsIdIntegrationsPackagistJSONBody
type PutApiV4GroupsIdIntegrationsPhorgeJSONRequestBody PutApiV4GroupsIdIntegrationsPhorgeJSONBody
type PutApiV4GroupsIdIntegrationsPipelinesEmailJSONRequestBody PutApiV4GroupsIdIntegrationsPipelinesEmailJSONBody
type PutApiV4GroupsIdIntegrationsPivotaltrackerJSONRequestBody PutApiV4GroupsIdIntegrationsPivotaltrackerJSONBody
type PutApiV4GroupsIdIntegrationsPumbleJSONRequestBody PutApiV4GroupsIdIntegrationsPumbleJSONBody
type PutApiV4GroupsIdIntegrationsPushoverJSONRequestBody PutApiV4GroupsIdIntegrationsPushoverJSONBody
type PutApiV4GroupsIdIntegrationsRedmineJSONRequestBody PutApiV4GroupsIdIntegrationsRedmineJSONBody
type PutApiV4GroupsIdIntegrationsSlackJSONRequestBody PutApiV4GroupsIdIntegrationsSlackJSONBody
type PutApiV4GroupsIdIntegrationsSlackSlashCommandsJSONRequestBody PutApiV4GroupsIdIntegrationsSlackSlashCommandsJSONBody
type PutApiV4GroupsIdIntegrationsSquashTmJSONRequestBody PutApiV4GroupsIdIntegrationsSquashTmJSONBody
type PutApiV4GroupsIdIntegrationsTeamcityJSONRequestBody PutApiV4GroupsIdIntegrationsTeamcityJSONBody
type PutApiV4GroupsIdIntegrationsTelegramJSONRequestBody PutApiV4GroupsIdIntegrationsTelegramJSONBody
type PutApiV4GroupsIdIntegrationsUnifyCircuitJSONRequestBody PutApiV4GroupsIdIntegrationsUnifyCircuitJSONBody
type PutApiV4GroupsIdIntegrationsWebexTeamsJSONRequestBody PutApiV4GroupsIdIntegrationsWebexTeamsJSONBody
type PutApiV4GroupsIdIntegrationsYoutrackJSONRequestBody PutApiV4GroupsIdIntegrationsYoutrackJSONBody
type PutApiV4GroupsIdIntegrationsZentaoJSONRequestBody PutApiV4GroupsIdIntegrationsZentaoJSONBody
type PostApiV4GroupsIdInvitationsJSONRequestBody PostApiV4GroupsIdInvitationsJSONBody
type PutApiV4GroupsIdInvitationsEmailJSONRequestBody PutApiV4GroupsIdInvitationsEmailJSONBody
type PostApiV4GroupsIdMembersJSONRequestBody PostApiV4GroupsIdMembersJSONBody
type PutApiV4GroupsIdMembersUserIdJSONRequestBody PutApiV4GroupsIdMembersUserIdJSONBody
type PutApiV4GroupsIdMembersUserIdStateJSONRequestBody PutApiV4GroupsIdMembersUserIdStateJSONBody
type PostApiV4GroupsIdPlaceholderReassignmentsJSONRequestBody PostApiV4GroupsIdPlaceholderReassignmentsJSONBody
type PostApiV4GroupsIdShareJSONRequestBody PostApiV4GroupsIdShareJSONBody
type PostApiV4GroupsIdSshCertificatesJSONRequestBody PostApiV4GroupsIdSshCertificatesJSONBody
type PostApiV4GroupsIdTokensRevokeJSONRequestBody PostApiV4GroupsIdTokensRevokeJSONBody
type PostApiV4GroupsIdTransferJSONRequestBody PostApiV4GroupsIdTransferJSONBody
type PostApiV4GroupsIdVariablesJSONRequestBody PostApiV4GroupsIdVariablesJSONBody
type PutApiV4GroupsIdVariablesKeyJSONRequestBody PutApiV4GroupsIdVariablesKeyJSONBody
type PostApiV4GroupsIdWikisJSONRequestBody PostApiV4GroupsIdWikisJSONBody
type PostApiV4GroupsIdWikisAttachmentsJSONRequestBody PostApiV4GroupsIdWikisAttachmentsJSONBody
type PutApiV4GroupsIdWikisSlugJSONRequestBody PutApiV4GroupsIdWikisSlugJSONBody
type GetApiV4GroupIdPackagesComposerpackageNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupIdPackagesComposerPShaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupIdPackagesComposerP2packageNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupIdPackagesComposerPackagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Archived          *bool   `json:"archived,omitempty"`
		AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
		AvatarUrl         *string `json:"avatar_url,omitempty"`
		CreatedAt         *string `json:"created_at,omitempty"`

		// CustomAttributes API_Entities_CustomAttribute model
		CustomAttributes *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		DefaultBranch                   *string `json:"default_branch,omitempty"`
		DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
		DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
		Description                     *string `json:"description,omitempty"`

		// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
		DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
		DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
		EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
		EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
		FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
		FullName               *string `json:"full_name,omitempty"`
		FullPath               *string `json:"full_path,omitempty"`
		Id                     *string `json:"id,omitempty"`
		LdapAccess             *string `json:"ldap_access,omitempty"`
		LdapCn                 *string `json:"ldap_cn,omitempty"`
		LdapGroupLinks         *struct {
			Cn           *string `json:"cn,omitempty"`
			Filter       *string `json:"filter,omitempty"`
			GroupAccess  *int32  `json:"group_access,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Provider     *string `json:"provider,omitempty"`
		} `json:"ldap_group_links,omitempty"`
		LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
		LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
		LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
		MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
		MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
		MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
		MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
		Name                           *string `json:"name,omitempty"`
		OrganizationId                 *string `json:"organization_id,omitempty"`
		ParentId                       *string `json:"parent_id,omitempty"`
		Path                           *string `json:"path,omitempty"`
		ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
		RepositoryStorage              *string `json:"repository_storage,omitempty"`
		RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
		RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
		RootStorageStatistics          *struct {
			// BuildArtifactsSize CI artifacts size in bytes.
			BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

			// ContainerRegistrySize container registry size in bytes.
			ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

			// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
			ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

			// DependencyProxySize Dependency Proxy sizes in bytes.
			DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

			// LfsObjectsSize LFS objects size in bytes.
			LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

			// PackagesSize Packages size in bytes.
			PackagesSize *int32 `json:"packages_size,omitempty"`

			// PipelineArtifactsSize CI pipeline artifacts size in bytes.
			PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

			// RepositorySize Git repository size in bytes.
			RepositorySize *int32 `json:"repository_size,omitempty"`

			// SnippetsSize Snippets size in bytes.
			SnippetsSize *int32 `json:"snippets_size,omitempty"`

			// StorageSize Total storage in bytes.
			StorageSize *int32 `json:"storage_size,omitempty"`

			// UploadsSize Uploads size in bytes.
			UploadsSize *int32 `json:"uploads_size,omitempty"`

			// WikiSize Wiki size in bytes.
			WikiSize *int32 `json:"wiki_size,omitempty"`
		} `json:"root_storage_statistics,omitempty"`
		SamlGroupLinks *struct {
			AccessLevel  *int32  `json:"access_level,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Name         *string `json:"name,omitempty"`
		} `json:"saml_group_links,omitempty"`
		ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
		SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
		Statistics           *struct {
			JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
			LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
			PackagesSize          *string `json:"packages_size,omitempty"`
			PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
			RepositorySize        *string `json:"repository_size,omitempty"`
			SnippetsSize          *string `json:"snippets_size,omitempty"`
			StorageSize           *string `json:"storage_size,omitempty"`
			UploadsSize           *string `json:"uploads_size,omitempty"`
			WikiSize              *string `json:"wiki_size,omitempty"`
		} `json:"statistics,omitempty"`
		SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
		TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
		Visibility                   *string `json:"visibility,omitempty"`
		WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
		WebUrl                       *string `json:"web_url,omitempty"`
		WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
	}
}
type PostApiV4GroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Archived          *bool   `json:"archived,omitempty"`
		AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
		AvatarUrl         *string `json:"avatar_url,omitempty"`
		CreatedAt         *string `json:"created_at,omitempty"`

		// CustomAttributes API_Entities_CustomAttribute model
		CustomAttributes *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		DefaultBranch                   *string `json:"default_branch,omitempty"`
		DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
		DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
		Description                     *string `json:"description,omitempty"`

		// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
		DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
		DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
		EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
		EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
		FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
		FullName               *string `json:"full_name,omitempty"`
		FullPath               *string `json:"full_path,omitempty"`
		Id                     *string `json:"id,omitempty"`
		LdapAccess             *string `json:"ldap_access,omitempty"`
		LdapCn                 *string `json:"ldap_cn,omitempty"`
		LdapGroupLinks         *struct {
			Cn           *string `json:"cn,omitempty"`
			Filter       *string `json:"filter,omitempty"`
			GroupAccess  *int32  `json:"group_access,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Provider     *string `json:"provider,omitempty"`
		} `json:"ldap_group_links,omitempty"`
		LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
		LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
		LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
		MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
		MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
		MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
		MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
		Name                           *string `json:"name,omitempty"`
		OrganizationId                 *string `json:"organization_id,omitempty"`
		ParentId                       *string `json:"parent_id,omitempty"`
		Path                           *string `json:"path,omitempty"`
		ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
		RepositoryStorage              *string `json:"repository_storage,omitempty"`
		RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
		RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
		RootStorageStatistics          *struct {
			// BuildArtifactsSize CI artifacts size in bytes.
			BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

			// ContainerRegistrySize container registry size in bytes.
			ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

			// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
			ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

			// DependencyProxySize Dependency Proxy sizes in bytes.
			DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

			// LfsObjectsSize LFS objects size in bytes.
			LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

			// PackagesSize Packages size in bytes.
			PackagesSize *int32 `json:"packages_size,omitempty"`

			// PipelineArtifactsSize CI pipeline artifacts size in bytes.
			PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

			// RepositorySize Git repository size in bytes.
			RepositorySize *int32 `json:"repository_size,omitempty"`

			// SnippetsSize Snippets size in bytes.
			SnippetsSize *int32 `json:"snippets_size,omitempty"`

			// StorageSize Total storage in bytes.
			StorageSize *int32 `json:"storage_size,omitempty"`

			// UploadsSize Uploads size in bytes.
			UploadsSize *int32 `json:"uploads_size,omitempty"`

			// WikiSize Wiki size in bytes.
			WikiSize *int32 `json:"wiki_size,omitempty"`
		} `json:"root_storage_statistics,omitempty"`
		SamlGroupLinks *struct {
			AccessLevel  *int32  `json:"access_level,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Name         *string `json:"name,omitempty"`
		} `json:"saml_group_links,omitempty"`
		ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
		SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
		Statistics           *struct {
			JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
			LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
			PackagesSize          *string `json:"packages_size,omitempty"`
			PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
			RepositorySize        *string `json:"repository_size,omitempty"`
			SnippetsSize          *string `json:"snippets_size,omitempty"`
			StorageSize           *string `json:"storage_size,omitempty"`
			UploadsSize           *string `json:"uploads_size,omitempty"`
			WikiSize              *string `json:"wiki_size,omitempty"`
		} `json:"statistics,omitempty"`
		SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
		TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
		Visibility                   *string `json:"visibility,omitempty"`
		WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
		WebUrl                       *string `json:"web_url,omitempty"`
		WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
	}
}
type PostApiV4GroupsImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type PostApiV4GroupsImportAuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type DeleteApiV4GroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AllowedEmailDomainsList                *string `json:"allowed_email_domains_list,omitempty"`
		Archived                               *bool   `json:"archived,omitempty"`
		AutoBanUserOnExcessiveProjectsDownload *string `json:"auto_ban_user_on_excessive_projects_download,omitempty"`
		AutoDevopsEnabled                      *string `json:"auto_devops_enabled,omitempty"`
		AvatarUrl                              *string `json:"avatar_url,omitempty"`
		CreatedAt                              *string `json:"created_at,omitempty"`

		// CustomAttributes API_Entities_CustomAttribute model
		CustomAttributes *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		DefaultBranch                   *string `json:"default_branch,omitempty"`
		DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
		DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
		Description                     *string `json:"description,omitempty"`

		// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
		DuoCoreFeaturesEnabled         *bool   `json:"duo_core_features_enabled,omitempty"`
		DuoFeaturesEnabled             *string `json:"duo_features_enabled,omitempty"`
		EmailsDisabled                 *bool   `json:"emails_disabled,omitempty"`
		EmailsEnabled                  *bool   `json:"emails_enabled,omitempty"`
		EnabledGitAccessProtocol       *string `json:"enabled_git_access_protocol,omitempty"`
		ExtraSharedRunnersMinutesLimit *string `json:"extra_shared_runners_minutes_limit,omitempty"`
		FileTemplateProjectId          *string `json:"file_template_project_id,omitempty"`
		FullName                       *string `json:"full_name,omitempty"`
		FullPath                       *string `json:"full_path,omitempty"`
		Id                             *string `json:"id,omitempty"`
		IpRestrictionRanges            *string `json:"ip_restriction_ranges,omitempty"`
		LdapAccess                     *string `json:"ldap_access,omitempty"`
		LdapCn                         *string `json:"ldap_cn,omitempty"`
		LdapGroupLinks                 *struct {
			Cn           *string `json:"cn,omitempty"`
			Filter       *string `json:"filter,omitempty"`
			GroupAccess  *int32  `json:"group_access,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Provider     *string `json:"provider,omitempty"`
		} `json:"ldap_group_links,omitempty"`
		LfsEnabled                           *string `json:"lfs_enabled,omitempty"`
		LockDuoFeaturesEnabled               *string `json:"lock_duo_features_enabled,omitempty"`
		LockMathRenderingLimitsEnabled       *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
		MarkedForDeletionOn                  *string `json:"marked_for_deletion_on,omitempty"`
		MathRenderingLimitsEnabled           *bool   `json:"math_rendering_limits_enabled,omitempty"`
		MaxArtifactsSize                     *int32  `json:"max_artifacts_size,omitempty"`
		MembershipLock                       *string `json:"membership_lock,omitempty"`
		MentionsDisabled                     *string `json:"mentions_disabled,omitempty"`
		Name                                 *string `json:"name,omitempty"`
		OrganizationId                       *string `json:"organization_id,omitempty"`
		ParentId                             *string `json:"parent_id,omitempty"`
		Path                                 *string `json:"path,omitempty"`
		PreventForkingOutsideGroup           *string `json:"prevent_forking_outside_group,omitempty"`
		PreventSharingGroupsOutsideHierarchy *string `json:"prevent_sharing_groups_outside_hierarchy,omitempty"`
		ProjectCreationLevel                 *string `json:"project_creation_level,omitempty"`

		// Projects API_Entities_Project model
		Projects *struct {
			Links *struct {
				ClusterAgents *string `json:"cluster_agents,omitempty"`
				Events        *string `json:"events,omitempty"`
				Issues        *string `json:"issues,omitempty"`
				Labels        *string `json:"labels,omitempty"`
				Members       *string `json:"members,omitempty"`
				MergeRequests *string `json:"merge_requests,omitempty"`
				RepoBranches  *string `json:"repo_branches,omitempty"`
				Self          *string `json:"self,omitempty"`
			} `json:"_links,omitempty"`
			AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
			AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
			AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
			ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
			Archived                                 *bool     `json:"archived,omitempty"`
			AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
			AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
			AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
			AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
			AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
			AvatarUrl                                *string   `json:"avatar_url,omitempty"`
			BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
			BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
			BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
			CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
			CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
			CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
			CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
			CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
			CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
			CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
			CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
			CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
			CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
			CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
			CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
			CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
			ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
			ContainerExpirationPolicy                *struct {
				Cadence       *string `json:"cadence,omitempty"`
				Enabled       *string `json:"enabled,omitempty"`
				KeepN         *string `json:"keep_n,omitempty"`
				NameRegex     *string `json:"name_regex,omitempty"`
				NameRegexKeep *string `json:"name_regex_keep,omitempty"`
				NextRunAt     *string `json:"next_run_at,omitempty"`
				OlderThan     *string `json:"older_than,omitempty"`
			} `json:"container_expiration_policy,omitempty"`
			ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
			ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
			ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
			CreatedAt                    *time.Time `json:"created_at,omitempty"`
			CreatorId                    *int32     `json:"creator_id,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                            *string `json:"default_branch,omitempty"`
			Description                              *string `json:"description,omitempty"`
			DescriptionHtml                          *string `json:"description_html,omitempty"`
			EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
			EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
			EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
			EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
			ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
			FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

			// ForkedFromProject API_Entities_BasicProjectDetails model
			ForkedFromProject *struct {
				AvatarUrl *string    `json:"avatar_url,omitempty"`
				CreatedAt *time.Time `json:"created_at,omitempty"`

				// CustomAttributes API_Entities_CustomAttribute model
				CustomAttributes *struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				DefaultBranch  *string    `json:"default_branch,omitempty"`
				Description    *string    `json:"description,omitempty"`
				ForksCount     *int32     `json:"forks_count,omitempty"`
				HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
				Id             *int32     `json:"id,omitempty"`
				LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
				License        *struct {
					HtmlUrl   *string `json:"html_url,omitempty"`
					Key       *string `json:"key,omitempty"`
					Name      *string `json:"name,omitempty"`
					Nickname  *string `json:"nickname,omitempty"`
					SourceUrl *string `json:"source_url,omitempty"`
				} `json:"license,omitempty"`
				LicenseUrl        *string `json:"license_url,omitempty"`
				Name              *string `json:"name,omitempty"`
				NameWithNamespace *string `json:"name_with_namespace,omitempty"`
				Namespace         *struct {
					AvatarUrl *string `json:"avatar_url,omitempty"`
					FullPath  *string `json:"full_path,omitempty"`
					Id        *int32  `json:"id,omitempty"`
					Kind      *string `json:"kind,omitempty"`
					Name      *string `json:"name,omitempty"`
					ParentId  *int32  `json:"parent_id,omitempty"`
					Path      *string `json:"path,omitempty"`
					WebUrl    *string `json:"web_url,omitempty"`
				} `json:"namespace,omitempty"`
				Path              *string   `json:"path,omitempty"`
				PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
				ReadmeUrl         *string   `json:"readme_url,omitempty"`
				RepositoryStorage *string   `json:"repository_storage,omitempty"`
				SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
				StarCount         *int32    `json:"star_count,omitempty"`
				TagList           *[]string `json:"tag_list,omitempty"`
				Topics            *[]string `json:"topics,omitempty"`
				WebUrl            *string   `json:"web_url,omitempty"`
			} `json:"forked_from_project,omitempty"`
			ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
			ForksCount                *int32     `json:"forks_count,omitempty"`
			GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
			HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
			Id                        *int32     `json:"id,omitempty"`
			ImportError               *string    `json:"import_error,omitempty"`
			ImportStatus              *string    `json:"import_status,omitempty"`
			ImportType                *string    `json:"import_type,omitempty"`
			ImportUrl                 *string    `json:"import_url,omitempty"`
			InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
			IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
			IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
			IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
			IssuesTemplate            *string    `json:"issues_template,omitempty"`
			JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
			KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
			LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
			LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
			License                   *struct {
				HtmlUrl   *string `json:"html_url,omitempty"`
				Key       *string `json:"key,omitempty"`
				Name      *string `json:"name,omitempty"`
				Nickname  *string `json:"nickname,omitempty"`
				SourceUrl *string `json:"source_url,omitempty"`
			} `json:"license,omitempty"`
			LicenseUrl                       *string `json:"license_url,omitempty"`
			MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
			MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
			MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
			MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
			MergeMethod                      *string `json:"merge_method,omitempty"`
			MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
			MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
			MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
			MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
			MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
			MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
			MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
			Mirror                           *string `json:"mirror,omitempty"`
			MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
			MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
			MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
			ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
			ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
			MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
			MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
			Name                             *string `json:"name,omitempty"`
			NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
			Namespace                        *struct {
				AvatarUrl *string `json:"avatar_url,omitempty"`
				FullPath  *string `json:"full_path,omitempty"`
				Id        *int32  `json:"id,omitempty"`
				Kind      *string `json:"kind,omitempty"`
				Name      *string `json:"name,omitempty"`
				ParentId  *int32  `json:"parent_id,omitempty"`
				Path      *string `json:"path,omitempty"`
				WebUrl    *string `json:"web_url,omitempty"`
			} `json:"namespace,omitempty"`
			OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
			OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
			OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
			OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
			OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

			// Owner API_Entities_UserBasic model
			Owner *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"owner,omitempty"`
			PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
			PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
			Path                             *string   `json:"path,omitempty"`
			PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
			PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
			PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
			PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
			PublicJobs                       *bool     `json:"public_jobs,omitempty"`
			ReadmeUrl                        *string   `json:"readme_url,omitempty"`
			ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
			RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
			RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
			RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
			RepositoryStorage                *string   `json:"repository_storage,omitempty"`
			RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
			RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
			RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
			ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
			RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
			RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
			RunnersToken                     *string   `json:"runners_token,omitempty"`
			SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
			SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
			SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
			ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
			ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
			SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
			SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
			SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
			SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
			SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
			SquashOption                     *string   `json:"squash_option,omitempty"`
			SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
			StarCount                        *int32    `json:"star_count,omitempty"`
			Statistics                       *struct {
				CommitCount           *string `json:"commit_count,omitempty"`
				ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
			TagList                                *[]string  `json:"tag_list,omitempty"`
			Topics                                 *[]string  `json:"topics,omitempty"`
			UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
			Visibility                             *string    `json:"visibility,omitempty"`
			WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
			WebUrl                                 *string    `json:"web_url,omitempty"`
			WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
			WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
		} `json:"projects,omitempty"`
		RepositoryStorage              *string `json:"repository_storage,omitempty"`
		RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
		RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
		RootStorageStatistics          *struct {
			// BuildArtifactsSize CI artifacts size in bytes.
			BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

			// ContainerRegistrySize container registry size in bytes.
			ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

			// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
			ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

			// DependencyProxySize Dependency Proxy sizes in bytes.
			DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

			// LfsObjectsSize LFS objects size in bytes.
			LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

			// PackagesSize Packages size in bytes.
			PackagesSize *int32 `json:"packages_size,omitempty"`

			// PipelineArtifactsSize CI pipeline artifacts size in bytes.
			PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

			// RepositorySize Git repository size in bytes.
			RepositorySize *int32 `json:"repository_size,omitempty"`

			// SnippetsSize Snippets size in bytes.
			SnippetsSize *int32 `json:"snippets_size,omitempty"`

			// StorageSize Total storage in bytes.
			StorageSize *int32 `json:"storage_size,omitempty"`

			// UploadsSize Uploads size in bytes.
			UploadsSize *int32 `json:"uploads_size,omitempty"`

			// WikiSize Wiki size in bytes.
			WikiSize *int32 `json:"wiki_size,omitempty"`
		} `json:"root_storage_statistics,omitempty"`
		RunnersToken   *string `json:"runners_token,omitempty"`
		SamlGroupLinks *struct {
			AccessLevel  *int32  `json:"access_level,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Name         *string `json:"name,omitempty"`
		} `json:"saml_group_links,omitempty"`
		ServiceAccessTokensExpirationEnforced *string `json:"service_access_tokens_expiration_enforced,omitempty"`
		ShareWithGroupLock                    *string `json:"share_with_group_lock,omitempty"`

		// SharedProjects API_Entities_Project model
		SharedProjects *struct {
			Links *struct {
				ClusterAgents *string `json:"cluster_agents,omitempty"`
				Events        *string `json:"events,omitempty"`
				Issues        *string `json:"issues,omitempty"`
				Labels        *string `json:"labels,omitempty"`
				Members       *string `json:"members,omitempty"`
				MergeRequests *string `json:"merge_requests,omitempty"`
				RepoBranches  *string `json:"repo_branches,omitempty"`
				Self          *string `json:"self,omitempty"`
			} `json:"_links,omitempty"`
			AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
			AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
			AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
			ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
			Archived                                 *bool     `json:"archived,omitempty"`
			AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
			AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
			AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
			AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
			AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
			AvatarUrl                                *string   `json:"avatar_url,omitempty"`
			BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
			BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
			BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
			CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
			CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
			CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
			CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
			CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
			CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
			CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
			CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
			CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
			CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
			CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
			CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
			CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
			ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
			ContainerExpirationPolicy                *struct {
				Cadence       *string `json:"cadence,omitempty"`
				Enabled       *string `json:"enabled,omitempty"`
				KeepN         *string `json:"keep_n,omitempty"`
				NameRegex     *string `json:"name_regex,omitempty"`
				NameRegexKeep *string `json:"name_regex_keep,omitempty"`
				NextRunAt     *string `json:"next_run_at,omitempty"`
				OlderThan     *string `json:"older_than,omitempty"`
			} `json:"container_expiration_policy,omitempty"`
			ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
			ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
			ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
			CreatedAt                    *time.Time `json:"created_at,omitempty"`
			CreatorId                    *int32     `json:"creator_id,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                            *string `json:"default_branch,omitempty"`
			Description                              *string `json:"description,omitempty"`
			DescriptionHtml                          *string `json:"description_html,omitempty"`
			EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
			EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
			EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
			EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
			ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
			FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

			// ForkedFromProject API_Entities_BasicProjectDetails model
			ForkedFromProject *struct {
				AvatarUrl *string    `json:"avatar_url,omitempty"`
				CreatedAt *time.Time `json:"created_at,omitempty"`

				// CustomAttributes API_Entities_CustomAttribute model
				CustomAttributes *struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				DefaultBranch  *string    `json:"default_branch,omitempty"`
				Description    *string    `json:"description,omitempty"`
				ForksCount     *int32     `json:"forks_count,omitempty"`
				HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
				Id             *int32     `json:"id,omitempty"`
				LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
				License        *struct {
					HtmlUrl   *string `json:"html_url,omitempty"`
					Key       *string `json:"key,omitempty"`
					Name      *string `json:"name,omitempty"`
					Nickname  *string `json:"nickname,omitempty"`
					SourceUrl *string `json:"source_url,omitempty"`
				} `json:"license,omitempty"`
				LicenseUrl        *string `json:"license_url,omitempty"`
				Name              *string `json:"name,omitempty"`
				NameWithNamespace *string `json:"name_with_namespace,omitempty"`
				Namespace         *struct {
					AvatarUrl *string `json:"avatar_url,omitempty"`
					FullPath  *string `json:"full_path,omitempty"`
					Id        *int32  `json:"id,omitempty"`
					Kind      *string `json:"kind,omitempty"`
					Name      *string `json:"name,omitempty"`
					ParentId  *int32  `json:"parent_id,omitempty"`
					Path      *string `json:"path,omitempty"`
					WebUrl    *string `json:"web_url,omitempty"`
				} `json:"namespace,omitempty"`
				Path              *string   `json:"path,omitempty"`
				PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
				ReadmeUrl         *string   `json:"readme_url,omitempty"`
				RepositoryStorage *string   `json:"repository_storage,omitempty"`
				SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
				StarCount         *int32    `json:"star_count,omitempty"`
				TagList           *[]string `json:"tag_list,omitempty"`
				Topics            *[]string `json:"topics,omitempty"`
				WebUrl            *string   `json:"web_url,omitempty"`
			} `json:"forked_from_project,omitempty"`
			ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
			ForksCount                *int32     `json:"forks_count,omitempty"`
			GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
			HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
			Id                        *int32     `json:"id,omitempty"`
			ImportError               *string    `json:"import_error,omitempty"`
			ImportStatus              *string    `json:"import_status,omitempty"`
			ImportType                *string    `json:"import_type,omitempty"`
			ImportUrl                 *string    `json:"import_url,omitempty"`
			InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
			IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
			IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
			IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
			IssuesTemplate            *string    `json:"issues_template,omitempty"`
			JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
			KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
			LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
			LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
			License                   *struct {
				HtmlUrl   *string `json:"html_url,omitempty"`
				Key       *string `json:"key,omitempty"`
				Name      *string `json:"name,omitempty"`
				Nickname  *string `json:"nickname,omitempty"`
				SourceUrl *string `json:"source_url,omitempty"`
			} `json:"license,omitempty"`
			LicenseUrl                       *string `json:"license_url,omitempty"`
			MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
			MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
			MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
			MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
			MergeMethod                      *string `json:"merge_method,omitempty"`
			MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
			MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
			MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
			MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
			MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
			MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
			MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
			Mirror                           *string `json:"mirror,omitempty"`
			MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
			MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
			MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
			ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
			ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
			MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
			MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
			Name                             *string `json:"name,omitempty"`
			NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
			Namespace                        *struct {
				AvatarUrl *string `json:"avatar_url,omitempty"`
				FullPath  *string `json:"full_path,omitempty"`
				Id        *int32  `json:"id,omitempty"`
				Kind      *string `json:"kind,omitempty"`
				Name      *string `json:"name,omitempty"`
				ParentId  *int32  `json:"parent_id,omitempty"`
				Path      *string `json:"path,omitempty"`
				WebUrl    *string `json:"web_url,omitempty"`
			} `json:"namespace,omitempty"`
			OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
			OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
			OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
			OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
			OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

			// Owner API_Entities_UserBasic model
			Owner *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"owner,omitempty"`
			PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
			PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
			Path                             *string   `json:"path,omitempty"`
			PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
			PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
			PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
			PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
			PublicJobs                       *bool     `json:"public_jobs,omitempty"`
			ReadmeUrl                        *string   `json:"readme_url,omitempty"`
			ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
			RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
			RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
			RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
			RepositoryStorage                *string   `json:"repository_storage,omitempty"`
			RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
			RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
			RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
			ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
			RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
			RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
			RunnersToken                     *string   `json:"runners_token,omitempty"`
			SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
			SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
			SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
			ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
			ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
			SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
			SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
			SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
			SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
			SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
			SquashOption                     *string   `json:"squash_option,omitempty"`
			SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
			StarCount                        *int32    `json:"star_count,omitempty"`
			Statistics                       *struct {
				CommitCount           *string `json:"commit_count,omitempty"`
				ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
			TagList                                *[]string  `json:"tag_list,omitempty"`
			Topics                                 *[]string  `json:"topics,omitempty"`
			UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
			Visibility                             *string    `json:"visibility,omitempty"`
			WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
			WebUrl                                 *string    `json:"web_url,omitempty"`
			WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
			WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
		} `json:"shared_projects,omitempty"`
		SharedRunnersMinutesLimit *string `json:"shared_runners_minutes_limit,omitempty"`
		SharedRunnersSetting      *string `json:"shared_runners_setting,omitempty"`
		SharedWithGroups          *string `json:"shared_with_groups,omitempty"`
		Statistics                *struct {
			JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
			LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
			PackagesSize          *string `json:"packages_size,omitempty"`
			PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
			RepositorySize        *string `json:"repository_size,omitempty"`
			SnippetsSize          *string `json:"snippets_size,omitempty"`
			StorageSize           *string `json:"storage_size,omitempty"`
			UploadsSize           *string `json:"uploads_size,omitempty"`
			WikiSize              *string `json:"wiki_size,omitempty"`
		} `json:"statistics,omitempty"`
		SubgroupCreationLevel                       *string `json:"subgroup_creation_level,omitempty"`
		TwoFactorGracePeriod                        *string `json:"two_factor_grace_period,omitempty"`
		UniqueProjectDownloadLimit                  *string `json:"unique_project_download_limit,omitempty"`
		UniqueProjectDownloadLimitAlertlist         *string `json:"unique_project_download_limit_alertlist,omitempty"`
		UniqueProjectDownloadLimitAllowlist         *string `json:"unique_project_download_limit_allowlist,omitempty"`
		UniqueProjectDownloadLimitIntervalInSeconds *string `json:"unique_project_download_limit_interval_in_seconds,omitempty"`
		Visibility                                  *string `json:"visibility,omitempty"`
		WebBasedCommitSigningEnabled                *string `json:"web_based_commit_signing_enabled,omitempty"`
		WebUrl                                      *string `json:"web_url,omitempty"`
		WikiAccessLevel                             *string `json:"wiki_access_level,omitempty"`
	}
}
type PutApiV4GroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Archived          *bool   `json:"archived,omitempty"`
		AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
		AvatarUrl         *string `json:"avatar_url,omitempty"`
		CreatedAt         *string `json:"created_at,omitempty"`

		// CustomAttributes API_Entities_CustomAttribute model
		CustomAttributes *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		DefaultBranch                   *string `json:"default_branch,omitempty"`
		DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
		DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
		Description                     *string `json:"description,omitempty"`

		// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
		DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
		DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
		EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
		EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
		FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
		FullName               *string `json:"full_name,omitempty"`
		FullPath               *string `json:"full_path,omitempty"`
		Id                     *string `json:"id,omitempty"`
		LdapAccess             *string `json:"ldap_access,omitempty"`
		LdapCn                 *string `json:"ldap_cn,omitempty"`
		LdapGroupLinks         *struct {
			Cn           *string `json:"cn,omitempty"`
			Filter       *string `json:"filter,omitempty"`
			GroupAccess  *int32  `json:"group_access,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Provider     *string `json:"provider,omitempty"`
		} `json:"ldap_group_links,omitempty"`
		LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
		LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
		LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
		MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
		MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
		MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
		MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
		Name                           *string `json:"name,omitempty"`
		OrganizationId                 *string `json:"organization_id,omitempty"`
		ParentId                       *string `json:"parent_id,omitempty"`
		Path                           *string `json:"path,omitempty"`
		ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
		RepositoryStorage              *string `json:"repository_storage,omitempty"`
		RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
		RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
		RootStorageStatistics          *struct {
			// BuildArtifactsSize CI artifacts size in bytes.
			BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

			// ContainerRegistrySize container registry size in bytes.
			ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

			// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
			ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

			// DependencyProxySize Dependency Proxy sizes in bytes.
			DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

			// LfsObjectsSize LFS objects size in bytes.
			LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

			// PackagesSize Packages size in bytes.
			PackagesSize *int32 `json:"packages_size,omitempty"`

			// PipelineArtifactsSize CI pipeline artifacts size in bytes.
			PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

			// RepositorySize Git repository size in bytes.
			RepositorySize *int32 `json:"repository_size,omitempty"`

			// SnippetsSize Snippets size in bytes.
			SnippetsSize *int32 `json:"snippets_size,omitempty"`

			// StorageSize Total storage in bytes.
			StorageSize *int32 `json:"storage_size,omitempty"`

			// UploadsSize Uploads size in bytes.
			UploadsSize *int32 `json:"uploads_size,omitempty"`

			// WikiSize Wiki size in bytes.
			WikiSize *int32 `json:"wiki_size,omitempty"`
		} `json:"root_storage_statistics,omitempty"`
		SamlGroupLinks *struct {
			AccessLevel  *int32  `json:"access_level,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Name         *string `json:"name,omitempty"`
		} `json:"saml_group_links,omitempty"`
		ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
		SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
		Statistics           *struct {
			JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
			LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
			PackagesSize          *string `json:"packages_size,omitempty"`
			PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
			RepositorySize        *string `json:"repository_size,omitempty"`
			SnippetsSize          *string `json:"snippets_size,omitempty"`
			StorageSize           *string `json:"storage_size,omitempty"`
			UploadsSize           *string `json:"uploads_size,omitempty"`
			WikiSize              *string `json:"wiki_size,omitempty"`
		} `json:"statistics,omitempty"`
		SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
		TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
		Visibility                   *string `json:"visibility,omitempty"`
		WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
		WebUrl                       *string `json:"web_url,omitempty"`
		WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
	}
}
type GetApiV4GroupsIdDebianDistributionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Architectures            *[]string `json:"architectures,omitempty"`
		Codename                 *string   `json:"codename,omitempty"`
		Components               *[]string `json:"components,omitempty"`
		Description              *string   `json:"description,omitempty"`
		Id                       *int32    `json:"id,omitempty"`
		Label                    *string   `json:"label,omitempty"`
		Origin                   *string   `json:"origin,omitempty"`
		Suite                    *string   `json:"suite,omitempty"`
		ValidTimeDurationSeconds *int32    `json:"valid_time_duration_seconds,omitempty"`
		Version                  *string   `json:"version,omitempty"`
	}
}
type PostApiV4GroupsIdDebianDistributionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Architectures            *[]string `json:"architectures,omitempty"`
		Codename                 *string   `json:"codename,omitempty"`
		Components               *[]string `json:"components,omitempty"`
		Description              *string   `json:"description,omitempty"`
		Id                       *int32    `json:"id,omitempty"`
		Label                    *string   `json:"label,omitempty"`
		Origin                   *string   `json:"origin,omitempty"`
		Suite                    *string   `json:"suite,omitempty"`
		ValidTimeDurationSeconds *int32    `json:"valid_time_duration_seconds,omitempty"`
		Version                  *string   `json:"version,omitempty"`
	}
}
type DeleteApiV4GroupsIdDebianDistributionsCodenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdDebianDistributionsCodenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Architectures            *[]string `json:"architectures,omitempty"`
		Codename                 *string   `json:"codename,omitempty"`
		Components               *[]string `json:"components,omitempty"`
		Description              *string   `json:"description,omitempty"`
		Id                       *int32    `json:"id,omitempty"`
		Label                    *string   `json:"label,omitempty"`
		Origin                   *string   `json:"origin,omitempty"`
		Suite                    *string   `json:"suite,omitempty"`
		ValidTimeDurationSeconds *int32    `json:"valid_time_duration_seconds,omitempty"`
		Version                  *string   `json:"version,omitempty"`
	}
}
type PutApiV4GroupsIdDebianDistributionsCodenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Architectures            *[]string `json:"architectures,omitempty"`
		Codename                 *string   `json:"codename,omitempty"`
		Components               *[]string `json:"components,omitempty"`
		Description              *string   `json:"description,omitempty"`
		Id                       *int32    `json:"id,omitempty"`
		Label                    *string   `json:"label,omitempty"`
		Origin                   *string   `json:"origin,omitempty"`
		Suite                    *string   `json:"suite,omitempty"`
		ValidTimeDurationSeconds *int32    `json:"valid_time_duration_seconds,omitempty"`
		Version                  *string   `json:"version,omitempty"`
	}
}
type GetApiV4GroupsIdDebianDistributionsCodenameKeyAscResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Architectures            *[]string `json:"architectures,omitempty"`
		Codename                 *string   `json:"codename,omitempty"`
		Components               *[]string `json:"components,omitempty"`
		Description              *string   `json:"description,omitempty"`
		Id                       *int32    `json:"id,omitempty"`
		Label                    *string   `json:"label,omitempty"`
		Origin                   *string   `json:"origin,omitempty"`
		Suite                    *string   `json:"suite,omitempty"`
		ValidTimeDurationSeconds *int32    `json:"valid_time_duration_seconds,omitempty"`
		Version                  *string   `json:"version,omitempty"`
	}
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionInreleaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256Response struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256Response struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256Response struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesDebianPoolDistributionProjectIdLetterPackageNamePackageVersionFileNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesMavenpathFileNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesNpmpackageNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DistTags *map[string]interface{} `json:"dist-tags,omitempty"`
		Name     *string                 `json:"name,omitempty"`
		Versions *map[string]interface{} `json:"versions,omitempty"`
	}
}
type PostApiV4GroupsIdPackagesNpmNpmV1SecurityAdvisoriesBulkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type PostApiV4GroupsIdPackagesNpmNpmV1SecurityAuditsQuickResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DistTags *map[string]interface{} `json:"dist_tags,omitempty"`
	}
}
type DeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesNugetIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Resources *[]map[string]interface{} `json:"resources,omitempty"`
		Version   *string                   `json:"version,omitempty"`
	}
}
type GetApiV4GroupsIdPackagesNugetQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *[]struct {
			Type           *string `json:"@type,omitempty"`
			Authors        *string `json:"authors,omitempty"`
			Description    *string `json:"description,omitempty"`
			IconUrl        *string `json:"iconUrl,omitempty"`
			Id             *string `json:"id,omitempty"`
			LicenseUrl     *string `json:"licenseUrl,omitempty"`
			ProjectUrl     *string `json:"projectUrl,omitempty"`
			Summary        *string `json:"summary,omitempty"`
			Tags           *string `json:"tags,omitempty"`
			Title          *string `json:"title,omitempty"`
			TotalDownloads *int32  `json:"totalDownloads,omitempty"`
			Verified       *bool   `json:"verified,omitempty"`
			Version        *string `json:"version,omitempty"`
			Versions       *struct {
				Id        *string `json:"@id,omitempty"`
				Downloads *int32  `json:"downloads,omitempty"`
				Version   *string `json:"version,omitempty"`
			} `json:"versions,omitempty"`
		} `json:"data,omitempty"`
		TotalHits *int32 `json:"totalHits,omitempty"`
	}
}
type GetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesNugetV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesNugetV2MetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesPypiSimpleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPackagesPypiSimplepackageNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdAccessRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AvatarPath       *string `json:"avatar_path,omitempty"`
		AvatarUrl        *string `json:"avatar_url,omitempty"`
		CustomAttributes *[]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		Id          *int32  `json:"id,omitempty"`
		Locked      *bool   `json:"locked,omitempty"`
		Name        *string `json:"name,omitempty"`
		PublicEmail *string `json:"public_email,omitempty"`
		RequestedAt *string `json:"requested_at,omitempty"`
		State       *string `json:"state,omitempty"`
		Username    *string `json:"username,omitempty"`
		WebUrl      *string `json:"web_url,omitempty"`
	}
}
type PostApiV4GroupsIdAccessRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AvatarPath       *string `json:"avatar_path,omitempty"`
		AvatarUrl        *string `json:"avatar_url,omitempty"`
		CustomAttributes *[]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		Id          *int32  `json:"id,omitempty"`
		Locked      *bool   `json:"locked,omitempty"`
		Name        *string `json:"name,omitempty"`
		PublicEmail *string `json:"public_email,omitempty"`
		RequestedAt *string `json:"requested_at,omitempty"`
		State       *string `json:"state,omitempty"`
		Username    *string `json:"username,omitempty"`
		WebUrl      *string `json:"web_url,omitempty"`
	}
}
type DeleteApiV4GroupsIdAccessRequestsUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type PutApiV4GroupsIdAccessRequestsUserIdApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AvatarPath       *string `json:"avatar_path,omitempty"`
		AvatarUrl        *string `json:"avatar_url,omitempty"`
		CustomAttributes *[]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		Id          *int32  `json:"id,omitempty"`
		Locked      *bool   `json:"locked,omitempty"`
		Name        *string `json:"name,omitempty"`
		PublicEmail *string `json:"public_email,omitempty"`
		RequestedAt *string `json:"requested_at,omitempty"`
		State       *string `json:"state,omitempty"`
		Username    *string `json:"username,omitempty"`
		WebUrl      *string `json:"web_url,omitempty"`
	}
}
type PostApiV4GroupsIdAccessTokensSelfRotateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessLevel  *PostApiV4GroupsIdAccessTokensSelfRotate200AccessLevel  `json:"access_level,omitempty"`
		Active       *bool                                                   `json:"active,omitempty"`
		CreatedAt    *time.Time                                              `json:"created_at,omitempty"`
		Description  *string                                                 `json:"description,omitempty"`
		ExpiresAt    *time.Time                                              `json:"expires_at,omitempty"`
		Id           *int32                                                  `json:"id,omitempty"`
		LastUsedAt   *time.Time                                              `json:"last_used_at,omitempty"`
		Name         *string                                                 `json:"name,omitempty"`
		ResourceId   *int32                                                  `json:"resource_id,omitempty"`
		ResourceType *PostApiV4GroupsIdAccessTokensSelfRotate200ResourceType `json:"resource_type,omitempty"`
		Revoked      *bool                                                   `json:"revoked,omitempty"`
		Scopes       *[]interface{}                                          `json:"scopes,omitempty"`
		Token        *string                                                 `json:"token,omitempty"`
		UserId       *int32                                                  `json:"user_id,omitempty"`
	}
}
type PostApiV4GroupsIdAccessTokensSelfRotate200AccessLevel int32
type PostApiV4GroupsIdAccessTokensSelfRotate200ResourceType string
type PostApiV4GroupsIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Archived          *bool   `json:"archived,omitempty"`
		AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
		AvatarUrl         *string `json:"avatar_url,omitempty"`
		CreatedAt         *string `json:"created_at,omitempty"`

		// CustomAttributes API_Entities_CustomAttribute model
		CustomAttributes *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		DefaultBranch                   *string `json:"default_branch,omitempty"`
		DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
		DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
		Description                     *string `json:"description,omitempty"`

		// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
		DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
		DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
		EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
		EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
		FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
		FullName               *string `json:"full_name,omitempty"`
		FullPath               *string `json:"full_path,omitempty"`
		Id                     *string `json:"id,omitempty"`
		LdapAccess             *string `json:"ldap_access,omitempty"`
		LdapCn                 *string `json:"ldap_cn,omitempty"`
		LdapGroupLinks         *struct {
			Cn           *string `json:"cn,omitempty"`
			Filter       *string `json:"filter,omitempty"`
			GroupAccess  *int32  `json:"group_access,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Provider     *string `json:"provider,omitempty"`
		} `json:"ldap_group_links,omitempty"`
		LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
		LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
		LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
		MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
		MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
		MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
		MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
		Name                           *string `json:"name,omitempty"`
		OrganizationId                 *string `json:"organization_id,omitempty"`
		ParentId                       *string `json:"parent_id,omitempty"`
		Path                           *string `json:"path,omitempty"`
		ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
		RepositoryStorage              *string `json:"repository_storage,omitempty"`
		RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
		RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
		RootStorageStatistics          *struct {
			// BuildArtifactsSize CI artifacts size in bytes.
			BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

			// ContainerRegistrySize container registry size in bytes.
			ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

			// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
			ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

			// DependencyProxySize Dependency Proxy sizes in bytes.
			DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

			// LfsObjectsSize LFS objects size in bytes.
			LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

			// PackagesSize Packages size in bytes.
			PackagesSize *int32 `json:"packages_size,omitempty"`

			// PipelineArtifactsSize CI pipeline artifacts size in bytes.
			PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

			// RepositorySize Git repository size in bytes.
			RepositorySize *int32 `json:"repository_size,omitempty"`

			// SnippetsSize Snippets size in bytes.
			SnippetsSize *int32 `json:"snippets_size,omitempty"`

			// StorageSize Total storage in bytes.
			StorageSize *int32 `json:"storage_size,omitempty"`

			// UploadsSize Uploads size in bytes.
			UploadsSize *int32 `json:"uploads_size,omitempty"`

			// WikiSize Wiki size in bytes.
			WikiSize *int32 `json:"wiki_size,omitempty"`
		} `json:"root_storage_statistics,omitempty"`
		SamlGroupLinks *struct {
			AccessLevel  *int32  `json:"access_level,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Name         *string `json:"name,omitempty"`
		} `json:"saml_group_links,omitempty"`
		ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
		SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
		Statistics           *struct {
			JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
			LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
			PackagesSize          *string `json:"packages_size,omitempty"`
			PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
			RepositorySize        *string `json:"repository_size,omitempty"`
			SnippetsSize          *string `json:"snippets_size,omitempty"`
			StorageSize           *string `json:"storage_size,omitempty"`
			UploadsSize           *string `json:"uploads_size,omitempty"`
			WikiSize              *string `json:"wiki_size,omitempty"`
		} `json:"statistics,omitempty"`
		SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
		TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
		Visibility                   *string `json:"visibility,omitempty"`
		WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
		WebUrl                       *string `json:"web_url,omitempty"`
		WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
	}
}
type GetApiV4GroupsIdAuditEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AuthorId   *string `json:"author_id,omitempty"`
		CreatedAt  *string `json:"created_at,omitempty"`
		Details    *string `json:"details,omitempty"`
		EntityId   *string `json:"entity_id,omitempty"`
		EntityType *string `json:"entity_type,omitempty"`
		EventName  *string `json:"event_name,omitempty"`
		Id         *string `json:"id,omitempty"`
	}
}
type GetApiV4GroupsIdAuditEventsAuditEventIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AuthorId   *string `json:"author_id,omitempty"`
		CreatedAt  *string `json:"created_at,omitempty"`
		Details    *string `json:"details,omitempty"`
		EntityId   *string `json:"entity_id,omitempty"`
		EntityType *string `json:"entity_type,omitempty"`
		EventName  *string `json:"event_name,omitempty"`
		Id         *string `json:"id,omitempty"`
	}
}
type GetApiV4GroupsIdAvatarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdBadgesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id               *string `json:"id,omitempty"`
		ImageUrl         *string `json:"image_url,omitempty"`
		Kind             *string `json:"kind,omitempty"`
		LinkUrl          *string `json:"link_url,omitempty"`
		Name             *string `json:"name,omitempty"`
		RenderedImageUrl *string `json:"rendered_image_url,omitempty"`
		RenderedLinkUrl  *string `json:"rendered_link_url,omitempty"`
	}
}
type PostApiV4GroupsIdBadgesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id               *string `json:"id,omitempty"`
		ImageUrl         *string `json:"image_url,omitempty"`
		Kind             *string `json:"kind,omitempty"`
		LinkUrl          *string `json:"link_url,omitempty"`
		Name             *string `json:"name,omitempty"`
		RenderedImageUrl *string `json:"rendered_image_url,omitempty"`
		RenderedLinkUrl  *string `json:"rendered_link_url,omitempty"`
	}
}
type GetApiV4GroupsIdBadgesRenderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ImageUrl         *string `json:"image_url,omitempty"`
		LinkUrl          *string `json:"link_url,omitempty"`
		Name             *string `json:"name,omitempty"`
		RenderedImageUrl *string `json:"rendered_image_url,omitempty"`
		RenderedLinkUrl  *string `json:"rendered_link_url,omitempty"`
	}
}
type DeleteApiV4GroupsIdBadgesBadgeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdBadgesBadgeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id               *string `json:"id,omitempty"`
		ImageUrl         *string `json:"image_url,omitempty"`
		Kind             *string `json:"kind,omitempty"`
		LinkUrl          *string `json:"link_url,omitempty"`
		Name             *string `json:"name,omitempty"`
		RenderedImageUrl *string `json:"rendered_image_url,omitempty"`
		RenderedLinkUrl  *string `json:"rendered_link_url,omitempty"`
	}
}
type PutApiV4GroupsIdBadgesBadgeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id               *string `json:"id,omitempty"`
		ImageUrl         *string `json:"image_url,omitempty"`
		Kind             *string `json:"kind,omitempty"`
		LinkUrl          *string `json:"link_url,omitempty"`
		Name             *string `json:"name,omitempty"`
		RenderedImageUrl *string `json:"rendered_image_url,omitempty"`
		RenderedLinkUrl  *string `json:"rendered_link_url,omitempty"`
	}
}
type GetApiV4GroupsIdBillableMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AccessLevel *string `json:"access_level,omitempty"`
		AvatarPath  *string `json:"avatar_path,omitempty"`
		AvatarUrl   *string `json:"avatar_url,omitempty"`
		CreatedAt   *string `json:"created_at,omitempty"`

		// CreatedBy API_Entities_UserBasic model
		CreatedBy *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"created_by,omitempty"`
		CustomAttributes *[]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		Email             *string `json:"email,omitempty"`
		ExpiresAt         *string `json:"expires_at,omitempty"`
		GroupSamlIdentity *struct {
			ExternUid      *string `json:"extern_uid,omitempty"`
			Provider       *string `json:"provider,omitempty"`
			SamlProviderId *string `json:"saml_provider_id,omitempty"`
		} `json:"group_saml_identity,omitempty"`
		Id          *int32  `json:"id,omitempty"`
		IsUsingSeat *string `json:"is_using_seat,omitempty"`
		Locked      *bool   `json:"locked,omitempty"`
		MemberRole  *struct {
			AdminCicdVariables         *bool                                                        `json:"admin_cicd_variables,omitempty"`
			AdminComplianceFramework   *bool                                                        `json:"admin_compliance_framework,omitempty"`
			AdminGroupMember           *bool                                                        `json:"admin_group_member,omitempty"`
			AdminIntegrations          *bool                                                        `json:"admin_integrations,omitempty"`
			AdminMergeRequest          *bool                                                        `json:"admin_merge_request,omitempty"`
			AdminProtectedBranch       *bool                                                        `json:"admin_protected_branch,omitempty"`
			AdminProtectedEnvironments *bool                                                        `json:"admin_protected_environments,omitempty"`
			AdminPushRules             *bool                                                        `json:"admin_push_rules,omitempty"`
			AdminRunners               *bool                                                        `json:"admin_runners,omitempty"`
			AdminSecurityTesting       *bool                                                        `json:"admin_security_testing,omitempty"`
			AdminTerraformState        *bool                                                        `json:"admin_terraform_state,omitempty"`
			AdminVulnerability         *bool                                                        `json:"admin_vulnerability,omitempty"`
			AdminWebHook               *bool                                                        `json:"admin_web_hook,omitempty"`
			ArchiveProject             *bool                                                        `json:"archive_project,omitempty"`
			BaseAccessLevel            *GetApiV4GroupsIdBillableMembers200MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
			Description                *string                                                      `json:"description,omitempty"`
			GroupId                    *int32                                                       `json:"group_id,omitempty"`
			Id                         *int32                                                       `json:"id,omitempty"`
			ManageDeployTokens         *bool                                                        `json:"manage_deploy_tokens,omitempty"`
			ManageGroupAccessTokens    *bool                                                        `json:"manage_group_access_tokens,omitempty"`
			ManageMergeRequestSettings *bool                                                        `json:"manage_merge_request_settings,omitempty"`
			ManageProjectAccessTokens  *bool                                                        `json:"manage_project_access_tokens,omitempty"`
			ManageProtectedTags        *bool                                                        `json:"manage_protected_tags,omitempty"`
			ManageSecurityPolicyLink   *bool                                                        `json:"manage_security_policy_link,omitempty"`
			Name                       *string                                                      `json:"name,omitempty"`
			ReadAdminCicd              *bool                                                        `json:"read_admin_cicd,omitempty"`
			ReadAdminMonitoring        *bool                                                        `json:"read_admin_monitoring,omitempty"`
			ReadAdminSubscription      *bool                                                        `json:"read_admin_subscription,omitempty"`
			ReadAdminUsers             *bool                                                        `json:"read_admin_users,omitempty"`
			ReadCode                   *bool                                                        `json:"read_code,omitempty"`
			ReadComplianceDashboard    *bool                                                        `json:"read_compliance_dashboard,omitempty"`
			ReadCrmContact             *bool                                                        `json:"read_crm_contact,omitempty"`
			ReadDependency             *bool                                                        `json:"read_dependency,omitempty"`
			ReadRunners                *bool                                                        `json:"read_runners,omitempty"`
			ReadVulnerability          *bool                                                        `json:"read_vulnerability,omitempty"`
			RemoveGroup                *bool                                                        `json:"remove_group,omitempty"`
			RemoveProject              *bool                                                        `json:"remove_project,omitempty"`
		} `json:"member_role,omitempty"`
		MembershipState *string `json:"membership_state,omitempty"`
		Name            *string `json:"name,omitempty"`
		Override        *string `json:"override,omitempty"`
		PublicEmail     *string `json:"public_email,omitempty"`
		State           *string `json:"state,omitempty"`
		Username        *string `json:"username,omitempty"`
		WebUrl          *string `json:"web_url,omitempty"`
	}
}
type GetApiV4GroupsIdBillableMembers200MemberRoleBaseAccessLevel int32
type DeleteApiV4GroupsIdBillableMembersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdBillableMembersUserIdIndirectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessLevel *struct {
			CustomRole   *string `json:"custom_role,omitempty"`
			IntegerValue *string `json:"integer_value,omitempty"`
			StringValue  *string `json:"string_value,omitempty"`
		} `json:"access_level,omitempty"`
		CreatedAt        *string `json:"created_at,omitempty"`
		ExpiresAt        *string `json:"expires_at,omitempty"`
		Id               *string `json:"id,omitempty"`
		SourceFullName   *string `json:"source_full_name,omitempty"`
		SourceId         *string `json:"source_id,omitempty"`
		SourceMembersUrl *string `json:"source_members_url,omitempty"`
	}
}
type GetApiV4GroupsIdBillableMembersUserIdMembershipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessLevel *struct {
			CustomRole   *string `json:"custom_role,omitempty"`
			IntegerValue *string `json:"integer_value,omitempty"`
			StringValue  *string `json:"string_value,omitempty"`
		} `json:"access_level,omitempty"`
		CreatedAt        *string `json:"created_at,omitempty"`
		ExpiresAt        *string `json:"expires_at,omitempty"`
		Id               *string `json:"id,omitempty"`
		SourceFullName   *string `json:"source_full_name,omitempty"`
		SourceId         *string `json:"source_id,omitempty"`
		SourceMembersUrl *string `json:"source_members_url,omitempty"`
	}
}
type GetApiV4GroupsIdClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		ClusterType       *string `json:"cluster_type,omitempty"`
		CreatedAt         *string `json:"created_at,omitempty"`
		Domain            *string `json:"domain,omitempty"`
		Enabled           *string `json:"enabled,omitempty"`
		EnvironmentScope  *string `json:"environment_scope,omitempty"`
		Id                *string `json:"id,omitempty"`
		Managed           *string `json:"managed,omitempty"`
		ManagementProject *struct {
			CreatedAt         *time.Time `json:"created_at,omitempty"`
			Description       *string    `json:"description,omitempty"`
			Id                *int32     `json:"id,omitempty"`
			Name              *string    `json:"name,omitempty"`
			NameWithNamespace *string    `json:"name_with_namespace,omitempty"`
			Path              *string    `json:"path,omitempty"`
			PathWithNamespace *string    `json:"path_with_namespace,omitempty"`
		} `json:"management_project,omitempty"`
		Name                    *string `json:"name,omitempty"`
		NamespacePerEnvironment *string `json:"namespace_per_environment,omitempty"`
		PlatformKubernetes      *struct {
			ApiUrl            *string `json:"api_url,omitempty"`
			AuthorizationType *string `json:"authorization_type,omitempty"`
			CaCert            *string `json:"ca_cert,omitempty"`
			Namespace         *string `json:"namespace,omitempty"`
		} `json:"platform_kubernetes,omitempty"`
		PlatformType *string `json:"platform_type,omitempty"`
		ProviderGcp  *struct {
			ClusterId    *string `json:"cluster_id,omitempty"`
			Endpoint     *string `json:"endpoint,omitempty"`
			GcpProjectId *string `json:"gcp_project_id,omitempty"`
			MachineType  *string `json:"machine_type,omitempty"`
			NumNodes     *string `json:"num_nodes,omitempty"`
			StatusName   *string `json:"status_name,omitempty"`
			Zone         *string `json:"zone,omitempty"`
		} `json:"provider_gcp,omitempty"`
		ProviderType *string `json:"provider_type,omitempty"`

		// User API_Entities_UserBasic model
		User *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"user,omitempty"`
	}
}
type PostApiV4GroupsIdClustersUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		ClusterType      *string `json:"cluster_type,omitempty"`
		CreatedAt        *string `json:"created_at,omitempty"`
		Domain           *string `json:"domain,omitempty"`
		Enabled          *string `json:"enabled,omitempty"`
		EnvironmentScope *string `json:"environment_scope,omitempty"`

		// Group API_Entities_BasicGroupDetails model
		Group *struct {
			Id     *string `json:"id,omitempty"`
			Name   *string `json:"name,omitempty"`
			WebUrl *string `json:"web_url,omitempty"`
		} `json:"group,omitempty"`
		Id                *string `json:"id,omitempty"`
		Managed           *string `json:"managed,omitempty"`
		ManagementProject *struct {
			CreatedAt         *time.Time `json:"created_at,omitempty"`
			Description       *string    `json:"description,omitempty"`
			Id                *int32     `json:"id,omitempty"`
			Name              *string    `json:"name,omitempty"`
			NameWithNamespace *string    `json:"name_with_namespace,omitempty"`
			Path              *string    `json:"path,omitempty"`
			PathWithNamespace *string    `json:"path_with_namespace,omitempty"`
		} `json:"management_project,omitempty"`
		Name                    *string `json:"name,omitempty"`
		NamespacePerEnvironment *string `json:"namespace_per_environment,omitempty"`
		PlatformKubernetes      *struct {
			ApiUrl            *string `json:"api_url,omitempty"`
			AuthorizationType *string `json:"authorization_type,omitempty"`
			CaCert            *string `json:"ca_cert,omitempty"`
			Namespace         *string `json:"namespace,omitempty"`
		} `json:"platform_kubernetes,omitempty"`
		PlatformType *string `json:"platform_type,omitempty"`
		ProviderGcp  *struct {
			ClusterId    *string `json:"cluster_id,omitempty"`
			Endpoint     *string `json:"endpoint,omitempty"`
			GcpProjectId *string `json:"gcp_project_id,omitempty"`
			MachineType  *string `json:"machine_type,omitempty"`
			NumNodes     *string `json:"num_nodes,omitempty"`
			StatusName   *string `json:"status_name,omitempty"`
			Zone         *string `json:"zone,omitempty"`
		} `json:"provider_gcp,omitempty"`
		ProviderType *string `json:"provider_type,omitempty"`

		// User API_Entities_UserBasic model
		User *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"user,omitempty"`
	}
}
type DeleteApiV4GroupsIdClustersClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *struct {
		ClusterType      *string `json:"cluster_type,omitempty"`
		CreatedAt        *string `json:"created_at,omitempty"`
		Domain           *string `json:"domain,omitempty"`
		Enabled          *string `json:"enabled,omitempty"`
		EnvironmentScope *string `json:"environment_scope,omitempty"`

		// Group API_Entities_BasicGroupDetails model
		Group *struct {
			Id     *string `json:"id,omitempty"`
			Name   *string `json:"name,omitempty"`
			WebUrl *string `json:"web_url,omitempty"`
		} `json:"group,omitempty"`
		Id                *string `json:"id,omitempty"`
		Managed           *string `json:"managed,omitempty"`
		ManagementProject *struct {
			CreatedAt         *time.Time `json:"created_at,omitempty"`
			Description       *string    `json:"description,omitempty"`
			Id                *int32     `json:"id,omitempty"`
			Name              *string    `json:"name,omitempty"`
			NameWithNamespace *string    `json:"name_with_namespace,omitempty"`
			Path              *string    `json:"path,omitempty"`
			PathWithNamespace *string    `json:"path_with_namespace,omitempty"`
		} `json:"management_project,omitempty"`
		Name                    *string `json:"name,omitempty"`
		NamespacePerEnvironment *string `json:"namespace_per_environment,omitempty"`
		PlatformKubernetes      *struct {
			ApiUrl            *string `json:"api_url,omitempty"`
			AuthorizationType *string `json:"authorization_type,omitempty"`
			CaCert            *string `json:"ca_cert,omitempty"`
			Namespace         *string `json:"namespace,omitempty"`
		} `json:"platform_kubernetes,omitempty"`
		PlatformType *string `json:"platform_type,omitempty"`
		ProviderGcp  *struct {
			ClusterId    *string `json:"cluster_id,omitempty"`
			Endpoint     *string `json:"endpoint,omitempty"`
			GcpProjectId *string `json:"gcp_project_id,omitempty"`
			MachineType  *string `json:"machine_type,omitempty"`
			NumNodes     *string `json:"num_nodes,omitempty"`
			StatusName   *string `json:"status_name,omitempty"`
			Zone         *string `json:"zone,omitempty"`
		} `json:"provider_gcp,omitempty"`
		ProviderType *string `json:"provider_type,omitempty"`

		// User API_Entities_UserBasic model
		User *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"user,omitempty"`
	}
}
type GetApiV4GroupsIdClustersClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ClusterType      *string `json:"cluster_type,omitempty"`
		CreatedAt        *string `json:"created_at,omitempty"`
		Domain           *string `json:"domain,omitempty"`
		Enabled          *string `json:"enabled,omitempty"`
		EnvironmentScope *string `json:"environment_scope,omitempty"`

		// Group API_Entities_BasicGroupDetails model
		Group *struct {
			Id     *string `json:"id,omitempty"`
			Name   *string `json:"name,omitempty"`
			WebUrl *string `json:"web_url,omitempty"`
		} `json:"group,omitempty"`
		Id                *string `json:"id,omitempty"`
		Managed           *string `json:"managed,omitempty"`
		ManagementProject *struct {
			CreatedAt         *time.Time `json:"created_at,omitempty"`
			Description       *string    `json:"description,omitempty"`
			Id                *int32     `json:"id,omitempty"`
			Name              *string    `json:"name,omitempty"`
			NameWithNamespace *string    `json:"name_with_namespace,omitempty"`
			Path              *string    `json:"path,omitempty"`
			PathWithNamespace *string    `json:"path_with_namespace,omitempty"`
		} `json:"management_project,omitempty"`
		Name                    *string `json:"name,omitempty"`
		NamespacePerEnvironment *string `json:"namespace_per_environment,omitempty"`
		PlatformKubernetes      *struct {
			ApiUrl            *string `json:"api_url,omitempty"`
			AuthorizationType *string `json:"authorization_type,omitempty"`
			CaCert            *string `json:"ca_cert,omitempty"`
			Namespace         *string `json:"namespace,omitempty"`
		} `json:"platform_kubernetes,omitempty"`
		PlatformType *string `json:"platform_type,omitempty"`
		ProviderGcp  *struct {
			ClusterId    *string `json:"cluster_id,omitempty"`
			Endpoint     *string `json:"endpoint,omitempty"`
			GcpProjectId *string `json:"gcp_project_id,omitempty"`
			MachineType  *string `json:"machine_type,omitempty"`
			NumNodes     *string `json:"num_nodes,omitempty"`
			StatusName   *string `json:"status_name,omitempty"`
			Zone         *string `json:"zone,omitempty"`
		} `json:"provider_gcp,omitempty"`
		ProviderType *string `json:"provider_type,omitempty"`

		// User API_Entities_UserBasic model
		User *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"user,omitempty"`
	}
}
type PutApiV4GroupsIdClustersClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ClusterType      *string `json:"cluster_type,omitempty"`
		CreatedAt        *string `json:"created_at,omitempty"`
		Domain           *string `json:"domain,omitempty"`
		Enabled          *string `json:"enabled,omitempty"`
		EnvironmentScope *string `json:"environment_scope,omitempty"`

		// Group API_Entities_BasicGroupDetails model
		Group *struct {
			Id     *string `json:"id,omitempty"`
			Name   *string `json:"name,omitempty"`
			WebUrl *string `json:"web_url,omitempty"`
		} `json:"group,omitempty"`
		Id                *string `json:"id,omitempty"`
		Managed           *string `json:"managed,omitempty"`
		ManagementProject *struct {
			CreatedAt         *time.Time `json:"created_at,omitempty"`
			Description       *string    `json:"description,omitempty"`
			Id                *int32     `json:"id,omitempty"`
			Name              *string    `json:"name,omitempty"`
			NameWithNamespace *string    `json:"name_with_namespace,omitempty"`
			Path              *string    `json:"path,omitempty"`
			PathWithNamespace *string    `json:"path_with_namespace,omitempty"`
		} `json:"management_project,omitempty"`
		Name                    *string `json:"name,omitempty"`
		NamespacePerEnvironment *string `json:"namespace_per_environment,omitempty"`
		PlatformKubernetes      *struct {
			ApiUrl            *string `json:"api_url,omitempty"`
			AuthorizationType *string `json:"authorization_type,omitempty"`
			CaCert            *string `json:"ca_cert,omitempty"`
			Namespace         *string `json:"namespace,omitempty"`
		} `json:"platform_kubernetes,omitempty"`
		PlatformType *string `json:"platform_type,omitempty"`
		ProviderGcp  *struct {
			ClusterId    *string `json:"cluster_id,omitempty"`
			Endpoint     *string `json:"endpoint,omitempty"`
			GcpProjectId *string `json:"gcp_project_id,omitempty"`
			MachineType  *string `json:"machine_type,omitempty"`
			NumNodes     *string `json:"num_nodes,omitempty"`
			StatusName   *string `json:"status_name,omitempty"`
			Zone         *string `json:"zone,omitempty"`
		} `json:"provider_gcp,omitempty"`
		ProviderType *string `json:"provider_type,omitempty"`

		// User API_Entities_UserBasic model
		User *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"user,omitempty"`
	}
}
type GetApiV4GroupsIdCustomAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Key   *string `json:"key,omitempty"`
		Value *string `json:"value,omitempty"`
	}
}
type DeleteApiV4GroupsIdCustomAttributesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdCustomAttributesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Key   *string `json:"key,omitempty"`
		Value *string `json:"value,omitempty"`
	}
}
type PutApiV4GroupsIdCustomAttributesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type DeleteApiV4GroupsIdDependencyProxyCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdDeployTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Expired   *bool          `json:"expired,omitempty"`
		ExpiresAt *time.Time     `json:"expires_at,omitempty"`
		Id        *int32         `json:"id,omitempty"`
		Name      *string        `json:"name,omitempty"`
		Revoked   *bool          `json:"revoked,omitempty"`
		Scopes    *[]interface{} `json:"scopes,omitempty"`
		Username  *string        `json:"username,omitempty"`
	}
}
type PostApiV4GroupsIdDeployTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Expired   *bool          `json:"expired,omitempty"`
		ExpiresAt *time.Time     `json:"expires_at,omitempty"`
		Id        *int32         `json:"id,omitempty"`
		Name      *string        `json:"name,omitempty"`
		Revoked   *bool          `json:"revoked,omitempty"`
		Scopes    *[]interface{} `json:"scopes,omitempty"`
		Token     *string        `json:"token,omitempty"`
		Username  *string        `json:"username,omitempty"`
	}
}
type DeleteApiV4GroupsIdDeployTokensTokenIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdDeployTokensTokenIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Expired   *bool          `json:"expired,omitempty"`
		ExpiresAt *time.Time     `json:"expires_at,omitempty"`
		Id        *int32         `json:"id,omitempty"`
		Name      *string        `json:"name,omitempty"`
		Revoked   *bool          `json:"revoked,omitempty"`
		Scopes    *[]interface{} `json:"scopes,omitempty"`
		Username  *string        `json:"username,omitempty"`
	}
}
type GetApiV4GroupsIdDescendantGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Archived          *bool   `json:"archived,omitempty"`
		AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
		AvatarUrl         *string `json:"avatar_url,omitempty"`
		CreatedAt         *string `json:"created_at,omitempty"`

		// CustomAttributes API_Entities_CustomAttribute model
		CustomAttributes *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		DefaultBranch                   *string `json:"default_branch,omitempty"`
		DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
		DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
		Description                     *string `json:"description,omitempty"`

		// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
		DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
		DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
		EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
		EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
		FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
		FullName               *string `json:"full_name,omitempty"`
		FullPath               *string `json:"full_path,omitempty"`
		Id                     *string `json:"id,omitempty"`
		LdapAccess             *string `json:"ldap_access,omitempty"`
		LdapCn                 *string `json:"ldap_cn,omitempty"`
		LdapGroupLinks         *struct {
			Cn           *string `json:"cn,omitempty"`
			Filter       *string `json:"filter,omitempty"`
			GroupAccess  *int32  `json:"group_access,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Provider     *string `json:"provider,omitempty"`
		} `json:"ldap_group_links,omitempty"`
		LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
		LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
		LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
		MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
		MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
		MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
		MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
		Name                           *string `json:"name,omitempty"`
		OrganizationId                 *string `json:"organization_id,omitempty"`
		ParentId                       *string `json:"parent_id,omitempty"`
		Path                           *string `json:"path,omitempty"`
		ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
		RepositoryStorage              *string `json:"repository_storage,omitempty"`
		RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
		RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
		RootStorageStatistics          *struct {
			// BuildArtifactsSize CI artifacts size in bytes.
			BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

			// ContainerRegistrySize container registry size in bytes.
			ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

			// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
			ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

			// DependencyProxySize Dependency Proxy sizes in bytes.
			DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

			// LfsObjectsSize LFS objects size in bytes.
			LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

			// PackagesSize Packages size in bytes.
			PackagesSize *int32 `json:"packages_size,omitempty"`

			// PipelineArtifactsSize CI pipeline artifacts size in bytes.
			PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

			// RepositorySize Git repository size in bytes.
			RepositorySize *int32 `json:"repository_size,omitempty"`

			// SnippetsSize Snippets size in bytes.
			SnippetsSize *int32 `json:"snippets_size,omitempty"`

			// StorageSize Total storage in bytes.
			StorageSize *int32 `json:"storage_size,omitempty"`

			// UploadsSize Uploads size in bytes.
			UploadsSize *int32 `json:"uploads_size,omitempty"`

			// WikiSize Wiki size in bytes.
			WikiSize *int32 `json:"wiki_size,omitempty"`
		} `json:"root_storage_statistics,omitempty"`
		SamlGroupLinks *struct {
			AccessLevel  *int32  `json:"access_level,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Name         *string `json:"name,omitempty"`
		} `json:"saml_group_links,omitempty"`
		ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
		SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
		Statistics           *struct {
			JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
			LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
			PackagesSize          *string `json:"packages_size,omitempty"`
			PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
			RepositorySize        *string `json:"repository_size,omitempty"`
			SnippetsSize          *string `json:"snippets_size,omitempty"`
			StorageSize           *string `json:"storage_size,omitempty"`
			UploadsSize           *string `json:"uploads_size,omitempty"`
			WikiSize              *string `json:"wiki_size,omitempty"`
		} `json:"statistics,omitempty"`
		SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
		TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
		Visibility                   *string `json:"visibility,omitempty"`
		WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
		WebUrl                       *string `json:"web_url,omitempty"`
		WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
	}
}
type GetApiV4GroupsIdEpicsEpicIidAwardEmojiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AwardableId   *int32     `json:"awardable_id,omitempty"`
		AwardableType *string    `json:"awardable_type,omitempty"`
		CreatedAt     *time.Time `json:"created_at,omitempty"`
		Id            *int32     `json:"id,omitempty"`
		Name          *string    `json:"name,omitempty"`
		UpdatedAt     *time.Time `json:"updated_at,omitempty"`
		Url           *string    `json:"url,omitempty"`

		// User API_Entities_UserBasic model
		User *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"user,omitempty"`
	}
}
type PostApiV4GroupsIdEpicsEpicIidAwardEmojiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		AwardableId   *int32     `json:"awardable_id,omitempty"`
		AwardableType *string    `json:"awardable_type,omitempty"`
		CreatedAt     *time.Time `json:"created_at,omitempty"`
		Id            *int32     `json:"id,omitempty"`
		Name          *string    `json:"name,omitempty"`
		UpdatedAt     *time.Time `json:"updated_at,omitempty"`
		Url           *string    `json:"url,omitempty"`

		// User API_Entities_UserBasic model
		User *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"user,omitempty"`
	}
}
type DeleteApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AwardableId   *int32     `json:"awardable_id,omitempty"`
		AwardableType *string    `json:"awardable_type,omitempty"`
		CreatedAt     *time.Time `json:"created_at,omitempty"`
		Id            *int32     `json:"id,omitempty"`
		Name          *string    `json:"name,omitempty"`
		UpdatedAt     *time.Time `json:"updated_at,omitempty"`
		Url           *string    `json:"url,omitempty"`

		// User API_Entities_UserBasic model
		User *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"user,omitempty"`
	}
}
type GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AwardableId   *int32     `json:"awardable_id,omitempty"`
		AwardableType *string    `json:"awardable_type,omitempty"`
		CreatedAt     *time.Time `json:"created_at,omitempty"`
		Id            *int32     `json:"id,omitempty"`
		Name          *string    `json:"name,omitempty"`
		UpdatedAt     *time.Time `json:"updated_at,omitempty"`
		Url           *string    `json:"url,omitempty"`

		// User API_Entities_UserBasic model
		User *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"user,omitempty"`
	}
}
type PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		AwardableId   *int32     `json:"awardable_id,omitempty"`
		AwardableType *string    `json:"awardable_type,omitempty"`
		CreatedAt     *time.Time `json:"created_at,omitempty"`
		Id            *int32     `json:"id,omitempty"`
		Name          *string    `json:"name,omitempty"`
		UpdatedAt     *time.Time `json:"updated_at,omitempty"`
		Url           *string    `json:"url,omitempty"`

		// User API_Entities_UserBasic model
		User *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"user,omitempty"`
	}
}
type DeleteApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AwardableId   *int32     `json:"awardable_id,omitempty"`
		AwardableType *string    `json:"awardable_type,omitempty"`
		CreatedAt     *time.Time `json:"created_at,omitempty"`
		Id            *int32     `json:"id,omitempty"`
		Name          *string    `json:"name,omitempty"`
		UpdatedAt     *time.Time `json:"updated_at,omitempty"`
		Url           *string    `json:"url,omitempty"`

		// User API_Entities_UserBasic model
		User *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"user,omitempty"`
	}
}
type PostApiV4GroupsIdExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdExportDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type PostApiV4GroupsIdExportRelationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdExportRelationsDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdExportRelationsStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Batched *bool `json:"batched,omitempty"`
		Batches *struct {
			BatchNumber  *int32                                                 `json:"batch_number,omitempty"`
			Error        *string                                                `json:"error,omitempty"`
			ObjectsCount *int32                                                 `json:"objects_count,omitempty"`
			Status       *GetApiV4GroupsIdExportRelationsStatus200BatchesStatus `json:"status,omitempty"`
			UpdatedAt    *time.Time                                             `json:"updated_at,omitempty"`
		} `json:"batches,omitempty"`
		BatchesCount      *int32                                          `json:"batches_count,omitempty"`
		Error             *string                                         `json:"error,omitempty"`
		Relation          *string                                         `json:"relation,omitempty"`
		Status            *GetApiV4GroupsIdExportRelationsStatus200Status `json:"status,omitempty"`
		TotalObjectsCount *int32                                          `json:"total_objects_count,omitempty"`
		UpdatedAt         *time.Time                                      `json:"updated_at,omitempty"`
	}
}
type GetApiV4GroupsIdExportRelationsStatus200BatchesStatus string
type GetApiV4GroupsIdExportRelationsStatus200Status string
type GetApiV4GroupsIdGroupsSharedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Archived          *bool   `json:"archived,omitempty"`
		AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
		AvatarUrl         *string `json:"avatar_url,omitempty"`
		CreatedAt         *string `json:"created_at,omitempty"`

		// CustomAttributes API_Entities_CustomAttribute model
		CustomAttributes *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		DefaultBranch                   *string `json:"default_branch,omitempty"`
		DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
		DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
		Description                     *string `json:"description,omitempty"`

		// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
		DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
		DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
		EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
		EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
		FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
		FullName               *string `json:"full_name,omitempty"`
		FullPath               *string `json:"full_path,omitempty"`
		Id                     *string `json:"id,omitempty"`
		LdapAccess             *string `json:"ldap_access,omitempty"`
		LdapCn                 *string `json:"ldap_cn,omitempty"`
		LdapGroupLinks         *struct {
			Cn           *string `json:"cn,omitempty"`
			Filter       *string `json:"filter,omitempty"`
			GroupAccess  *int32  `json:"group_access,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Provider     *string `json:"provider,omitempty"`
		} `json:"ldap_group_links,omitempty"`
		LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
		LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
		LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
		MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
		MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
		MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
		MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
		Name                           *string `json:"name,omitempty"`
		OrganizationId                 *string `json:"organization_id,omitempty"`
		ParentId                       *string `json:"parent_id,omitempty"`
		Path                           *string `json:"path,omitempty"`
		ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
		RepositoryStorage              *string `json:"repository_storage,omitempty"`
		RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
		RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
		RootStorageStatistics          *struct {
			// BuildArtifactsSize CI artifacts size in bytes.
			BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

			// ContainerRegistrySize container registry size in bytes.
			ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

			// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
			ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

			// DependencyProxySize Dependency Proxy sizes in bytes.
			DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

			// LfsObjectsSize LFS objects size in bytes.
			LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

			// PackagesSize Packages size in bytes.
			PackagesSize *int32 `json:"packages_size,omitempty"`

			// PipelineArtifactsSize CI pipeline artifacts size in bytes.
			PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

			// RepositorySize Git repository size in bytes.
			RepositorySize *int32 `json:"repository_size,omitempty"`

			// SnippetsSize Snippets size in bytes.
			SnippetsSize *int32 `json:"snippets_size,omitempty"`

			// StorageSize Total storage in bytes.
			StorageSize *int32 `json:"storage_size,omitempty"`

			// UploadsSize Uploads size in bytes.
			UploadsSize *int32 `json:"uploads_size,omitempty"`

			// WikiSize Wiki size in bytes.
			WikiSize *int32 `json:"wiki_size,omitempty"`
		} `json:"root_storage_statistics,omitempty"`
		SamlGroupLinks *struct {
			AccessLevel  *int32  `json:"access_level,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Name         *string `json:"name,omitempty"`
		} `json:"saml_group_links,omitempty"`
		ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
		SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
		Statistics           *struct {
			JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
			LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
			PackagesSize          *string `json:"packages_size,omitempty"`
			PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
			RepositorySize        *string `json:"repository_size,omitempty"`
			SnippetsSize          *string `json:"snippets_size,omitempty"`
			StorageSize           *string `json:"storage_size,omitempty"`
			UploadsSize           *string `json:"uploads_size,omitempty"`
			WikiSize              *string `json:"wiki_size,omitempty"`
		} `json:"statistics,omitempty"`
		SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
		TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
		Visibility                   *string `json:"visibility,omitempty"`
		WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
		WebUrl                       *string `json:"web_url,omitempty"`
		WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
	}
}
type GetApiV4GroupsIdIntegrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsAppleAppStoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsAsanaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsAssemblaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsBambooResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsBugzillaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsBuildkiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsCampfireResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsClickupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsConfluenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsCustomIssueTrackerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsDatadogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsDiffblueCoverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsDiscordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsDroneCiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsEmailsOnPushResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsEwmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsExternalWikiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsGitGuardianResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsGithubResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsGitlabSlackApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsGooglePlayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsHangoutsChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsHarborResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsIrkerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsJenkinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsJiraResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsJiraCloudAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsMatrixResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsMattermostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsMattermostSlashCommandsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsMicrosoftTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsMockCiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsMockMonitoringResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsPackagistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsPhorgeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsPipelinesEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsPivotaltrackerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsPumbleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsPushoverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsRedmineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsSlackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsSlackSlashCommandsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsSquashTmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsTeamcityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsTelegramResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsUnifyCircuitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsWebexTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsYoutrackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type PutApiV4GroupsIdIntegrationsZentaoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool      `json:"active,omitempty"`
		AlertEvents              *bool      `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool      `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time `json:"created_at,omitempty"`
		DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
		Id                       *int32     `json:"id,omitempty"`
		IncidentEvents           *bool      `json:"incident_events,omitempty"`
		Inherited                *bool      `json:"inherited,omitempty"`
		IssuesEvents             *bool      `json:"issues_events,omitempty"`
		JobEvents                *bool      `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool      `json:"note_events,omitempty"`
		PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
		PushEvents               *bool      `json:"push_events,omitempty"`
		Slug                     *int32     `json:"slug,omitempty"`
		TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
		Title                    *string    `json:"title,omitempty"`
		UpdatedAt                *time.Time `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
	}
}
type DeleteApiV4GroupsIdIntegrationsSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdIntegrationsSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active                   *bool                   `json:"active,omitempty"`
		AlertEvents              *bool                   `json:"alert_events,omitempty"`
		CommentOnEventEnabled    *bool                   `json:"comment_on_event_enabled,omitempty"`
		CommitEvents             *bool                   `json:"commit_events,omitempty"`
		ConfidentialIssuesEvents *bool                   `json:"confidential_issues_events,omitempty"`
		ConfidentialNoteEvents   *bool                   `json:"confidential_note_events,omitempty"`
		CreatedAt                *time.Time              `json:"created_at,omitempty"`
		DeploymentEvents         *bool                   `json:"deployment_events,omitempty"`
		Id                       *int32                  `json:"id,omitempty"`
		IncidentEvents           *bool                   `json:"incident_events,omitempty"`
		Inherited                *bool                   `json:"inherited,omitempty"`
		IssuesEvents             *bool                   `json:"issues_events,omitempty"`
		JobEvents                *bool                   `json:"job_events,omitempty"`
		MergeRequestsEvents      *bool                   `json:"merge_requests_events,omitempty"`
		NoteEvents               *bool                   `json:"note_events,omitempty"`
		PipelineEvents           *bool                   `json:"pipeline_events,omitempty"`
		Properties               *map[string]interface{} `json:"properties,omitempty"`
		PushEvents               *bool                   `json:"push_events,omitempty"`
		Slug                     *int32                  `json:"slug,omitempty"`
		TagPushEvents            *bool                   `json:"tag_push_events,omitempty"`
		Title                    *string                 `json:"title,omitempty"`
		UpdatedAt                *time.Time              `json:"updated_at,omitempty"`
		VulnerabilityEvents      *bool                   `json:"vulnerability_events,omitempty"`
		WikiPageEvents           *bool                   `json:"wiki_page_events,omitempty"`
	}
}
type GetApiV4GroupsIdInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AccessLevel   *string `json:"access_level,omitempty"`
		CreatedAt     *string `json:"created_at,omitempty"`
		CreatedByName *string `json:"created_by_name,omitempty"`
		ExpiresAt     *string `json:"expires_at,omitempty"`
		InviteEmail   *string `json:"invite_email,omitempty"`
		InviteToken   *string `json:"invite_token,omitempty"`
		UserName      *string `json:"user_name,omitempty"`
	}
}
type PostApiV4GroupsIdInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		AccessLevel   *string `json:"access_level,omitempty"`
		CreatedAt     *string `json:"created_at,omitempty"`
		CreatedByName *string `json:"created_by_name,omitempty"`
		ExpiresAt     *string `json:"expires_at,omitempty"`
		InviteEmail   *string `json:"invite_email,omitempty"`
		InviteToken   *string `json:"invite_token,omitempty"`
		UserName      *string `json:"user_name,omitempty"`
	}
}
type DeleteApiV4GroupsIdInvitationsEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type PutApiV4GroupsIdInvitationsEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessLevel   *string `json:"access_level,omitempty"`
		CreatedAt     *string `json:"created_at,omitempty"`
		CreatedByName *string `json:"created_by_name,omitempty"`
		ExpiresAt     *string `json:"expires_at,omitempty"`
		InviteEmail   *string `json:"invite_email,omitempty"`
		InviteToken   *string `json:"invite_token,omitempty"`
		UserName      *string `json:"user_name,omitempty"`
	}
}
type GetApiV4GroupsIdInvitedGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Archived          *bool   `json:"archived,omitempty"`
		AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
		AvatarUrl         *string `json:"avatar_url,omitempty"`
		CreatedAt         *string `json:"created_at,omitempty"`

		// CustomAttributes API_Entities_CustomAttribute model
		CustomAttributes *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		DefaultBranch                   *string `json:"default_branch,omitempty"`
		DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
		DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
		Description                     *string `json:"description,omitempty"`

		// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
		DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
		DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
		EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
		EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
		FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
		FullName               *string `json:"full_name,omitempty"`
		FullPath               *string `json:"full_path,omitempty"`
		Id                     *string `json:"id,omitempty"`
		LdapAccess             *string `json:"ldap_access,omitempty"`
		LdapCn                 *string `json:"ldap_cn,omitempty"`
		LdapGroupLinks         *struct {
			Cn           *string `json:"cn,omitempty"`
			Filter       *string `json:"filter,omitempty"`
			GroupAccess  *int32  `json:"group_access,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Provider     *string `json:"provider,omitempty"`
		} `json:"ldap_group_links,omitempty"`
		LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
		LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
		LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
		MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
		MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
		MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
		MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
		Name                           *string `json:"name,omitempty"`
		OrganizationId                 *string `json:"organization_id,omitempty"`
		ParentId                       *string `json:"parent_id,omitempty"`
		Path                           *string `json:"path,omitempty"`
		ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
		RepositoryStorage              *string `json:"repository_storage,omitempty"`
		RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
		RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
		RootStorageStatistics          *struct {
			// BuildArtifactsSize CI artifacts size in bytes.
			BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

			// ContainerRegistrySize container registry size in bytes.
			ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

			// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
			ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

			// DependencyProxySize Dependency Proxy sizes in bytes.
			DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

			// LfsObjectsSize LFS objects size in bytes.
			LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

			// PackagesSize Packages size in bytes.
			PackagesSize *int32 `json:"packages_size,omitempty"`

			// PipelineArtifactsSize CI pipeline artifacts size in bytes.
			PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

			// RepositorySize Git repository size in bytes.
			RepositorySize *int32 `json:"repository_size,omitempty"`

			// SnippetsSize Snippets size in bytes.
			SnippetsSize *int32 `json:"snippets_size,omitempty"`

			// StorageSize Total storage in bytes.
			StorageSize *int32 `json:"storage_size,omitempty"`

			// UploadsSize Uploads size in bytes.
			UploadsSize *int32 `json:"uploads_size,omitempty"`

			// WikiSize Wiki size in bytes.
			WikiSize *int32 `json:"wiki_size,omitempty"`
		} `json:"root_storage_statistics,omitempty"`
		SamlGroupLinks *struct {
			AccessLevel  *int32  `json:"access_level,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Name         *string `json:"name,omitempty"`
		} `json:"saml_group_links,omitempty"`
		ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
		SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
		Statistics           *struct {
			JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
			LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
			PackagesSize          *string `json:"packages_size,omitempty"`
			PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
			RepositorySize        *string `json:"repository_size,omitempty"`
			SnippetsSize          *string `json:"snippets_size,omitempty"`
			StorageSize           *string `json:"storage_size,omitempty"`
			UploadsSize           *string `json:"uploads_size,omitempty"`
			WikiSize              *string `json:"wiki_size,omitempty"`
		} `json:"statistics,omitempty"`
		SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
		TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
		Visibility                   *string `json:"visibility,omitempty"`
		WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
		WebUrl                       *string `json:"web_url,omitempty"`
		WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
	}
}
type GetApiV4GroupsIdIssuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *[]struct {
		Links *struct {
			AwardEmoji          *string `json:"award_emoji,omitempty"`
			ClosedAsDuplicateOf *string `json:"closed_as_duplicate_of,omitempty"`
			Notes               *string `json:"notes,omitempty"`
			Project             *string `json:"project,omitempty"`
			Self                *string `json:"self,omitempty"`
		} `json:"_links,omitempty"`
		Assignee *struct {
			AvatarUrl *string `json:"avatar_url,omitempty"`
			Id        *int    `json:"id,omitempty"`
			Name      *string `json:"name,omitempty"`
			State     *string `json:"state,omitempty"`
			Username  *string `json:"username,omitempty"`
			WebUrl    *string `json:"web_url,omitempty"`
		} `json:"assignee,omitempty"`
		Assignees *[]struct {
			AvatarUrl *string `json:"avatar_url,omitempty"`
			Id        *int    `json:"id,omitempty"`
			Name      *string `json:"name,omitempty"`
			State     *string `json:"state,omitempty"`
			Username  *string `json:"username,omitempty"`
			WebUrl    *string `json:"web_url,omitempty"`
		} `json:"assignees,omitempty"`
		Author *struct {
			AvatarUrl *string `json:"avatar_url,omitempty"`
			Id        *int    `json:"id,omitempty"`
			Name      *string `json:"name,omitempty"`
			State     *string `json:"state,omitempty"`
			Username  *string `json:"username,omitempty"`
			WebUrl    *string `json:"web_url,omitempty"`
		} `json:"author,omitempty"`
		ClosedAt           *string   `json:"closed_at,omitempty"`
		ClosedBy           *string   `json:"closed_by,omitempty"`
		Confidential       *bool     `json:"confidential,omitempty"`
		CreatedAt          *string   `json:"created_at,omitempty"`
		Description        *string   `json:"description,omitempty"`
		DiscussionLocked   *bool     `json:"discussion_locked,omitempty"`
		Downvotes          *int      `json:"downvotes,omitempty"`
		DueDate            *string   `json:"due_date,omitempty"`
		HasTasks           *bool     `json:"has_tasks,omitempty"`
		Id                 *int      `json:"id,omitempty"`
		Iid                *int      `json:"iid,omitempty"`
		Imported           *bool     `json:"imported,omitempty"`
		ImportedFrom       *string   `json:"imported_from,omitempty"`
		IssueType          *string   `json:"issue_type,omitempty"`
		Labels             *[]string `json:"labels,omitempty"`
		MergeRequestsCount *int      `json:"merge_requests_count,omitempty"`
		Milestone          *struct {
			CreatedAt   *string `json:"created_at,omitempty"`
			Description *string `json:"description,omitempty"`
			DueDate     *string `json:"due_date,omitempty"`
			Id          *int    `json:"id,omitempty"`
			Iid         *int    `json:"iid,omitempty"`
			ProjectId   *int    `json:"project_id,omitempty"`
			State       *string `json:"state,omitempty"`
			Title       *string `json:"title,omitempty"`
			UpdatedAt   *string `json:"updated_at,omitempty"`
		} `json:"milestone,omitempty"`
		ProjectId  *int `json:"project_id,omitempty"`
		References *struct {
			Full     *string `json:"full,omitempty"`
			Relative *string `json:"relative,omitempty"`
			Short    *string `json:"short,omitempty"`
		} `json:"references,omitempty"`
		Severity             *string `json:"severity,omitempty"`
		State                *string `json:"state,omitempty"`
		TaskCompletionStatus *struct {
			CompletedCount *int `json:"completed_count,omitempty"`
			Count          *int `json:"count,omitempty"`
		} `json:"task_completion_status,omitempty"`
		TaskStatus *string `json:"task_status,omitempty"`
		TimeStats  *struct {
			HumanTimeEstimate   *string `json:"human_time_estimate,omitempty"`
			HumanTotalTimeSpent *string `json:"human_total_time_spent,omitempty"`
			TimeEstimate        *int    `json:"time_estimate,omitempty"`
			TotalTimeSpent      *int    `json:"total_time_spent,omitempty"`
		} `json:"time_stats,omitempty"`
		Title          *string `json:"title,omitempty"`
		Type           *string `json:"type,omitempty"`
		UpdatedAt      *string `json:"updated_at,omitempty"`
		Upvotes        *int    `json:"upvotes,omitempty"`
		UserNotesCount *int    `json:"user_notes_count,omitempty"`
		WebUrl         *string `json:"web_url,omitempty"`
	}
}
type PostApiV4GroupsIdLdapSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AccessLevel *string `json:"access_level,omitempty"`
		AvatarPath  *string `json:"avatar_path,omitempty"`
		AvatarUrl   *string `json:"avatar_url,omitempty"`
		CreatedAt   *string `json:"created_at,omitempty"`

		// CreatedBy API_Entities_UserBasic model
		CreatedBy *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"created_by,omitempty"`
		CustomAttributes *[]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		Email             *string `json:"email,omitempty"`
		ExpiresAt         *string `json:"expires_at,omitempty"`
		GroupSamlIdentity *struct {
			ExternUid      *string `json:"extern_uid,omitempty"`
			Provider       *string `json:"provider,omitempty"`
			SamlProviderId *string `json:"saml_provider_id,omitempty"`
		} `json:"group_saml_identity,omitempty"`
		Id          *int32  `json:"id,omitempty"`
		IsUsingSeat *string `json:"is_using_seat,omitempty"`
		Locked      *bool   `json:"locked,omitempty"`
		MemberRole  *struct {
			AdminCicdVariables         *bool                                                `json:"admin_cicd_variables,omitempty"`
			AdminComplianceFramework   *bool                                                `json:"admin_compliance_framework,omitempty"`
			AdminGroupMember           *bool                                                `json:"admin_group_member,omitempty"`
			AdminIntegrations          *bool                                                `json:"admin_integrations,omitempty"`
			AdminMergeRequest          *bool                                                `json:"admin_merge_request,omitempty"`
			AdminProtectedBranch       *bool                                                `json:"admin_protected_branch,omitempty"`
			AdminProtectedEnvironments *bool                                                `json:"admin_protected_environments,omitempty"`
			AdminPushRules             *bool                                                `json:"admin_push_rules,omitempty"`
			AdminRunners               *bool                                                `json:"admin_runners,omitempty"`
			AdminSecurityTesting       *bool                                                `json:"admin_security_testing,omitempty"`
			AdminTerraformState        *bool                                                `json:"admin_terraform_state,omitempty"`
			AdminVulnerability         *bool                                                `json:"admin_vulnerability,omitempty"`
			AdminWebHook               *bool                                                `json:"admin_web_hook,omitempty"`
			ArchiveProject             *bool                                                `json:"archive_project,omitempty"`
			BaseAccessLevel            *GetApiV4GroupsIdMembers200MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
			Description                *string                                              `json:"description,omitempty"`
			GroupId                    *int32                                               `json:"group_id,omitempty"`
			Id                         *int32                                               `json:"id,omitempty"`
			ManageDeployTokens         *bool                                                `json:"manage_deploy_tokens,omitempty"`
			ManageGroupAccessTokens    *bool                                                `json:"manage_group_access_tokens,omitempty"`
			ManageMergeRequestSettings *bool                                                `json:"manage_merge_request_settings,omitempty"`
			ManageProjectAccessTokens  *bool                                                `json:"manage_project_access_tokens,omitempty"`
			ManageProtectedTags        *bool                                                `json:"manage_protected_tags,omitempty"`
			ManageSecurityPolicyLink   *bool                                                `json:"manage_security_policy_link,omitempty"`
			Name                       *string                                              `json:"name,omitempty"`
			ReadAdminCicd              *bool                                                `json:"read_admin_cicd,omitempty"`
			ReadAdminMonitoring        *bool                                                `json:"read_admin_monitoring,omitempty"`
			ReadAdminSubscription      *bool                                                `json:"read_admin_subscription,omitempty"`
			ReadAdminUsers             *bool                                                `json:"read_admin_users,omitempty"`
			ReadCode                   *bool                                                `json:"read_code,omitempty"`
			ReadComplianceDashboard    *bool                                                `json:"read_compliance_dashboard,omitempty"`
			ReadCrmContact             *bool                                                `json:"read_crm_contact,omitempty"`
			ReadDependency             *bool                                                `json:"read_dependency,omitempty"`
			ReadRunners                *bool                                                `json:"read_runners,omitempty"`
			ReadVulnerability          *bool                                                `json:"read_vulnerability,omitempty"`
			RemoveGroup                *bool                                                `json:"remove_group,omitempty"`
			RemoveProject              *bool                                                `json:"remove_project,omitempty"`
		} `json:"member_role,omitempty"`
		MembershipState *string `json:"membership_state,omitempty"`
		Name            *string `json:"name,omitempty"`
		Override        *string `json:"override,omitempty"`
		PublicEmail     *string `json:"public_email,omitempty"`
		State           *string `json:"state,omitempty"`
		Username        *string `json:"username,omitempty"`
		WebUrl          *string `json:"web_url,omitempty"`
	}
}
type GetApiV4GroupsIdMembers200MemberRoleBaseAccessLevel int32
type PostApiV4GroupsIdMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		AccessLevel *string `json:"access_level,omitempty"`
		AvatarPath  *string `json:"avatar_path,omitempty"`
		AvatarUrl   *string `json:"avatar_url,omitempty"`
		CreatedAt   *string `json:"created_at,omitempty"`

		// CreatedBy API_Entities_UserBasic model
		CreatedBy *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"created_by,omitempty"`
		CustomAttributes *[]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		Email             *string `json:"email,omitempty"`
		ExpiresAt         *string `json:"expires_at,omitempty"`
		GroupSamlIdentity *struct {
			ExternUid      *string `json:"extern_uid,omitempty"`
			Provider       *string `json:"provider,omitempty"`
			SamlProviderId *string `json:"saml_provider_id,omitempty"`
		} `json:"group_saml_identity,omitempty"`
		Id          *int32  `json:"id,omitempty"`
		IsUsingSeat *string `json:"is_using_seat,omitempty"`
		Locked      *bool   `json:"locked,omitempty"`
		MemberRole  *struct {
			AdminCicdVariables         *bool                                                 `json:"admin_cicd_variables,omitempty"`
			AdminComplianceFramework   *bool                                                 `json:"admin_compliance_framework,omitempty"`
			AdminGroupMember           *bool                                                 `json:"admin_group_member,omitempty"`
			AdminIntegrations          *bool                                                 `json:"admin_integrations,omitempty"`
			AdminMergeRequest          *bool                                                 `json:"admin_merge_request,omitempty"`
			AdminProtectedBranch       *bool                                                 `json:"admin_protected_branch,omitempty"`
			AdminProtectedEnvironments *bool                                                 `json:"admin_protected_environments,omitempty"`
			AdminPushRules             *bool                                                 `json:"admin_push_rules,omitempty"`
			AdminRunners               *bool                                                 `json:"admin_runners,omitempty"`
			AdminSecurityTesting       *bool                                                 `json:"admin_security_testing,omitempty"`
			AdminTerraformState        *bool                                                 `json:"admin_terraform_state,omitempty"`
			AdminVulnerability         *bool                                                 `json:"admin_vulnerability,omitempty"`
			AdminWebHook               *bool                                                 `json:"admin_web_hook,omitempty"`
			ArchiveProject             *bool                                                 `json:"archive_project,omitempty"`
			BaseAccessLevel            *PostApiV4GroupsIdMembers201MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
			Description                *string                                               `json:"description,omitempty"`
			GroupId                    *int32                                                `json:"group_id,omitempty"`
			Id                         *int32                                                `json:"id,omitempty"`
			ManageDeployTokens         *bool                                                 `json:"manage_deploy_tokens,omitempty"`
			ManageGroupAccessTokens    *bool                                                 `json:"manage_group_access_tokens,omitempty"`
			ManageMergeRequestSettings *bool                                                 `json:"manage_merge_request_settings,omitempty"`
			ManageProjectAccessTokens  *bool                                                 `json:"manage_project_access_tokens,omitempty"`
			ManageProtectedTags        *bool                                                 `json:"manage_protected_tags,omitempty"`
			ManageSecurityPolicyLink   *bool                                                 `json:"manage_security_policy_link,omitempty"`
			Name                       *string                                               `json:"name,omitempty"`
			ReadAdminCicd              *bool                                                 `json:"read_admin_cicd,omitempty"`
			ReadAdminMonitoring        *bool                                                 `json:"read_admin_monitoring,omitempty"`
			ReadAdminSubscription      *bool                                                 `json:"read_admin_subscription,omitempty"`
			ReadAdminUsers             *bool                                                 `json:"read_admin_users,omitempty"`
			ReadCode                   *bool                                                 `json:"read_code,omitempty"`
			ReadComplianceDashboard    *bool                                                 `json:"read_compliance_dashboard,omitempty"`
			ReadCrmContact             *bool                                                 `json:"read_crm_contact,omitempty"`
			ReadDependency             *bool                                                 `json:"read_dependency,omitempty"`
			ReadRunners                *bool                                                 `json:"read_runners,omitempty"`
			ReadVulnerability          *bool                                                 `json:"read_vulnerability,omitempty"`
			RemoveGroup                *bool                                                 `json:"remove_group,omitempty"`
			RemoveProject              *bool                                                 `json:"remove_project,omitempty"`
		} `json:"member_role,omitempty"`
		MembershipState *string `json:"membership_state,omitempty"`
		Name            *string `json:"name,omitempty"`
		Override        *string `json:"override,omitempty"`
		PublicEmail     *string `json:"public_email,omitempty"`
		State           *string `json:"state,omitempty"`
		Username        *string `json:"username,omitempty"`
		WebUrl          *string `json:"web_url,omitempty"`
	}
}
type PostApiV4GroupsIdMembers201MemberRoleBaseAccessLevel int32
type GetApiV4GroupsIdMembersAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AccessLevel *string `json:"access_level,omitempty"`
		AvatarPath  *string `json:"avatar_path,omitempty"`
		AvatarUrl   *string `json:"avatar_url,omitempty"`
		CreatedAt   *string `json:"created_at,omitempty"`

		// CreatedBy API_Entities_UserBasic model
		CreatedBy *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"created_by,omitempty"`
		CustomAttributes *[]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		Email             *string `json:"email,omitempty"`
		ExpiresAt         *string `json:"expires_at,omitempty"`
		GroupSamlIdentity *struct {
			ExternUid      *string `json:"extern_uid,omitempty"`
			Provider       *string `json:"provider,omitempty"`
			SamlProviderId *string `json:"saml_provider_id,omitempty"`
		} `json:"group_saml_identity,omitempty"`
		Id          *int32  `json:"id,omitempty"`
		IsUsingSeat *string `json:"is_using_seat,omitempty"`
		Locked      *bool   `json:"locked,omitempty"`
		MemberRole  *struct {
			AdminCicdVariables         *bool                                                   `json:"admin_cicd_variables,omitempty"`
			AdminComplianceFramework   *bool                                                   `json:"admin_compliance_framework,omitempty"`
			AdminGroupMember           *bool                                                   `json:"admin_group_member,omitempty"`
			AdminIntegrations          *bool                                                   `json:"admin_integrations,omitempty"`
			AdminMergeRequest          *bool                                                   `json:"admin_merge_request,omitempty"`
			AdminProtectedBranch       *bool                                                   `json:"admin_protected_branch,omitempty"`
			AdminProtectedEnvironments *bool                                                   `json:"admin_protected_environments,omitempty"`
			AdminPushRules             *bool                                                   `json:"admin_push_rules,omitempty"`
			AdminRunners               *bool                                                   `json:"admin_runners,omitempty"`
			AdminSecurityTesting       *bool                                                   `json:"admin_security_testing,omitempty"`
			AdminTerraformState        *bool                                                   `json:"admin_terraform_state,omitempty"`
			AdminVulnerability         *bool                                                   `json:"admin_vulnerability,omitempty"`
			AdminWebHook               *bool                                                   `json:"admin_web_hook,omitempty"`
			ArchiveProject             *bool                                                   `json:"archive_project,omitempty"`
			BaseAccessLevel            *GetApiV4GroupsIdMembersAll200MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
			Description                *string                                                 `json:"description,omitempty"`
			GroupId                    *int32                                                  `json:"group_id,omitempty"`
			Id                         *int32                                                  `json:"id,omitempty"`
			ManageDeployTokens         *bool                                                   `json:"manage_deploy_tokens,omitempty"`
			ManageGroupAccessTokens    *bool                                                   `json:"manage_group_access_tokens,omitempty"`
			ManageMergeRequestSettings *bool                                                   `json:"manage_merge_request_settings,omitempty"`
			ManageProjectAccessTokens  *bool                                                   `json:"manage_project_access_tokens,omitempty"`
			ManageProtectedTags        *bool                                                   `json:"manage_protected_tags,omitempty"`
			ManageSecurityPolicyLink   *bool                                                   `json:"manage_security_policy_link,omitempty"`
			Name                       *string                                                 `json:"name,omitempty"`
			ReadAdminCicd              *bool                                                   `json:"read_admin_cicd,omitempty"`
			ReadAdminMonitoring        *bool                                                   `json:"read_admin_monitoring,omitempty"`
			ReadAdminSubscription      *bool                                                   `json:"read_admin_subscription,omitempty"`
			ReadAdminUsers             *bool                                                   `json:"read_admin_users,omitempty"`
			ReadCode                   *bool                                                   `json:"read_code,omitempty"`
			ReadComplianceDashboard    *bool                                                   `json:"read_compliance_dashboard,omitempty"`
			ReadCrmContact             *bool                                                   `json:"read_crm_contact,omitempty"`
			ReadDependency             *bool                                                   `json:"read_dependency,omitempty"`
			ReadRunners                *bool                                                   `json:"read_runners,omitempty"`
			ReadVulnerability          *bool                                                   `json:"read_vulnerability,omitempty"`
			RemoveGroup                *bool                                                   `json:"remove_group,omitempty"`
			RemoveProject              *bool                                                   `json:"remove_project,omitempty"`
		} `json:"member_role,omitempty"`
		MembershipState *string `json:"membership_state,omitempty"`
		Name            *string `json:"name,omitempty"`
		Override        *string `json:"override,omitempty"`
		PublicEmail     *string `json:"public_email,omitempty"`
		State           *string `json:"state,omitempty"`
		Username        *string `json:"username,omitempty"`
		WebUrl          *string `json:"web_url,omitempty"`
	}
}
type GetApiV4GroupsIdMembersAll200MemberRoleBaseAccessLevel int32
type GetApiV4GroupsIdMembersAllUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessLevel *string `json:"access_level,omitempty"`
		AvatarPath  *string `json:"avatar_path,omitempty"`
		AvatarUrl   *string `json:"avatar_url,omitempty"`
		CreatedAt   *string `json:"created_at,omitempty"`

		// CreatedBy API_Entities_UserBasic model
		CreatedBy *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"created_by,omitempty"`
		CustomAttributes *[]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		Email             *string `json:"email,omitempty"`
		ExpiresAt         *string `json:"expires_at,omitempty"`
		GroupSamlIdentity *struct {
			ExternUid      *string `json:"extern_uid,omitempty"`
			Provider       *string `json:"provider,omitempty"`
			SamlProviderId *string `json:"saml_provider_id,omitempty"`
		} `json:"group_saml_identity,omitempty"`
		Id          *int32  `json:"id,omitempty"`
		IsUsingSeat *string `json:"is_using_seat,omitempty"`
		Locked      *bool   `json:"locked,omitempty"`
		MemberRole  *struct {
			AdminCicdVariables         *bool                                                         `json:"admin_cicd_variables,omitempty"`
			AdminComplianceFramework   *bool                                                         `json:"admin_compliance_framework,omitempty"`
			AdminGroupMember           *bool                                                         `json:"admin_group_member,omitempty"`
			AdminIntegrations          *bool                                                         `json:"admin_integrations,omitempty"`
			AdminMergeRequest          *bool                                                         `json:"admin_merge_request,omitempty"`
			AdminProtectedBranch       *bool                                                         `json:"admin_protected_branch,omitempty"`
			AdminProtectedEnvironments *bool                                                         `json:"admin_protected_environments,omitempty"`
			AdminPushRules             *bool                                                         `json:"admin_push_rules,omitempty"`
			AdminRunners               *bool                                                         `json:"admin_runners,omitempty"`
			AdminSecurityTesting       *bool                                                         `json:"admin_security_testing,omitempty"`
			AdminTerraformState        *bool                                                         `json:"admin_terraform_state,omitempty"`
			AdminVulnerability         *bool                                                         `json:"admin_vulnerability,omitempty"`
			AdminWebHook               *bool                                                         `json:"admin_web_hook,omitempty"`
			ArchiveProject             *bool                                                         `json:"archive_project,omitempty"`
			BaseAccessLevel            *GetApiV4GroupsIdMembersAllUserId200MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
			Description                *string                                                       `json:"description,omitempty"`
			GroupId                    *int32                                                        `json:"group_id,omitempty"`
			Id                         *int32                                                        `json:"id,omitempty"`
			ManageDeployTokens         *bool                                                         `json:"manage_deploy_tokens,omitempty"`
			ManageGroupAccessTokens    *bool                                                         `json:"manage_group_access_tokens,omitempty"`
			ManageMergeRequestSettings *bool                                                         `json:"manage_merge_request_settings,omitempty"`
			ManageProjectAccessTokens  *bool                                                         `json:"manage_project_access_tokens,omitempty"`
			ManageProtectedTags        *bool                                                         `json:"manage_protected_tags,omitempty"`
			ManageSecurityPolicyLink   *bool                                                         `json:"manage_security_policy_link,omitempty"`
			Name                       *string                                                       `json:"name,omitempty"`
			ReadAdminCicd              *bool                                                         `json:"read_admin_cicd,omitempty"`
			ReadAdminMonitoring        *bool                                                         `json:"read_admin_monitoring,omitempty"`
			ReadAdminSubscription      *bool                                                         `json:"read_admin_subscription,omitempty"`
			ReadAdminUsers             *bool                                                         `json:"read_admin_users,omitempty"`
			ReadCode                   *bool                                                         `json:"read_code,omitempty"`
			ReadComplianceDashboard    *bool                                                         `json:"read_compliance_dashboard,omitempty"`
			ReadCrmContact             *bool                                                         `json:"read_crm_contact,omitempty"`
			ReadDependency             *bool                                                         `json:"read_dependency,omitempty"`
			ReadRunners                *bool                                                         `json:"read_runners,omitempty"`
			ReadVulnerability          *bool                                                         `json:"read_vulnerability,omitempty"`
			RemoveGroup                *bool                                                         `json:"remove_group,omitempty"`
			RemoveProject              *bool                                                         `json:"remove_project,omitempty"`
		} `json:"member_role,omitempty"`
		MembershipState *string `json:"membership_state,omitempty"`
		Name            *string `json:"name,omitempty"`
		Override        *string `json:"override,omitempty"`
		PublicEmail     *string `json:"public_email,omitempty"`
		State           *string `json:"state,omitempty"`
		Username        *string `json:"username,omitempty"`
		WebUrl          *string `json:"web_url,omitempty"`
	}
}
type GetApiV4GroupsIdMembersAllUserId200MemberRoleBaseAccessLevel int32
type PostApiV4GroupsIdMembersApproveAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type PutApiV4GroupsIdMembersMemberIdApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type DeleteApiV4GroupsIdMembersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdMembersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessLevel *string `json:"access_level,omitempty"`
		AvatarPath  *string `json:"avatar_path,omitempty"`
		AvatarUrl   *string `json:"avatar_url,omitempty"`
		CreatedAt   *string `json:"created_at,omitempty"`

		// CreatedBy API_Entities_UserBasic model
		CreatedBy *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"created_by,omitempty"`
		CustomAttributes *[]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		Email             *string `json:"email,omitempty"`
		ExpiresAt         *string `json:"expires_at,omitempty"`
		GroupSamlIdentity *struct {
			ExternUid      *string `json:"extern_uid,omitempty"`
			Provider       *string `json:"provider,omitempty"`
			SamlProviderId *string `json:"saml_provider_id,omitempty"`
		} `json:"group_saml_identity,omitempty"`
		Id          *int32  `json:"id,omitempty"`
		IsUsingSeat *string `json:"is_using_seat,omitempty"`
		Locked      *bool   `json:"locked,omitempty"`
		MemberRole  *struct {
			AdminCicdVariables         *bool                                                      `json:"admin_cicd_variables,omitempty"`
			AdminComplianceFramework   *bool                                                      `json:"admin_compliance_framework,omitempty"`
			AdminGroupMember           *bool                                                      `json:"admin_group_member,omitempty"`
			AdminIntegrations          *bool                                                      `json:"admin_integrations,omitempty"`
			AdminMergeRequest          *bool                                                      `json:"admin_merge_request,omitempty"`
			AdminProtectedBranch       *bool                                                      `json:"admin_protected_branch,omitempty"`
			AdminProtectedEnvironments *bool                                                      `json:"admin_protected_environments,omitempty"`
			AdminPushRules             *bool                                                      `json:"admin_push_rules,omitempty"`
			AdminRunners               *bool                                                      `json:"admin_runners,omitempty"`
			AdminSecurityTesting       *bool                                                      `json:"admin_security_testing,omitempty"`
			AdminTerraformState        *bool                                                      `json:"admin_terraform_state,omitempty"`
			AdminVulnerability         *bool                                                      `json:"admin_vulnerability,omitempty"`
			AdminWebHook               *bool                                                      `json:"admin_web_hook,omitempty"`
			ArchiveProject             *bool                                                      `json:"archive_project,omitempty"`
			BaseAccessLevel            *GetApiV4GroupsIdMembersUserId200MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
			Description                *string                                                    `json:"description,omitempty"`
			GroupId                    *int32                                                     `json:"group_id,omitempty"`
			Id                         *int32                                                     `json:"id,omitempty"`
			ManageDeployTokens         *bool                                                      `json:"manage_deploy_tokens,omitempty"`
			ManageGroupAccessTokens    *bool                                                      `json:"manage_group_access_tokens,omitempty"`
			ManageMergeRequestSettings *bool                                                      `json:"manage_merge_request_settings,omitempty"`
			ManageProjectAccessTokens  *bool                                                      `json:"manage_project_access_tokens,omitempty"`
			ManageProtectedTags        *bool                                                      `json:"manage_protected_tags,omitempty"`
			ManageSecurityPolicyLink   *bool                                                      `json:"manage_security_policy_link,omitempty"`
			Name                       *string                                                    `json:"name,omitempty"`
			ReadAdminCicd              *bool                                                      `json:"read_admin_cicd,omitempty"`
			ReadAdminMonitoring        *bool                                                      `json:"read_admin_monitoring,omitempty"`
			ReadAdminSubscription      *bool                                                      `json:"read_admin_subscription,omitempty"`
			ReadAdminUsers             *bool                                                      `json:"read_admin_users,omitempty"`
			ReadCode                   *bool                                                      `json:"read_code,omitempty"`
			ReadComplianceDashboard    *bool                                                      `json:"read_compliance_dashboard,omitempty"`
			ReadCrmContact             *bool                                                      `json:"read_crm_contact,omitempty"`
			ReadDependency             *bool                                                      `json:"read_dependency,omitempty"`
			ReadRunners                *bool                                                      `json:"read_runners,omitempty"`
			ReadVulnerability          *bool                                                      `json:"read_vulnerability,omitempty"`
			RemoveGroup                *bool                                                      `json:"remove_group,omitempty"`
			RemoveProject              *bool                                                      `json:"remove_project,omitempty"`
		} `json:"member_role,omitempty"`
		MembershipState *string `json:"membership_state,omitempty"`
		Name            *string `json:"name,omitempty"`
		Override        *string `json:"override,omitempty"`
		PublicEmail     *string `json:"public_email,omitempty"`
		State           *string `json:"state,omitempty"`
		Username        *string `json:"username,omitempty"`
		WebUrl          *string `json:"web_url,omitempty"`
	}
}
type GetApiV4GroupsIdMembersUserId200MemberRoleBaseAccessLevel int32
type PutApiV4GroupsIdMembersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessLevel *string `json:"access_level,omitempty"`
		AvatarPath  *string `json:"avatar_path,omitempty"`
		AvatarUrl   *string `json:"avatar_url,omitempty"`
		CreatedAt   *string `json:"created_at,omitempty"`

		// CreatedBy API_Entities_UserBasic model
		CreatedBy *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"created_by,omitempty"`
		CustomAttributes *[]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		Email             *string `json:"email,omitempty"`
		ExpiresAt         *string `json:"expires_at,omitempty"`
		GroupSamlIdentity *struct {
			ExternUid      *string `json:"extern_uid,omitempty"`
			Provider       *string `json:"provider,omitempty"`
			SamlProviderId *string `json:"saml_provider_id,omitempty"`
		} `json:"group_saml_identity,omitempty"`
		Id          *int32  `json:"id,omitempty"`
		IsUsingSeat *string `json:"is_using_seat,omitempty"`
		Locked      *bool   `json:"locked,omitempty"`
		MemberRole  *struct {
			AdminCicdVariables         *bool                                                      `json:"admin_cicd_variables,omitempty"`
			AdminComplianceFramework   *bool                                                      `json:"admin_compliance_framework,omitempty"`
			AdminGroupMember           *bool                                                      `json:"admin_group_member,omitempty"`
			AdminIntegrations          *bool                                                      `json:"admin_integrations,omitempty"`
			AdminMergeRequest          *bool                                                      `json:"admin_merge_request,omitempty"`
			AdminProtectedBranch       *bool                                                      `json:"admin_protected_branch,omitempty"`
			AdminProtectedEnvironments *bool                                                      `json:"admin_protected_environments,omitempty"`
			AdminPushRules             *bool                                                      `json:"admin_push_rules,omitempty"`
			AdminRunners               *bool                                                      `json:"admin_runners,omitempty"`
			AdminSecurityTesting       *bool                                                      `json:"admin_security_testing,omitempty"`
			AdminTerraformState        *bool                                                      `json:"admin_terraform_state,omitempty"`
			AdminVulnerability         *bool                                                      `json:"admin_vulnerability,omitempty"`
			AdminWebHook               *bool                                                      `json:"admin_web_hook,omitempty"`
			ArchiveProject             *bool                                                      `json:"archive_project,omitempty"`
			BaseAccessLevel            *PutApiV4GroupsIdMembersUserId200MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
			Description                *string                                                    `json:"description,omitempty"`
			GroupId                    *int32                                                     `json:"group_id,omitempty"`
			Id                         *int32                                                     `json:"id,omitempty"`
			ManageDeployTokens         *bool                                                      `json:"manage_deploy_tokens,omitempty"`
			ManageGroupAccessTokens    *bool                                                      `json:"manage_group_access_tokens,omitempty"`
			ManageMergeRequestSettings *bool                                                      `json:"manage_merge_request_settings,omitempty"`
			ManageProjectAccessTokens  *bool                                                      `json:"manage_project_access_tokens,omitempty"`
			ManageProtectedTags        *bool                                                      `json:"manage_protected_tags,omitempty"`
			ManageSecurityPolicyLink   *bool                                                      `json:"manage_security_policy_link,omitempty"`
			Name                       *string                                                    `json:"name,omitempty"`
			ReadAdminCicd              *bool                                                      `json:"read_admin_cicd,omitempty"`
			ReadAdminMonitoring        *bool                                                      `json:"read_admin_monitoring,omitempty"`
			ReadAdminSubscription      *bool                                                      `json:"read_admin_subscription,omitempty"`
			ReadAdminUsers             *bool                                                      `json:"read_admin_users,omitempty"`
			ReadCode                   *bool                                                      `json:"read_code,omitempty"`
			ReadComplianceDashboard    *bool                                                      `json:"read_compliance_dashboard,omitempty"`
			ReadCrmContact             *bool                                                      `json:"read_crm_contact,omitempty"`
			ReadDependency             *bool                                                      `json:"read_dependency,omitempty"`
			ReadRunners                *bool                                                      `json:"read_runners,omitempty"`
			ReadVulnerability          *bool                                                      `json:"read_vulnerability,omitempty"`
			RemoveGroup                *bool                                                      `json:"remove_group,omitempty"`
			RemoveProject              *bool                                                      `json:"remove_project,omitempty"`
		} `json:"member_role,omitempty"`
		MembershipState *string `json:"membership_state,omitempty"`
		Name            *string `json:"name,omitempty"`
		Override        *string `json:"override,omitempty"`
		PublicEmail     *string `json:"public_email,omitempty"`
		State           *string `json:"state,omitempty"`
		Username        *string `json:"username,omitempty"`
		WebUrl          *string `json:"web_url,omitempty"`
	}
}
type PutApiV4GroupsIdMembersUserId200MemberRoleBaseAccessLevel int32
type DeleteApiV4GroupsIdMembersUserIdOverrideResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessLevel *string `json:"access_level,omitempty"`
		AvatarPath  *string `json:"avatar_path,omitempty"`
		AvatarUrl   *string `json:"avatar_url,omitempty"`
		CreatedAt   *string `json:"created_at,omitempty"`

		// CreatedBy API_Entities_UserBasic model
		CreatedBy *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"created_by,omitempty"`
		CustomAttributes *[]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		Email             *string `json:"email,omitempty"`
		ExpiresAt         *string `json:"expires_at,omitempty"`
		GroupSamlIdentity *struct {
			ExternUid      *string `json:"extern_uid,omitempty"`
			Provider       *string `json:"provider,omitempty"`
			SamlProviderId *string `json:"saml_provider_id,omitempty"`
		} `json:"group_saml_identity,omitempty"`
		Id          *int32  `json:"id,omitempty"`
		IsUsingSeat *string `json:"is_using_seat,omitempty"`
		Locked      *bool   `json:"locked,omitempty"`
		MemberRole  *struct {
			AdminCicdVariables         *bool                                                                 `json:"admin_cicd_variables,omitempty"`
			AdminComplianceFramework   *bool                                                                 `json:"admin_compliance_framework,omitempty"`
			AdminGroupMember           *bool                                                                 `json:"admin_group_member,omitempty"`
			AdminIntegrations          *bool                                                                 `json:"admin_integrations,omitempty"`
			AdminMergeRequest          *bool                                                                 `json:"admin_merge_request,omitempty"`
			AdminProtectedBranch       *bool                                                                 `json:"admin_protected_branch,omitempty"`
			AdminProtectedEnvironments *bool                                                                 `json:"admin_protected_environments,omitempty"`
			AdminPushRules             *bool                                                                 `json:"admin_push_rules,omitempty"`
			AdminRunners               *bool                                                                 `json:"admin_runners,omitempty"`
			AdminSecurityTesting       *bool                                                                 `json:"admin_security_testing,omitempty"`
			AdminTerraformState        *bool                                                                 `json:"admin_terraform_state,omitempty"`
			AdminVulnerability         *bool                                                                 `json:"admin_vulnerability,omitempty"`
			AdminWebHook               *bool                                                                 `json:"admin_web_hook,omitempty"`
			ArchiveProject             *bool                                                                 `json:"archive_project,omitempty"`
			BaseAccessLevel            *DeleteApiV4GroupsIdMembersUserIdOverride200MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
			Description                *string                                                               `json:"description,omitempty"`
			GroupId                    *int32                                                                `json:"group_id,omitempty"`
			Id                         *int32                                                                `json:"id,omitempty"`
			ManageDeployTokens         *bool                                                                 `json:"manage_deploy_tokens,omitempty"`
			ManageGroupAccessTokens    *bool                                                                 `json:"manage_group_access_tokens,omitempty"`
			ManageMergeRequestSettings *bool                                                                 `json:"manage_merge_request_settings,omitempty"`
			ManageProjectAccessTokens  *bool                                                                 `json:"manage_project_access_tokens,omitempty"`
			ManageProtectedTags        *bool                                                                 `json:"manage_protected_tags,omitempty"`
			ManageSecurityPolicyLink   *bool                                                                 `json:"manage_security_policy_link,omitempty"`
			Name                       *string                                                               `json:"name,omitempty"`
			ReadAdminCicd              *bool                                                                 `json:"read_admin_cicd,omitempty"`
			ReadAdminMonitoring        *bool                                                                 `json:"read_admin_monitoring,omitempty"`
			ReadAdminSubscription      *bool                                                                 `json:"read_admin_subscription,omitempty"`
			ReadAdminUsers             *bool                                                                 `json:"read_admin_users,omitempty"`
			ReadCode                   *bool                                                                 `json:"read_code,omitempty"`
			ReadComplianceDashboard    *bool                                                                 `json:"read_compliance_dashboard,omitempty"`
			ReadCrmContact             *bool                                                                 `json:"read_crm_contact,omitempty"`
			ReadDependency             *bool                                                                 `json:"read_dependency,omitempty"`
			ReadRunners                *bool                                                                 `json:"read_runners,omitempty"`
			ReadVulnerability          *bool                                                                 `json:"read_vulnerability,omitempty"`
			RemoveGroup                *bool                                                                 `json:"remove_group,omitempty"`
			RemoveProject              *bool                                                                 `json:"remove_project,omitempty"`
		} `json:"member_role,omitempty"`
		MembershipState *string `json:"membership_state,omitempty"`
		Name            *string `json:"name,omitempty"`
		Override        *string `json:"override,omitempty"`
		PublicEmail     *string `json:"public_email,omitempty"`
		State           *string `json:"state,omitempty"`
		Username        *string `json:"username,omitempty"`
		WebUrl          *string `json:"web_url,omitempty"`
	}
}
type DeleteApiV4GroupsIdMembersUserIdOverride200MemberRoleBaseAccessLevel int32
type PostApiV4GroupsIdMembersUserIdOverrideResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		AccessLevel *string `json:"access_level,omitempty"`
		AvatarPath  *string `json:"avatar_path,omitempty"`
		AvatarUrl   *string `json:"avatar_url,omitempty"`
		CreatedAt   *string `json:"created_at,omitempty"`

		// CreatedBy API_Entities_UserBasic model
		CreatedBy *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"created_by,omitempty"`
		CustomAttributes *[]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		Email             *string `json:"email,omitempty"`
		ExpiresAt         *string `json:"expires_at,omitempty"`
		GroupSamlIdentity *struct {
			ExternUid      *string `json:"extern_uid,omitempty"`
			Provider       *string `json:"provider,omitempty"`
			SamlProviderId *string `json:"saml_provider_id,omitempty"`
		} `json:"group_saml_identity,omitempty"`
		Id          *int32  `json:"id,omitempty"`
		IsUsingSeat *string `json:"is_using_seat,omitempty"`
		Locked      *bool   `json:"locked,omitempty"`
		MemberRole  *struct {
			AdminCicdVariables         *bool                                                               `json:"admin_cicd_variables,omitempty"`
			AdminComplianceFramework   *bool                                                               `json:"admin_compliance_framework,omitempty"`
			AdminGroupMember           *bool                                                               `json:"admin_group_member,omitempty"`
			AdminIntegrations          *bool                                                               `json:"admin_integrations,omitempty"`
			AdminMergeRequest          *bool                                                               `json:"admin_merge_request,omitempty"`
			AdminProtectedBranch       *bool                                                               `json:"admin_protected_branch,omitempty"`
			AdminProtectedEnvironments *bool                                                               `json:"admin_protected_environments,omitempty"`
			AdminPushRules             *bool                                                               `json:"admin_push_rules,omitempty"`
			AdminRunners               *bool                                                               `json:"admin_runners,omitempty"`
			AdminSecurityTesting       *bool                                                               `json:"admin_security_testing,omitempty"`
			AdminTerraformState        *bool                                                               `json:"admin_terraform_state,omitempty"`
			AdminVulnerability         *bool                                                               `json:"admin_vulnerability,omitempty"`
			AdminWebHook               *bool                                                               `json:"admin_web_hook,omitempty"`
			ArchiveProject             *bool                                                               `json:"archive_project,omitempty"`
			BaseAccessLevel            *PostApiV4GroupsIdMembersUserIdOverride201MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
			Description                *string                                                             `json:"description,omitempty"`
			GroupId                    *int32                                                              `json:"group_id,omitempty"`
			Id                         *int32                                                              `json:"id,omitempty"`
			ManageDeployTokens         *bool                                                               `json:"manage_deploy_tokens,omitempty"`
			ManageGroupAccessTokens    *bool                                                               `json:"manage_group_access_tokens,omitempty"`
			ManageMergeRequestSettings *bool                                                               `json:"manage_merge_request_settings,omitempty"`
			ManageProjectAccessTokens  *bool                                                               `json:"manage_project_access_tokens,omitempty"`
			ManageProtectedTags        *bool                                                               `json:"manage_protected_tags,omitempty"`
			ManageSecurityPolicyLink   *bool                                                               `json:"manage_security_policy_link,omitempty"`
			Name                       *string                                                             `json:"name,omitempty"`
			ReadAdminCicd              *bool                                                               `json:"read_admin_cicd,omitempty"`
			ReadAdminMonitoring        *bool                                                               `json:"read_admin_monitoring,omitempty"`
			ReadAdminSubscription      *bool                                                               `json:"read_admin_subscription,omitempty"`
			ReadAdminUsers             *bool                                                               `json:"read_admin_users,omitempty"`
			ReadCode                   *bool                                                               `json:"read_code,omitempty"`
			ReadComplianceDashboard    *bool                                                               `json:"read_compliance_dashboard,omitempty"`
			ReadCrmContact             *bool                                                               `json:"read_crm_contact,omitempty"`
			ReadDependency             *bool                                                               `json:"read_dependency,omitempty"`
			ReadRunners                *bool                                                               `json:"read_runners,omitempty"`
			ReadVulnerability          *bool                                                               `json:"read_vulnerability,omitempty"`
			RemoveGroup                *bool                                                               `json:"remove_group,omitempty"`
			RemoveProject              *bool                                                               `json:"remove_project,omitempty"`
		} `json:"member_role,omitempty"`
		MembershipState *string `json:"membership_state,omitempty"`
		Name            *string `json:"name,omitempty"`
		Override        *string `json:"override,omitempty"`
		PublicEmail     *string `json:"public_email,omitempty"`
		State           *string `json:"state,omitempty"`
		Username        *string `json:"username,omitempty"`
		WebUrl          *string `json:"web_url,omitempty"`
	}
}
type PostApiV4GroupsIdMembersUserIdOverride201MemberRoleBaseAccessLevel int32
type PutApiV4GroupsIdMembersUserIdStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdMergeRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AllowCollaboration    *string `json:"allow_collaboration,omitempty"`
		AllowMaintainerToPush *string `json:"allow_maintainer_to_push,omitempty"`
		ApprovalsBeforeMerge  *string `json:"approvals_before_merge,omitempty"`

		// Assignee API_Entities_UserBasic model
		Assignee *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"assignee,omitempty"`

		// Assignees API_Entities_UserBasic model
		Assignees *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"assignees,omitempty"`

		// Author API_Entities_UserBasic model
		Author *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"author,omitempty"`
		BlockingDiscussionsResolved *string `json:"blocking_discussions_resolved,omitempty"`
		ClosedAt                    *string `json:"closed_at,omitempty"`

		// ClosedBy API_Entities_UserBasic model
		ClosedBy *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"closed_by,omitempty"`
		CreatedAt               *time.Time `json:"created_at,omitempty"`
		Description             *string    `json:"description,omitempty"`
		DescriptionHtml         *string    `json:"description_html,omitempty"`
		DetailedMergeStatus     *string    `json:"detailed_merge_status,omitempty"`
		DiscussionLocked        *string    `json:"discussion_locked,omitempty"`
		Downvotes               *string    `json:"downvotes,omitempty"`
		Draft                   *string    `json:"draft,omitempty"`
		ForceRemoveSourceBranch *string    `json:"force_remove_source_branch,omitempty"`
		HasConflicts            *string    `json:"has_conflicts,omitempty"`
		Id                      *int32     `json:"id,omitempty"`
		Iid                     *int32     `json:"iid,omitempty"`
		Imported                *string    `json:"imported,omitempty"`
		ImportedFrom            *string    `json:"imported_from,omitempty"`
		Labels                  *string    `json:"labels,omitempty"`
		MergeAfter              *string    `json:"merge_after,omitempty"`
		MergeCommitSha          *string    `json:"merge_commit_sha,omitempty"`
		MergeStatus             *string    `json:"merge_status,omitempty"`

		// MergeUser API_Entities_UserBasic model
		MergeUser *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"merge_user,omitempty"`
		MergeWhenPipelineSucceeds *string `json:"merge_when_pipeline_succeeds,omitempty"`
		MergedAt                  *string `json:"merged_at,omitempty"`

		// MergedBy API_Entities_UserBasic model
		MergedBy *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"merged_by,omitempty"`
		Milestone *struct {
			CreatedAt   *string `json:"created_at,omitempty"`
			Description *string `json:"description,omitempty"`
			DueDate     *string `json:"due_date,omitempty"`
			Expired     *string `json:"expired,omitempty"`
			GroupId     *string `json:"group_id,omitempty"`
			Id          *string `json:"id,omitempty"`
			Iid         *string `json:"iid,omitempty"`
			ProjectId   *string `json:"project_id,omitempty"`
			StartDate   *string `json:"start_date,omitempty"`
			State       *string `json:"state,omitempty"`
			Title       *string `json:"title,omitempty"`
			UpdatedAt   *string `json:"updated_at,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"milestone,omitempty"`
		PreparedAt *string `json:"prepared_at,omitempty"`
		ProjectId  *int32  `json:"project_id,omitempty"`
		Reference  *string `json:"reference,omitempty"`
		References *struct {
			Full     *string `json:"full,omitempty"`
			Relative *string `json:"relative,omitempty"`
			Short    *string `json:"short,omitempty"`
		} `json:"references,omitempty"`

		// Reviewers API_Entities_UserBasic model
		Reviewers *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"reviewers,omitempty"`
		Sha                      *string `json:"sha,omitempty"`
		ShouldRemoveSourceBranch *string `json:"should_remove_source_branch,omitempty"`
		SourceBranch             *string `json:"source_branch,omitempty"`
		SourceProjectId          *string `json:"source_project_id,omitempty"`
		Squash                   *string `json:"squash,omitempty"`
		SquashCommitSha          *string `json:"squash_commit_sha,omitempty"`
		SquashOnMerge            *string `json:"squash_on_merge,omitempty"`
		State                    *string `json:"state,omitempty"`
		TargetBranch             *string `json:"target_branch,omitempty"`
		TargetProjectId          *string `json:"target_project_id,omitempty"`
		TaskCompletionStatus     *string `json:"task_completion_status,omitempty"`

		// TimeStats API_Entities_IssuableTimeStats model
		TimeStats *struct {
			HumanTimeEstimate   *string `json:"human_time_estimate,omitempty"`
			HumanTotalTimeSpent *string `json:"human_total_time_spent,omitempty"`
			TimeEstimate        *int32  `json:"time_estimate,omitempty"`
			TotalTimeSpent      *int32  `json:"total_time_spent,omitempty"`
		} `json:"time_stats,omitempty"`
		Title          *string    `json:"title,omitempty"`
		TitleHtml      *string    `json:"title_html,omitempty"`
		UpdatedAt      *time.Time `json:"updated_at,omitempty"`
		Upvotes        *string    `json:"upvotes,omitempty"`
		UserNotesCount *string    `json:"user_notes_count,omitempty"`
		WebUrl         *string    `json:"web_url,omitempty"`
		WorkInProgress *string    `json:"work_in_progress,omitempty"`
	}
}
type GetApiV4GroupsIdPackagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Links *struct {
			DeleteApiPath *string `json:"delete_api_path,omitempty"`
			WebPath       *string `json:"web_path,omitempty"`
		} `json:"_links,omitempty"`
		ConanPackageName *string    `json:"conan_package_name,omitempty"`
		CreatedAt        *time.Time `json:"created_at,omitempty"`
		Id               *int32     `json:"id,omitempty"`
		LastDownloadedAt *time.Time `json:"last_downloaded_at,omitempty"`
		Name             *string    `json:"name,omitempty"`
		PackageType      *string    `json:"package_type,omitempty"`

		// Pipeline API_Entities_Package_Pipeline model
		Pipeline *struct {
			CreatedAt *time.Time `json:"created_at,omitempty"`
			Id        *int32     `json:"id,omitempty"`
			Iid       *int32     `json:"iid,omitempty"`
			ProjectId *int32     `json:"project_id,omitempty"`
			Ref       *string    `json:"ref,omitempty"`
			Sha       *string    `json:"sha,omitempty"`
			Source    *string    `json:"source,omitempty"`
			Status    *string    `json:"status,omitempty"`
			UpdatedAt *time.Time `json:"updated_at,omitempty"`

			// User API_Entities_UserBasic model
			User *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"user,omitempty"`
			WebUrl *string `json:"web_url,omitempty"`
		} `json:"pipeline,omitempty"`

		// Pipelines API_Entities_Package_Pipeline model
		Pipelines *struct {
			CreatedAt *time.Time `json:"created_at,omitempty"`
			Id        *int32     `json:"id,omitempty"`
			Iid       *int32     `json:"iid,omitempty"`
			ProjectId *int32     `json:"project_id,omitempty"`
			Ref       *string    `json:"ref,omitempty"`
			Sha       *string    `json:"sha,omitempty"`
			Source    *string    `json:"source,omitempty"`
			Status    *string    `json:"status,omitempty"`
			UpdatedAt *time.Time `json:"updated_at,omitempty"`

			// User API_Entities_UserBasic model
			User *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"user,omitempty"`
			WebUrl *string `json:"web_url,omitempty"`
		} `json:"pipelines,omitempty"`
		ProjectId   *int32  `json:"project_id,omitempty"`
		ProjectPath *string `json:"project_path,omitempty"`
		Status      *string `json:"status,omitempty"`
		Tags        *string `json:"tags,omitempty"`
		Version     *string `json:"version,omitempty"`
		Versions    *struct {
			CreatedAt *string `json:"created_at,omitempty"`
			Id        *string `json:"id,omitempty"`

			// Pipeline API_Entities_Package_Pipeline model
			Pipeline *struct {
				CreatedAt *time.Time `json:"created_at,omitempty"`
				Id        *int32     `json:"id,omitempty"`
				Iid       *int32     `json:"iid,omitempty"`
				ProjectId *int32     `json:"project_id,omitempty"`
				Ref       *string    `json:"ref,omitempty"`
				Sha       *string    `json:"sha,omitempty"`
				Source    *string    `json:"source,omitempty"`
				Status    *string    `json:"status,omitempty"`
				UpdatedAt *time.Time `json:"updated_at,omitempty"`

				// User API_Entities_UserBasic model
				User *struct {
					AvatarPath       *string `json:"avatar_path,omitempty"`
					AvatarUrl        *string `json:"avatar_url,omitempty"`
					CustomAttributes *[]struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"custom_attributes,omitempty"`
					Id          *int32  `json:"id,omitempty"`
					Locked      *bool   `json:"locked,omitempty"`
					Name        *string `json:"name,omitempty"`
					PublicEmail *string `json:"public_email,omitempty"`
					State       *string `json:"state,omitempty"`
					Username    *string `json:"username,omitempty"`
					WebUrl      *string `json:"web_url,omitempty"`
				} `json:"user,omitempty"`
				WebUrl *string `json:"web_url,omitempty"`
			} `json:"pipeline,omitempty"`
			Tags    *string `json:"tags,omitempty"`
			Version *string `json:"version,omitempty"`
		} `json:"versions,omitempty"`
	}
}
type GetApiV4GroupsIdPendingMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdPlaceholderReassignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type PostApiV4GroupsIdPlaceholderReassignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type PostApiV4GroupsIdPlaceholderReassignmentsAuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Links *struct {
			ClusterAgents *string `json:"cluster_agents,omitempty"`
			Events        *string `json:"events,omitempty"`
			Issues        *string `json:"issues,omitempty"`
			Labels        *string `json:"labels,omitempty"`
			Members       *string `json:"members,omitempty"`
			MergeRequests *string `json:"merge_requests,omitempty"`
			RepoBranches  *string `json:"repo_branches,omitempty"`
			Self          *string `json:"self,omitempty"`
		} `json:"_links,omitempty"`
		AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
		AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
		AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
		ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
		Archived                                 *bool     `json:"archived,omitempty"`
		AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
		AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
		AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
		AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
		AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
		AvatarUrl                                *string   `json:"avatar_url,omitempty"`
		BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
		BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
		BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
		CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
		CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
		CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
		CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
		CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
		CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
		CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
		CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
		CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
		CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
		CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
		CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
		CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
		ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
		ContainerExpirationPolicy                *struct {
			Cadence       *string `json:"cadence,omitempty"`
			Enabled       *string `json:"enabled,omitempty"`
			KeepN         *string `json:"keep_n,omitempty"`
			NameRegex     *string `json:"name_regex,omitempty"`
			NameRegexKeep *string `json:"name_regex_keep,omitempty"`
			NextRunAt     *string `json:"next_run_at,omitempty"`
			OlderThan     *string `json:"older_than,omitempty"`
		} `json:"container_expiration_policy,omitempty"`
		ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
		ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
		ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
		CreatedAt                    *time.Time `json:"created_at,omitempty"`
		CreatorId                    *int32     `json:"creator_id,omitempty"`

		// CustomAttributes API_Entities_CustomAttribute model
		CustomAttributes *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		DefaultBranch                            *string `json:"default_branch,omitempty"`
		Description                              *string `json:"description,omitempty"`
		DescriptionHtml                          *string `json:"description_html,omitempty"`
		EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
		EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
		EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
		EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
		EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
		ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
		FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

		// ForkedFromProject API_Entities_BasicProjectDetails model
		ForkedFromProject *struct {
			AvatarUrl *string    `json:"avatar_url,omitempty"`
			CreatedAt *time.Time `json:"created_at,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch  *string    `json:"default_branch,omitempty"`
			Description    *string    `json:"description,omitempty"`
			ForksCount     *int32     `json:"forks_count,omitempty"`
			HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
			Id             *int32     `json:"id,omitempty"`
			LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
			License        *struct {
				HtmlUrl   *string `json:"html_url,omitempty"`
				Key       *string `json:"key,omitempty"`
				Name      *string `json:"name,omitempty"`
				Nickname  *string `json:"nickname,omitempty"`
				SourceUrl *string `json:"source_url,omitempty"`
			} `json:"license,omitempty"`
			LicenseUrl        *string `json:"license_url,omitempty"`
			Name              *string `json:"name,omitempty"`
			NameWithNamespace *string `json:"name_with_namespace,omitempty"`
			Namespace         *struct {
				AvatarUrl *string `json:"avatar_url,omitempty"`
				FullPath  *string `json:"full_path,omitempty"`
				Id        *int32  `json:"id,omitempty"`
				Kind      *string `json:"kind,omitempty"`
				Name      *string `json:"name,omitempty"`
				ParentId  *int32  `json:"parent_id,omitempty"`
				Path      *string `json:"path,omitempty"`
				WebUrl    *string `json:"web_url,omitempty"`
			} `json:"namespace,omitempty"`
			Path              *string   `json:"path,omitempty"`
			PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
			ReadmeUrl         *string   `json:"readme_url,omitempty"`
			RepositoryStorage *string   `json:"repository_storage,omitempty"`
			SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
			StarCount         *int32    `json:"star_count,omitempty"`
			TagList           *[]string `json:"tag_list,omitempty"`
			Topics            *[]string `json:"topics,omitempty"`
			WebUrl            *string   `json:"web_url,omitempty"`
		} `json:"forked_from_project,omitempty"`
		ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
		ForksCount                *int32     `json:"forks_count,omitempty"`
		GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
		HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
		Id                        *int32     `json:"id,omitempty"`
		ImportError               *string    `json:"import_error,omitempty"`
		ImportStatus              *string    `json:"import_status,omitempty"`
		ImportType                *string    `json:"import_type,omitempty"`
		ImportUrl                 *string    `json:"import_url,omitempty"`
		InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
		IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
		IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
		IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
		IssuesTemplate            *string    `json:"issues_template,omitempty"`
		JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
		KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
		LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
		LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
		License                   *struct {
			HtmlUrl   *string `json:"html_url,omitempty"`
			Key       *string `json:"key,omitempty"`
			Name      *string `json:"name,omitempty"`
			Nickname  *string `json:"nickname,omitempty"`
			SourceUrl *string `json:"source_url,omitempty"`
		} `json:"license,omitempty"`
		LicenseUrl                       *string `json:"license_url,omitempty"`
		MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
		MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
		MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
		MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
		MergeMethod                      *string `json:"merge_method,omitempty"`
		MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
		MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
		MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
		MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
		MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
		MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
		MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
		Mirror                           *string `json:"mirror,omitempty"`
		MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
		MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
		MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
		ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
		ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
		MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
		MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
		Name                             *string `json:"name,omitempty"`
		NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
		Namespace                        *struct {
			AvatarUrl *string `json:"avatar_url,omitempty"`
			FullPath  *string `json:"full_path,omitempty"`
			Id        *int32  `json:"id,omitempty"`
			Kind      *string `json:"kind,omitempty"`
			Name      *string `json:"name,omitempty"`
			ParentId  *int32  `json:"parent_id,omitempty"`
			Path      *string `json:"path,omitempty"`
			WebUrl    *string `json:"web_url,omitempty"`
		} `json:"namespace,omitempty"`
		OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
		OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
		OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
		OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
		OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

		// Owner API_Entities_UserBasic model
		Owner *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"owner,omitempty"`
		PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
		PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
		Path                             *string   `json:"path,omitempty"`
		PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
		PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
		PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
		PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
		PublicJobs                       *bool     `json:"public_jobs,omitempty"`
		ReadmeUrl                        *string   `json:"readme_url,omitempty"`
		ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
		RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
		RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
		RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
		RepositoryStorage                *string   `json:"repository_storage,omitempty"`
		RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
		RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
		RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
		ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
		RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
		RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
		RunnersToken                     *string   `json:"runners_token,omitempty"`
		SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
		SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
		SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
		ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
		ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
		SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
		SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
		SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
		SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
		SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
		SquashOption                     *string   `json:"squash_option,omitempty"`
		SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
		StarCount                        *int32    `json:"star_count,omitempty"`
		Statistics                       *struct {
			CommitCount           *string `json:"commit_count,omitempty"`
			ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
			JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
			LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
			PackagesSize          *string `json:"packages_size,omitempty"`
			PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
			RepositorySize        *string `json:"repository_size,omitempty"`
			SnippetsSize          *string `json:"snippets_size,omitempty"`
			StorageSize           *string `json:"storage_size,omitempty"`
			UploadsSize           *string `json:"uploads_size,omitempty"`
			WikiSize              *string `json:"wiki_size,omitempty"`
		} `json:"statistics,omitempty"`
		SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
		TagList                                *[]string  `json:"tag_list,omitempty"`
		Topics                                 *[]string  `json:"topics,omitempty"`
		UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
		Visibility                             *string    `json:"visibility,omitempty"`
		WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
		WebUrl                                 *string    `json:"web_url,omitempty"`
		WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
		WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
	}
}
type GetApiV4GroupsIdProjectsSharedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Links *struct {
			ClusterAgents *string `json:"cluster_agents,omitempty"`
			Events        *string `json:"events,omitempty"`
			Issues        *string `json:"issues,omitempty"`
			Labels        *string `json:"labels,omitempty"`
			Members       *string `json:"members,omitempty"`
			MergeRequests *string `json:"merge_requests,omitempty"`
			RepoBranches  *string `json:"repo_branches,omitempty"`
			Self          *string `json:"self,omitempty"`
		} `json:"_links,omitempty"`
		AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
		AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
		AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
		ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
		Archived                                 *bool     `json:"archived,omitempty"`
		AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
		AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
		AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
		AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
		AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
		AvatarUrl                                *string   `json:"avatar_url,omitempty"`
		BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
		BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
		BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
		CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
		CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
		CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
		CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
		CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
		CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
		CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
		CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
		CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
		CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
		CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
		CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
		CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
		ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
		ContainerExpirationPolicy                *struct {
			Cadence       *string `json:"cadence,omitempty"`
			Enabled       *string `json:"enabled,omitempty"`
			KeepN         *string `json:"keep_n,omitempty"`
			NameRegex     *string `json:"name_regex,omitempty"`
			NameRegexKeep *string `json:"name_regex_keep,omitempty"`
			NextRunAt     *string `json:"next_run_at,omitempty"`
			OlderThan     *string `json:"older_than,omitempty"`
		} `json:"container_expiration_policy,omitempty"`
		ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
		ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
		ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
		CreatedAt                    *time.Time `json:"created_at,omitempty"`
		CreatorId                    *int32     `json:"creator_id,omitempty"`

		// CustomAttributes API_Entities_CustomAttribute model
		CustomAttributes *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		DefaultBranch                            *string `json:"default_branch,omitempty"`
		Description                              *string `json:"description,omitempty"`
		DescriptionHtml                          *string `json:"description_html,omitempty"`
		EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
		EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
		EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
		EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
		EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
		ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
		FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

		// ForkedFromProject API_Entities_BasicProjectDetails model
		ForkedFromProject *struct {
			AvatarUrl *string    `json:"avatar_url,omitempty"`
			CreatedAt *time.Time `json:"created_at,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch  *string    `json:"default_branch,omitempty"`
			Description    *string    `json:"description,omitempty"`
			ForksCount     *int32     `json:"forks_count,omitempty"`
			HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
			Id             *int32     `json:"id,omitempty"`
			LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
			License        *struct {
				HtmlUrl   *string `json:"html_url,omitempty"`
				Key       *string `json:"key,omitempty"`
				Name      *string `json:"name,omitempty"`
				Nickname  *string `json:"nickname,omitempty"`
				SourceUrl *string `json:"source_url,omitempty"`
			} `json:"license,omitempty"`
			LicenseUrl        *string `json:"license_url,omitempty"`
			Name              *string `json:"name,omitempty"`
			NameWithNamespace *string `json:"name_with_namespace,omitempty"`
			Namespace         *struct {
				AvatarUrl *string `json:"avatar_url,omitempty"`
				FullPath  *string `json:"full_path,omitempty"`
				Id        *int32  `json:"id,omitempty"`
				Kind      *string `json:"kind,omitempty"`
				Name      *string `json:"name,omitempty"`
				ParentId  *int32  `json:"parent_id,omitempty"`
				Path      *string `json:"path,omitempty"`
				WebUrl    *string `json:"web_url,omitempty"`
			} `json:"namespace,omitempty"`
			Path              *string   `json:"path,omitempty"`
			PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
			ReadmeUrl         *string   `json:"readme_url,omitempty"`
			RepositoryStorage *string   `json:"repository_storage,omitempty"`
			SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
			StarCount         *int32    `json:"star_count,omitempty"`
			TagList           *[]string `json:"tag_list,omitempty"`
			Topics            *[]string `json:"topics,omitempty"`
			WebUrl            *string   `json:"web_url,omitempty"`
		} `json:"forked_from_project,omitempty"`
		ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
		ForksCount                *int32     `json:"forks_count,omitempty"`
		GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
		HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
		Id                        *int32     `json:"id,omitempty"`
		ImportError               *string    `json:"import_error,omitempty"`
		ImportStatus              *string    `json:"import_status,omitempty"`
		ImportType                *string    `json:"import_type,omitempty"`
		ImportUrl                 *string    `json:"import_url,omitempty"`
		InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
		IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
		IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
		IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
		IssuesTemplate            *string    `json:"issues_template,omitempty"`
		JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
		KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
		LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
		LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
		License                   *struct {
			HtmlUrl   *string `json:"html_url,omitempty"`
			Key       *string `json:"key,omitempty"`
			Name      *string `json:"name,omitempty"`
			Nickname  *string `json:"nickname,omitempty"`
			SourceUrl *string `json:"source_url,omitempty"`
		} `json:"license,omitempty"`
		LicenseUrl                       *string `json:"license_url,omitempty"`
		MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
		MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
		MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
		MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
		MergeMethod                      *string `json:"merge_method,omitempty"`
		MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
		MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
		MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
		MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
		MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
		MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
		MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
		Mirror                           *string `json:"mirror,omitempty"`
		MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
		MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
		MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
		ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
		ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
		MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
		MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
		Name                             *string `json:"name,omitempty"`
		NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
		Namespace                        *struct {
			AvatarUrl *string `json:"avatar_url,omitempty"`
			FullPath  *string `json:"full_path,omitempty"`
			Id        *int32  `json:"id,omitempty"`
			Kind      *string `json:"kind,omitempty"`
			Name      *string `json:"name,omitempty"`
			ParentId  *int32  `json:"parent_id,omitempty"`
			Path      *string `json:"path,omitempty"`
			WebUrl    *string `json:"web_url,omitempty"`
		} `json:"namespace,omitempty"`
		OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
		OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
		OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
		OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
		OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

		// Owner API_Entities_UserBasic model
		Owner *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"owner,omitempty"`
		PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
		PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
		Path                             *string   `json:"path,omitempty"`
		PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
		PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
		PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
		PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
		PublicJobs                       *bool     `json:"public_jobs,omitempty"`
		ReadmeUrl                        *string   `json:"readme_url,omitempty"`
		ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
		RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
		RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
		RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
		RepositoryStorage                *string   `json:"repository_storage,omitempty"`
		RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
		RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
		RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
		ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
		RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
		RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
		RunnersToken                     *string   `json:"runners_token,omitempty"`
		SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
		SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
		SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
		ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
		ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
		SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
		SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
		SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
		SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
		SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
		SquashOption                     *string   `json:"squash_option,omitempty"`
		SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
		StarCount                        *int32    `json:"star_count,omitempty"`
		Statistics                       *struct {
			CommitCount           *string `json:"commit_count,omitempty"`
			ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
			JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
			LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
			PackagesSize          *string `json:"packages_size,omitempty"`
			PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
			RepositorySize        *string `json:"repository_size,omitempty"`
			SnippetsSize          *string `json:"snippets_size,omitempty"`
			StorageSize           *string `json:"storage_size,omitempty"`
			UploadsSize           *string `json:"uploads_size,omitempty"`
			WikiSize              *string `json:"wiki_size,omitempty"`
		} `json:"statistics,omitempty"`
		SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
		TagList                                *[]string  `json:"tag_list,omitempty"`
		Topics                                 *[]string  `json:"topics,omitempty"`
		UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
		Visibility                             *string    `json:"visibility,omitempty"`
		WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
		WebUrl                                 *string    `json:"web_url,omitempty"`
		WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
		WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
	}
}
type PostApiV4GroupsIdProjectsProjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		AllowedEmailDomainsList                *string `json:"allowed_email_domains_list,omitempty"`
		Archived                               *bool   `json:"archived,omitempty"`
		AutoBanUserOnExcessiveProjectsDownload *string `json:"auto_ban_user_on_excessive_projects_download,omitempty"`
		AutoDevopsEnabled                      *string `json:"auto_devops_enabled,omitempty"`
		AvatarUrl                              *string `json:"avatar_url,omitempty"`
		CreatedAt                              *string `json:"created_at,omitempty"`

		// CustomAttributes API_Entities_CustomAttribute model
		CustomAttributes *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		DefaultBranch                   *string `json:"default_branch,omitempty"`
		DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
		DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
		Description                     *string `json:"description,omitempty"`

		// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
		DuoCoreFeaturesEnabled         *bool   `json:"duo_core_features_enabled,omitempty"`
		DuoFeaturesEnabled             *string `json:"duo_features_enabled,omitempty"`
		EmailsDisabled                 *bool   `json:"emails_disabled,omitempty"`
		EmailsEnabled                  *bool   `json:"emails_enabled,omitempty"`
		EnabledGitAccessProtocol       *string `json:"enabled_git_access_protocol,omitempty"`
		ExtraSharedRunnersMinutesLimit *string `json:"extra_shared_runners_minutes_limit,omitempty"`
		FileTemplateProjectId          *string `json:"file_template_project_id,omitempty"`
		FullName                       *string `json:"full_name,omitempty"`
		FullPath                       *string `json:"full_path,omitempty"`
		Id                             *string `json:"id,omitempty"`
		IpRestrictionRanges            *string `json:"ip_restriction_ranges,omitempty"`
		LdapAccess                     *string `json:"ldap_access,omitempty"`
		LdapCn                         *string `json:"ldap_cn,omitempty"`
		LdapGroupLinks                 *struct {
			Cn           *string `json:"cn,omitempty"`
			Filter       *string `json:"filter,omitempty"`
			GroupAccess  *int32  `json:"group_access,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Provider     *string `json:"provider,omitempty"`
		} `json:"ldap_group_links,omitempty"`
		LfsEnabled                           *string `json:"lfs_enabled,omitempty"`
		LockDuoFeaturesEnabled               *string `json:"lock_duo_features_enabled,omitempty"`
		LockMathRenderingLimitsEnabled       *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
		MarkedForDeletionOn                  *string `json:"marked_for_deletion_on,omitempty"`
		MathRenderingLimitsEnabled           *bool   `json:"math_rendering_limits_enabled,omitempty"`
		MaxArtifactsSize                     *int32  `json:"max_artifacts_size,omitempty"`
		MembershipLock                       *string `json:"membership_lock,omitempty"`
		MentionsDisabled                     *string `json:"mentions_disabled,omitempty"`
		Name                                 *string `json:"name,omitempty"`
		OrganizationId                       *string `json:"organization_id,omitempty"`
		ParentId                             *string `json:"parent_id,omitempty"`
		Path                                 *string `json:"path,omitempty"`
		PreventForkingOutsideGroup           *string `json:"prevent_forking_outside_group,omitempty"`
		PreventSharingGroupsOutsideHierarchy *string `json:"prevent_sharing_groups_outside_hierarchy,omitempty"`
		ProjectCreationLevel                 *string `json:"project_creation_level,omitempty"`

		// Projects API_Entities_Project model
		Projects *struct {
			Links *struct {
				ClusterAgents *string `json:"cluster_agents,omitempty"`
				Events        *string `json:"events,omitempty"`
				Issues        *string `json:"issues,omitempty"`
				Labels        *string `json:"labels,omitempty"`
				Members       *string `json:"members,omitempty"`
				MergeRequests *string `json:"merge_requests,omitempty"`
				RepoBranches  *string `json:"repo_branches,omitempty"`
				Self          *string `json:"self,omitempty"`
			} `json:"_links,omitempty"`
			AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
			AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
			AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
			ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
			Archived                                 *bool     `json:"archived,omitempty"`
			AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
			AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
			AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
			AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
			AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
			AvatarUrl                                *string   `json:"avatar_url,omitempty"`
			BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
			BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
			BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
			CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
			CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
			CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
			CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
			CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
			CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
			CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
			CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
			CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
			CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
			CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
			CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
			CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
			ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
			ContainerExpirationPolicy                *struct {
				Cadence       *string `json:"cadence,omitempty"`
				Enabled       *string `json:"enabled,omitempty"`
				KeepN         *string `json:"keep_n,omitempty"`
				NameRegex     *string `json:"name_regex,omitempty"`
				NameRegexKeep *string `json:"name_regex_keep,omitempty"`
				NextRunAt     *string `json:"next_run_at,omitempty"`
				OlderThan     *string `json:"older_than,omitempty"`
			} `json:"container_expiration_policy,omitempty"`
			ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
			ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
			ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
			CreatedAt                    *time.Time `json:"created_at,omitempty"`
			CreatorId                    *int32     `json:"creator_id,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                            *string `json:"default_branch,omitempty"`
			Description                              *string `json:"description,omitempty"`
			DescriptionHtml                          *string `json:"description_html,omitempty"`
			EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
			EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
			EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
			EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
			ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
			FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

			// ForkedFromProject API_Entities_BasicProjectDetails model
			ForkedFromProject *struct {
				AvatarUrl *string    `json:"avatar_url,omitempty"`
				CreatedAt *time.Time `json:"created_at,omitempty"`

				// CustomAttributes API_Entities_CustomAttribute model
				CustomAttributes *struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				DefaultBranch  *string    `json:"default_branch,omitempty"`
				Description    *string    `json:"description,omitempty"`
				ForksCount     *int32     `json:"forks_count,omitempty"`
				HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
				Id             *int32     `json:"id,omitempty"`
				LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
				License        *struct {
					HtmlUrl   *string `json:"html_url,omitempty"`
					Key       *string `json:"key,omitempty"`
					Name      *string `json:"name,omitempty"`
					Nickname  *string `json:"nickname,omitempty"`
					SourceUrl *string `json:"source_url,omitempty"`
				} `json:"license,omitempty"`
				LicenseUrl        *string `json:"license_url,omitempty"`
				Name              *string `json:"name,omitempty"`
				NameWithNamespace *string `json:"name_with_namespace,omitempty"`
				Namespace         *struct {
					AvatarUrl *string `json:"avatar_url,omitempty"`
					FullPath  *string `json:"full_path,omitempty"`
					Id        *int32  `json:"id,omitempty"`
					Kind      *string `json:"kind,omitempty"`
					Name      *string `json:"name,omitempty"`
					ParentId  *int32  `json:"parent_id,omitempty"`
					Path      *string `json:"path,omitempty"`
					WebUrl    *string `json:"web_url,omitempty"`
				} `json:"namespace,omitempty"`
				Path              *string   `json:"path,omitempty"`
				PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
				ReadmeUrl         *string   `json:"readme_url,omitempty"`
				RepositoryStorage *string   `json:"repository_storage,omitempty"`
				SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
				StarCount         *int32    `json:"star_count,omitempty"`
				TagList           *[]string `json:"tag_list,omitempty"`
				Topics            *[]string `json:"topics,omitempty"`
				WebUrl            *string   `json:"web_url,omitempty"`
			} `json:"forked_from_project,omitempty"`
			ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
			ForksCount                *int32     `json:"forks_count,omitempty"`
			GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
			HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
			Id                        *int32     `json:"id,omitempty"`
			ImportError               *string    `json:"import_error,omitempty"`
			ImportStatus              *string    `json:"import_status,omitempty"`
			ImportType                *string    `json:"import_type,omitempty"`
			ImportUrl                 *string    `json:"import_url,omitempty"`
			InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
			IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
			IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
			IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
			IssuesTemplate            *string    `json:"issues_template,omitempty"`
			JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
			KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
			LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
			LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
			License                   *struct {
				HtmlUrl   *string `json:"html_url,omitempty"`
				Key       *string `json:"key,omitempty"`
				Name      *string `json:"name,omitempty"`
				Nickname  *string `json:"nickname,omitempty"`
				SourceUrl *string `json:"source_url,omitempty"`
			} `json:"license,omitempty"`
			LicenseUrl                       *string `json:"license_url,omitempty"`
			MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
			MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
			MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
			MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
			MergeMethod                      *string `json:"merge_method,omitempty"`
			MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
			MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
			MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
			MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
			MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
			MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
			MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
			Mirror                           *string `json:"mirror,omitempty"`
			MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
			MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
			MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
			ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
			ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
			MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
			MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
			Name                             *string `json:"name,omitempty"`
			NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
			Namespace                        *struct {
				AvatarUrl *string `json:"avatar_url,omitempty"`
				FullPath  *string `json:"full_path,omitempty"`
				Id        *int32  `json:"id,omitempty"`
				Kind      *string `json:"kind,omitempty"`
				Name      *string `json:"name,omitempty"`
				ParentId  *int32  `json:"parent_id,omitempty"`
				Path      *string `json:"path,omitempty"`
				WebUrl    *string `json:"web_url,omitempty"`
			} `json:"namespace,omitempty"`
			OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
			OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
			OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
			OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
			OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

			// Owner API_Entities_UserBasic model
			Owner *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"owner,omitempty"`
			PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
			PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
			Path                             *string   `json:"path,omitempty"`
			PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
			PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
			PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
			PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
			PublicJobs                       *bool     `json:"public_jobs,omitempty"`
			ReadmeUrl                        *string   `json:"readme_url,omitempty"`
			ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
			RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
			RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
			RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
			RepositoryStorage                *string   `json:"repository_storage,omitempty"`
			RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
			RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
			RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
			ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
			RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
			RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
			RunnersToken                     *string   `json:"runners_token,omitempty"`
			SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
			SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
			SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
			ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
			ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
			SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
			SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
			SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
			SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
			SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
			SquashOption                     *string   `json:"squash_option,omitempty"`
			SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
			StarCount                        *int32    `json:"star_count,omitempty"`
			Statistics                       *struct {
				CommitCount           *string `json:"commit_count,omitempty"`
				ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
			TagList                                *[]string  `json:"tag_list,omitempty"`
			Topics                                 *[]string  `json:"topics,omitempty"`
			UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
			Visibility                             *string    `json:"visibility,omitempty"`
			WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
			WebUrl                                 *string    `json:"web_url,omitempty"`
			WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
			WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
		} `json:"projects,omitempty"`
		RepositoryStorage              *string `json:"repository_storage,omitempty"`
		RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
		RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
		RootStorageStatistics          *struct {
			// BuildArtifactsSize CI artifacts size in bytes.
			BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

			// ContainerRegistrySize container registry size in bytes.
			ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

			// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
			ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

			// DependencyProxySize Dependency Proxy sizes in bytes.
			DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

			// LfsObjectsSize LFS objects size in bytes.
			LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

			// PackagesSize Packages size in bytes.
			PackagesSize *int32 `json:"packages_size,omitempty"`

			// PipelineArtifactsSize CI pipeline artifacts size in bytes.
			PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

			// RepositorySize Git repository size in bytes.
			RepositorySize *int32 `json:"repository_size,omitempty"`

			// SnippetsSize Snippets size in bytes.
			SnippetsSize *int32 `json:"snippets_size,omitempty"`

			// StorageSize Total storage in bytes.
			StorageSize *int32 `json:"storage_size,omitempty"`

			// UploadsSize Uploads size in bytes.
			UploadsSize *int32 `json:"uploads_size,omitempty"`

			// WikiSize Wiki size in bytes.
			WikiSize *int32 `json:"wiki_size,omitempty"`
		} `json:"root_storage_statistics,omitempty"`
		RunnersToken   *string `json:"runners_token,omitempty"`
		SamlGroupLinks *struct {
			AccessLevel  *int32  `json:"access_level,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Name         *string `json:"name,omitempty"`
		} `json:"saml_group_links,omitempty"`
		ServiceAccessTokensExpirationEnforced *string `json:"service_access_tokens_expiration_enforced,omitempty"`
		ShareWithGroupLock                    *string `json:"share_with_group_lock,omitempty"`

		// SharedProjects API_Entities_Project model
		SharedProjects *struct {
			Links *struct {
				ClusterAgents *string `json:"cluster_agents,omitempty"`
				Events        *string `json:"events,omitempty"`
				Issues        *string `json:"issues,omitempty"`
				Labels        *string `json:"labels,omitempty"`
				Members       *string `json:"members,omitempty"`
				MergeRequests *string `json:"merge_requests,omitempty"`
				RepoBranches  *string `json:"repo_branches,omitempty"`
				Self          *string `json:"self,omitempty"`
			} `json:"_links,omitempty"`
			AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
			AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
			AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
			ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
			Archived                                 *bool     `json:"archived,omitempty"`
			AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
			AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
			AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
			AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
			AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
			AvatarUrl                                *string   `json:"avatar_url,omitempty"`
			BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
			BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
			BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
			CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
			CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
			CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
			CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
			CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
			CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
			CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
			CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
			CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
			CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
			CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
			CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
			CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
			ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
			ContainerExpirationPolicy                *struct {
				Cadence       *string `json:"cadence,omitempty"`
				Enabled       *string `json:"enabled,omitempty"`
				KeepN         *string `json:"keep_n,omitempty"`
				NameRegex     *string `json:"name_regex,omitempty"`
				NameRegexKeep *string `json:"name_regex_keep,omitempty"`
				NextRunAt     *string `json:"next_run_at,omitempty"`
				OlderThan     *string `json:"older_than,omitempty"`
			} `json:"container_expiration_policy,omitempty"`
			ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
			ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
			ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
			CreatedAt                    *time.Time `json:"created_at,omitempty"`
			CreatorId                    *int32     `json:"creator_id,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                            *string `json:"default_branch,omitempty"`
			Description                              *string `json:"description,omitempty"`
			DescriptionHtml                          *string `json:"description_html,omitempty"`
			EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
			EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
			EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
			EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
			ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
			FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

			// ForkedFromProject API_Entities_BasicProjectDetails model
			ForkedFromProject *struct {
				AvatarUrl *string    `json:"avatar_url,omitempty"`
				CreatedAt *time.Time `json:"created_at,omitempty"`

				// CustomAttributes API_Entities_CustomAttribute model
				CustomAttributes *struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				DefaultBranch  *string    `json:"default_branch,omitempty"`
				Description    *string    `json:"description,omitempty"`
				ForksCount     *int32     `json:"forks_count,omitempty"`
				HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
				Id             *int32     `json:"id,omitempty"`
				LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
				License        *struct {
					HtmlUrl   *string `json:"html_url,omitempty"`
					Key       *string `json:"key,omitempty"`
					Name      *string `json:"name,omitempty"`
					Nickname  *string `json:"nickname,omitempty"`
					SourceUrl *string `json:"source_url,omitempty"`
				} `json:"license,omitempty"`
				LicenseUrl        *string `json:"license_url,omitempty"`
				Name              *string `json:"name,omitempty"`
				NameWithNamespace *string `json:"name_with_namespace,omitempty"`
				Namespace         *struct {
					AvatarUrl *string `json:"avatar_url,omitempty"`
					FullPath  *string `json:"full_path,omitempty"`
					Id        *int32  `json:"id,omitempty"`
					Kind      *string `json:"kind,omitempty"`
					Name      *string `json:"name,omitempty"`
					ParentId  *int32  `json:"parent_id,omitempty"`
					Path      *string `json:"path,omitempty"`
					WebUrl    *string `json:"web_url,omitempty"`
				} `json:"namespace,omitempty"`
				Path              *string   `json:"path,omitempty"`
				PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
				ReadmeUrl         *string   `json:"readme_url,omitempty"`
				RepositoryStorage *string   `json:"repository_storage,omitempty"`
				SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
				StarCount         *int32    `json:"star_count,omitempty"`
				TagList           *[]string `json:"tag_list,omitempty"`
				Topics            *[]string `json:"topics,omitempty"`
				WebUrl            *string   `json:"web_url,omitempty"`
			} `json:"forked_from_project,omitempty"`
			ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
			ForksCount                *int32     `json:"forks_count,omitempty"`
			GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
			HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
			Id                        *int32     `json:"id,omitempty"`
			ImportError               *string    `json:"import_error,omitempty"`
			ImportStatus              *string    `json:"import_status,omitempty"`
			ImportType                *string    `json:"import_type,omitempty"`
			ImportUrl                 *string    `json:"import_url,omitempty"`
			InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
			IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
			IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
			IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
			IssuesTemplate            *string    `json:"issues_template,omitempty"`
			JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
			KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
			LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
			LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
			License                   *struct {
				HtmlUrl   *string `json:"html_url,omitempty"`
				Key       *string `json:"key,omitempty"`
				Name      *string `json:"name,omitempty"`
				Nickname  *string `json:"nickname,omitempty"`
				SourceUrl *string `json:"source_url,omitempty"`
			} `json:"license,omitempty"`
			LicenseUrl                       *string `json:"license_url,omitempty"`
			MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
			MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
			MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
			MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
			MergeMethod                      *string `json:"merge_method,omitempty"`
			MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
			MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
			MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
			MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
			MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
			MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
			MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
			Mirror                           *string `json:"mirror,omitempty"`
			MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
			MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
			MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
			ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
			ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
			MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
			MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
			Name                             *string `json:"name,omitempty"`
			NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
			Namespace                        *struct {
				AvatarUrl *string `json:"avatar_url,omitempty"`
				FullPath  *string `json:"full_path,omitempty"`
				Id        *int32  `json:"id,omitempty"`
				Kind      *string `json:"kind,omitempty"`
				Name      *string `json:"name,omitempty"`
				ParentId  *int32  `json:"parent_id,omitempty"`
				Path      *string `json:"path,omitempty"`
				WebUrl    *string `json:"web_url,omitempty"`
			} `json:"namespace,omitempty"`
			OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
			OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
			OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
			OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
			OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

			// Owner API_Entities_UserBasic model
			Owner *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"owner,omitempty"`
			PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
			PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
			Path                             *string   `json:"path,omitempty"`
			PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
			PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
			PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
			PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
			PublicJobs                       *bool     `json:"public_jobs,omitempty"`
			ReadmeUrl                        *string   `json:"readme_url,omitempty"`
			ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
			RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
			RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
			RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
			RepositoryStorage                *string   `json:"repository_storage,omitempty"`
			RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
			RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
			RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
			ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
			RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
			RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
			RunnersToken                     *string   `json:"runners_token,omitempty"`
			SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
			SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
			SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
			ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
			ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
			SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
			SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
			SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
			SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
			SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
			SquashOption                     *string   `json:"squash_option,omitempty"`
			SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
			StarCount                        *int32    `json:"star_count,omitempty"`
			Statistics                       *struct {
				CommitCount           *string `json:"commit_count,omitempty"`
				ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
			TagList                                *[]string  `json:"tag_list,omitempty"`
			Topics                                 *[]string  `json:"topics,omitempty"`
			UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
			Visibility                             *string    `json:"visibility,omitempty"`
			WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
			WebUrl                                 *string    `json:"web_url,omitempty"`
			WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
			WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
		} `json:"shared_projects,omitempty"`
		SharedRunnersMinutesLimit *string `json:"shared_runners_minutes_limit,omitempty"`
		SharedRunnersSetting      *string `json:"shared_runners_setting,omitempty"`
		SharedWithGroups          *string `json:"shared_with_groups,omitempty"`
		Statistics                *struct {
			JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
			LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
			PackagesSize          *string `json:"packages_size,omitempty"`
			PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
			RepositorySize        *string `json:"repository_size,omitempty"`
			SnippetsSize          *string `json:"snippets_size,omitempty"`
			StorageSize           *string `json:"storage_size,omitempty"`
			UploadsSize           *string `json:"uploads_size,omitempty"`
			WikiSize              *string `json:"wiki_size,omitempty"`
		} `json:"statistics,omitempty"`
		SubgroupCreationLevel                       *string `json:"subgroup_creation_level,omitempty"`
		TwoFactorGracePeriod                        *string `json:"two_factor_grace_period,omitempty"`
		UniqueProjectDownloadLimit                  *string `json:"unique_project_download_limit,omitempty"`
		UniqueProjectDownloadLimitAlertlist         *string `json:"unique_project_download_limit_alertlist,omitempty"`
		UniqueProjectDownloadLimitAllowlist         *string `json:"unique_project_download_limit_allowlist,omitempty"`
		UniqueProjectDownloadLimitIntervalInSeconds *string `json:"unique_project_download_limit_interval_in_seconds,omitempty"`
		Visibility                                  *string `json:"visibility,omitempty"`
		WebBasedCommitSigningEnabled                *string `json:"web_based_commit_signing_enabled,omitempty"`
		WebUrl                                      *string `json:"web_url,omitempty"`
		WikiAccessLevel                             *string `json:"wiki_access_level,omitempty"`
	}
}
type GetApiV4GroupsIdProvisionedUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AvatarPath       *string    `json:"avatar_path,omitempty"`
		AvatarUrl        *string    `json:"avatar_url,omitempty"`
		Bio              *string    `json:"bio,omitempty"`
		Bot              *string    `json:"bot,omitempty"`
		CanCreateGroup   *bool      `json:"can_create_group,omitempty"`
		CanCreateProject *bool      `json:"can_create_project,omitempty"`
		ColorSchemeId    *int32     `json:"color_scheme_id,omitempty"`
		CommitEmail      *string    `json:"commit_email,omitempty"`
		ConfirmedAt      *time.Time `json:"confirmed_at,omitempty"`
		CreatedAt        *string    `json:"created_at,omitempty"`
		CurrentSignInAt  *time.Time `json:"current_sign_in_at,omitempty"`
		CustomAttributes *[]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		Discord                        *string `json:"discord,omitempty"`
		Email                          *string `json:"email,omitempty"`
		External                       *string `json:"external,omitempty"`
		ExtraSharedRunnersMinutesLimit *string `json:"extra_shared_runners_minutes_limit,omitempty"`
		Followers                      *string `json:"followers,omitempty"`
		Following                      *string `json:"following,omitempty"`
		Github                         *string `json:"github,omitempty"`
		Id                             *int32  `json:"id,omitempty"`
		Identities                     *struct {
			ExternUid      *string `json:"extern_uid,omitempty"`
			Provider       *string `json:"provider,omitempty"`
			SamlProviderId *string `json:"saml_provider_id,omitempty"`
		} `json:"identities,omitempty"`
		IsFollowed     *string    `json:"is_followed,omitempty"`
		JobTitle       *string    `json:"job_title,omitempty"`
		LastActivityOn *time.Time `json:"last_activity_on,omitempty"`
		LastSignInAt   *time.Time `json:"last_sign_in_at,omitempty"`
		Linkedin       *string    `json:"linkedin,omitempty"`
		LocalTime      *string    `json:"local_time,omitempty"`
		Location       *string    `json:"location,omitempty"`
		Locked         *bool      `json:"locked,omitempty"`
		Name           *string    `json:"name,omitempty"`
		Organization   *string    `json:"organization,omitempty"`
		PrivateProfile *bool      `json:"private_profile,omitempty"`
		ProjectsLimit  *int32     `json:"projects_limit,omitempty"`
		Pronouns       *string    `json:"pronouns,omitempty"`
		PublicEmail    *string    `json:"public_email,omitempty"`
		ScimIdentities *struct {
			Active    *string `json:"active,omitempty"`
			ExternUid *string `json:"extern_uid,omitempty"`
			GroupId   *string `json:"group_id,omitempty"`
		} `json:"scim_identities,omitempty"`
		SharedRunnersMinutesLimit *string `json:"shared_runners_minutes_limit,omitempty"`
		Skype                     *string `json:"skype,omitempty"`
		State                     *string `json:"state,omitempty"`
		ThemeId                   *int32  `json:"theme_id,omitempty"`
		Twitter                   *string `json:"twitter,omitempty"`
		TwoFactorEnabled          *bool   `json:"two_factor_enabled,omitempty"`
		Username                  *string `json:"username,omitempty"`
		WebUrl                    *string `json:"web_url,omitempty"`
		WebsiteUrl                *string `json:"website_url,omitempty"`
		WorkInformation           *string `json:"work_information,omitempty"`
	}
}
type GetApiV4GroupsIdRegistryRepositoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CleanupPolicyStartedAt *time.Time `json:"cleanup_policy_started_at,omitempty"`
		CreatedAt              *time.Time `json:"created_at,omitempty"`
		DeleteApiPath          *string    `json:"delete_api_path,omitempty"`
		Id                     *int32     `json:"id,omitempty"`
		Location               *string    `json:"location,omitempty"`
		Name                   *string    `json:"name,omitempty"`
		Path                   *string    `json:"path,omitempty"`
		ProjectId              *int32     `json:"project_id,omitempty"`
		Size                   *int32     `json:"size,omitempty"`
		Status                 *string    `json:"status,omitempty"`

		// Tags API_Entities_ContainerRegistry_Tag model
		Tags *struct {
			Location *string `json:"location,omitempty"`
			Name     *string `json:"name,omitempty"`
			Path     *string `json:"path,omitempty"`
		} `json:"tags,omitempty"`
		TagsCount *int32 `json:"tags_count,omitempty"`
	}
}
type GetApiV4GroupsIdReleasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Links *struct {
			ClosedIssuesUrl        *string `json:"closed_issues_url,omitempty"`
			ClosedMergeRequestsUrl *string `json:"closed_merge_requests_url,omitempty"`
			EditUrl                *string `json:"edit_url,omitempty"`
			MergedMergeRequestsUrl *string `json:"merged_merge_requests_url,omitempty"`
			OpenedIssuesUrl        *string `json:"opened_issues_url,omitempty"`
			OpenedMergeRequestsUrl *string `json:"opened_merge_requests_url,omitempty"`
			Self                   *string `json:"self,omitempty"`
		} `json:"_links,omitempty"`
		Assets *struct {
			Count *int32 `json:"count,omitempty"`

			// Links API_Entities_Releases_Link model
			Links *struct {
				DirectAssetUrl *string `json:"direct_asset_url,omitempty"`
				Id             *int32  `json:"id,omitempty"`
				LinkType       *string `json:"link_type,omitempty"`
				Name           *string `json:"name,omitempty"`
				Url            *string `json:"url,omitempty"`
			} `json:"links,omitempty"`
			Sources *struct {
				Format *string `json:"format,omitempty"`
				Url    *string `json:"url,omitempty"`
			} `json:"sources,omitempty"`
		} `json:"assets,omitempty"`

		// Author API_Entities_UserBasic model
		Author *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"author,omitempty"`

		// Commit API_Entities_Commit model
		Commit *struct {
			AuthorEmail      *string                 `json:"author_email,omitempty"`
			AuthorName       *string                 `json:"author_name,omitempty"`
			AuthoredDate     *time.Time              `json:"authored_date,omitempty"`
			CommittedDate    *time.Time              `json:"committed_date,omitempty"`
			CommitterEmail   *string                 `json:"committer_email,omitempty"`
			CommitterName    *string                 `json:"committer_name,omitempty"`
			CreatedAt        *time.Time              `json:"created_at,omitempty"`
			ExtendedTrailers *map[string]interface{} `json:"extended_trailers,omitempty"`
			Id               *string                 `json:"id,omitempty"`
			Message          *string                 `json:"message,omitempty"`
			ParentIds        *[]string               `json:"parent_ids,omitempty"`
			ShortId          *string                 `json:"short_id,omitempty"`
			Title            *string                 `json:"title,omitempty"`
			Trailers         *map[string]interface{} `json:"trailers,omitempty"`
			WebUrl           *string                 `json:"web_url,omitempty"`
		} `json:"commit,omitempty"`
		CommitPath      *string    `json:"commit_path,omitempty"`
		CreatedAt       *time.Time `json:"created_at,omitempty"`
		Description     *string    `json:"description,omitempty"`
		DescriptionHtml *string    `json:"description_html,omitempty"`
		Evidences       *struct {
			CollectedAt *time.Time `json:"collected_at,omitempty"`
			Filepath    *string    `json:"filepath,omitempty"`
			Sha         *string    `json:"sha,omitempty"`
		} `json:"evidences,omitempty"`
		Milestones *struct {
			CreatedAt   *string `json:"created_at,omitempty"`
			Description *string `json:"description,omitempty"`
			DueDate     *string `json:"due_date,omitempty"`
			Expired     *string `json:"expired,omitempty"`
			GroupId     *string `json:"group_id,omitempty"`
			Id          *string `json:"id,omitempty"`
			Iid         *string `json:"iid,omitempty"`
			IssueStats  *struct {
				Closed *string `json:"closed,omitempty"`
				Total  *string `json:"total,omitempty"`
			} `json:"issue_stats,omitempty"`
			ProjectId *string `json:"project_id,omitempty"`
			StartDate *string `json:"start_date,omitempty"`
			State     *string `json:"state,omitempty"`
			Title     *string `json:"title,omitempty"`
			UpdatedAt *string `json:"updated_at,omitempty"`
			WebUrl    *string `json:"web_url,omitempty"`
		} `json:"milestones,omitempty"`
		Name            *string    `json:"name,omitempty"`
		ReleasedAt      *time.Time `json:"released_at,omitempty"`
		TagName         *string    `json:"tag_name,omitempty"`
		TagPath         *string    `json:"tag_path,omitempty"`
		UpcomingRelease *bool      `json:"upcoming_release,omitempty"`
	}
}
type PostApiV4GroupsIdRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdRunnersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active    *bool      `json:"active,omitempty"`
		CreatedAt *time.Time `json:"created_at,omitempty"`

		// CreatedBy API_Entities_UserBasic model
		CreatedBy *struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		} `json:"created_by,omitempty"`
		Description *string                               `json:"description,omitempty"`
		Id          *int32                                `json:"id,omitempty"`
		IpAddress   *string                               `json:"ip_address,omitempty"`
		IsShared    *bool                                 `json:"is_shared,omitempty"`
		Name        *string                               `json:"name,omitempty"`
		Online      *bool                                 `json:"online,omitempty"`
		Paused      *bool                                 `json:"paused,omitempty"`
		RunnerType  *GetApiV4GroupsIdRunners200RunnerType `json:"runner_type,omitempty"`
		Status      *string                               `json:"status,omitempty"`
	}
}
type GetApiV4GroupsIdRunners200RunnerType string
type PostApiV4GroupsIdRunnersResetRegistrationTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Token          *string `json:"token,omitempty"`
		TokenExpiresAt *string `json:"token_expires_at,omitempty"`
	}
}
type GetApiV4GroupsIdSamlUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AvatarPath       *string    `json:"avatar_path,omitempty"`
		AvatarUrl        *string    `json:"avatar_url,omitempty"`
		Bio              *string    `json:"bio,omitempty"`
		Bot              *string    `json:"bot,omitempty"`
		CanCreateGroup   *bool      `json:"can_create_group,omitempty"`
		CanCreateProject *bool      `json:"can_create_project,omitempty"`
		ColorSchemeId    *int32     `json:"color_scheme_id,omitempty"`
		CommitEmail      *string    `json:"commit_email,omitempty"`
		ConfirmedAt      *time.Time `json:"confirmed_at,omitempty"`
		CreatedAt        *string    `json:"created_at,omitempty"`
		CurrentSignInAt  *time.Time `json:"current_sign_in_at,omitempty"`
		CustomAttributes *[]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		Discord                        *string `json:"discord,omitempty"`
		Email                          *string `json:"email,omitempty"`
		External                       *string `json:"external,omitempty"`
		ExtraSharedRunnersMinutesLimit *string `json:"extra_shared_runners_minutes_limit,omitempty"`
		Followers                      *string `json:"followers,omitempty"`
		Following                      *string `json:"following,omitempty"`
		Github                         *string `json:"github,omitempty"`
		Id                             *int32  `json:"id,omitempty"`
		Identities                     *struct {
			ExternUid      *string `json:"extern_uid,omitempty"`
			Provider       *string `json:"provider,omitempty"`
			SamlProviderId *string `json:"saml_provider_id,omitempty"`
		} `json:"identities,omitempty"`
		IsFollowed     *string    `json:"is_followed,omitempty"`
		JobTitle       *string    `json:"job_title,omitempty"`
		LastActivityOn *time.Time `json:"last_activity_on,omitempty"`
		LastSignInAt   *time.Time `json:"last_sign_in_at,omitempty"`
		Linkedin       *string    `json:"linkedin,omitempty"`
		LocalTime      *string    `json:"local_time,omitempty"`
		Location       *string    `json:"location,omitempty"`
		Locked         *bool      `json:"locked,omitempty"`
		Name           *string    `json:"name,omitempty"`
		Organization   *string    `json:"organization,omitempty"`
		PrivateProfile *bool      `json:"private_profile,omitempty"`
		ProjectsLimit  *int32     `json:"projects_limit,omitempty"`
		Pronouns       *string    `json:"pronouns,omitempty"`
		PublicEmail    *string    `json:"public_email,omitempty"`
		ScimIdentities *struct {
			Active    *string `json:"active,omitempty"`
			ExternUid *string `json:"extern_uid,omitempty"`
			GroupId   *string `json:"group_id,omitempty"`
		} `json:"scim_identities,omitempty"`
		SharedRunnersMinutesLimit *string `json:"shared_runners_minutes_limit,omitempty"`
		Skype                     *string `json:"skype,omitempty"`
		State                     *string `json:"state,omitempty"`
		ThemeId                   *int32  `json:"theme_id,omitempty"`
		Twitter                   *string `json:"twitter,omitempty"`
		TwoFactorEnabled          *bool   `json:"two_factor_enabled,omitempty"`
		Username                  *string `json:"username,omitempty"`
		WebUrl                    *string `json:"web_url,omitempty"`
		WebsiteUrl                *string `json:"website_url,omitempty"`
		WorkInformation           *string `json:"work_information,omitempty"`
	}
}
type PostApiV4GroupsIdShareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		AllowedEmailDomainsList                *string `json:"allowed_email_domains_list,omitempty"`
		Archived                               *bool   `json:"archived,omitempty"`
		AutoBanUserOnExcessiveProjectsDownload *string `json:"auto_ban_user_on_excessive_projects_download,omitempty"`
		AutoDevopsEnabled                      *string `json:"auto_devops_enabled,omitempty"`
		AvatarUrl                              *string `json:"avatar_url,omitempty"`
		CreatedAt                              *string `json:"created_at,omitempty"`

		// CustomAttributes API_Entities_CustomAttribute model
		CustomAttributes *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		DefaultBranch                   *string `json:"default_branch,omitempty"`
		DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
		DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
		Description                     *string `json:"description,omitempty"`

		// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
		DuoCoreFeaturesEnabled         *bool   `json:"duo_core_features_enabled,omitempty"`
		DuoFeaturesEnabled             *string `json:"duo_features_enabled,omitempty"`
		EmailsDisabled                 *bool   `json:"emails_disabled,omitempty"`
		EmailsEnabled                  *bool   `json:"emails_enabled,omitempty"`
		EnabledGitAccessProtocol       *string `json:"enabled_git_access_protocol,omitempty"`
		ExtraSharedRunnersMinutesLimit *string `json:"extra_shared_runners_minutes_limit,omitempty"`
		FileTemplateProjectId          *string `json:"file_template_project_id,omitempty"`
		FullName                       *string `json:"full_name,omitempty"`
		FullPath                       *string `json:"full_path,omitempty"`
		Id                             *string `json:"id,omitempty"`
		IpRestrictionRanges            *string `json:"ip_restriction_ranges,omitempty"`
		LdapAccess                     *string `json:"ldap_access,omitempty"`
		LdapCn                         *string `json:"ldap_cn,omitempty"`
		LdapGroupLinks                 *struct {
			Cn           *string `json:"cn,omitempty"`
			Filter       *string `json:"filter,omitempty"`
			GroupAccess  *int32  `json:"group_access,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Provider     *string `json:"provider,omitempty"`
		} `json:"ldap_group_links,omitempty"`
		LfsEnabled                           *string `json:"lfs_enabled,omitempty"`
		LockDuoFeaturesEnabled               *string `json:"lock_duo_features_enabled,omitempty"`
		LockMathRenderingLimitsEnabled       *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
		MarkedForDeletionOn                  *string `json:"marked_for_deletion_on,omitempty"`
		MathRenderingLimitsEnabled           *bool   `json:"math_rendering_limits_enabled,omitempty"`
		MaxArtifactsSize                     *int32  `json:"max_artifacts_size,omitempty"`
		MembershipLock                       *string `json:"membership_lock,omitempty"`
		MentionsDisabled                     *string `json:"mentions_disabled,omitempty"`
		Name                                 *string `json:"name,omitempty"`
		OrganizationId                       *string `json:"organization_id,omitempty"`
		ParentId                             *string `json:"parent_id,omitempty"`
		Path                                 *string `json:"path,omitempty"`
		PreventForkingOutsideGroup           *string `json:"prevent_forking_outside_group,omitempty"`
		PreventSharingGroupsOutsideHierarchy *string `json:"prevent_sharing_groups_outside_hierarchy,omitempty"`
		ProjectCreationLevel                 *string `json:"project_creation_level,omitempty"`

		// Projects API_Entities_Project model
		Projects *struct {
			Links *struct {
				ClusterAgents *string `json:"cluster_agents,omitempty"`
				Events        *string `json:"events,omitempty"`
				Issues        *string `json:"issues,omitempty"`
				Labels        *string `json:"labels,omitempty"`
				Members       *string `json:"members,omitempty"`
				MergeRequests *string `json:"merge_requests,omitempty"`
				RepoBranches  *string `json:"repo_branches,omitempty"`
				Self          *string `json:"self,omitempty"`
			} `json:"_links,omitempty"`
			AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
			AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
			AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
			ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
			Archived                                 *bool     `json:"archived,omitempty"`
			AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
			AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
			AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
			AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
			AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
			AvatarUrl                                *string   `json:"avatar_url,omitempty"`
			BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
			BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
			BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
			CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
			CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
			CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
			CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
			CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
			CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
			CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
			CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
			CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
			CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
			CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
			CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
			CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
			ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
			ContainerExpirationPolicy                *struct {
				Cadence       *string `json:"cadence,omitempty"`
				Enabled       *string `json:"enabled,omitempty"`
				KeepN         *string `json:"keep_n,omitempty"`
				NameRegex     *string `json:"name_regex,omitempty"`
				NameRegexKeep *string `json:"name_regex_keep,omitempty"`
				NextRunAt     *string `json:"next_run_at,omitempty"`
				OlderThan     *string `json:"older_than,omitempty"`
			} `json:"container_expiration_policy,omitempty"`
			ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
			ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
			ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
			CreatedAt                    *time.Time `json:"created_at,omitempty"`
			CreatorId                    *int32     `json:"creator_id,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                            *string `json:"default_branch,omitempty"`
			Description                              *string `json:"description,omitempty"`
			DescriptionHtml                          *string `json:"description_html,omitempty"`
			EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
			EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
			EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
			EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
			ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
			FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

			// ForkedFromProject API_Entities_BasicProjectDetails model
			ForkedFromProject *struct {
				AvatarUrl *string    `json:"avatar_url,omitempty"`
				CreatedAt *time.Time `json:"created_at,omitempty"`

				// CustomAttributes API_Entities_CustomAttribute model
				CustomAttributes *struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				DefaultBranch  *string    `json:"default_branch,omitempty"`
				Description    *string    `json:"description,omitempty"`
				ForksCount     *int32     `json:"forks_count,omitempty"`
				HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
				Id             *int32     `json:"id,omitempty"`
				LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
				License        *struct {
					HtmlUrl   *string `json:"html_url,omitempty"`
					Key       *string `json:"key,omitempty"`
					Name      *string `json:"name,omitempty"`
					Nickname  *string `json:"nickname,omitempty"`
					SourceUrl *string `json:"source_url,omitempty"`
				} `json:"license,omitempty"`
				LicenseUrl        *string `json:"license_url,omitempty"`
				Name              *string `json:"name,omitempty"`
				NameWithNamespace *string `json:"name_with_namespace,omitempty"`
				Namespace         *struct {
					AvatarUrl *string `json:"avatar_url,omitempty"`
					FullPath  *string `json:"full_path,omitempty"`
					Id        *int32  `json:"id,omitempty"`
					Kind      *string `json:"kind,omitempty"`
					Name      *string `json:"name,omitempty"`
					ParentId  *int32  `json:"parent_id,omitempty"`
					Path      *string `json:"path,omitempty"`
					WebUrl    *string `json:"web_url,omitempty"`
				} `json:"namespace,omitempty"`
				Path              *string   `json:"path,omitempty"`
				PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
				ReadmeUrl         *string   `json:"readme_url,omitempty"`
				RepositoryStorage *string   `json:"repository_storage,omitempty"`
				SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
				StarCount         *int32    `json:"star_count,omitempty"`
				TagList           *[]string `json:"tag_list,omitempty"`
				Topics            *[]string `json:"topics,omitempty"`
				WebUrl            *string   `json:"web_url,omitempty"`
			} `json:"forked_from_project,omitempty"`
			ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
			ForksCount                *int32     `json:"forks_count,omitempty"`
			GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
			HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
			Id                        *int32     `json:"id,omitempty"`
			ImportError               *string    `json:"import_error,omitempty"`
			ImportStatus              *string    `json:"import_status,omitempty"`
			ImportType                *string    `json:"import_type,omitempty"`
			ImportUrl                 *string    `json:"import_url,omitempty"`
			InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
			IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
			IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
			IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
			IssuesTemplate            *string    `json:"issues_template,omitempty"`
			JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
			KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
			LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
			LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
			License                   *struct {
				HtmlUrl   *string `json:"html_url,omitempty"`
				Key       *string `json:"key,omitempty"`
				Name      *string `json:"name,omitempty"`
				Nickname  *string `json:"nickname,omitempty"`
				SourceUrl *string `json:"source_url,omitempty"`
			} `json:"license,omitempty"`
			LicenseUrl                       *string `json:"license_url,omitempty"`
			MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
			MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
			MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
			MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
			MergeMethod                      *string `json:"merge_method,omitempty"`
			MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
			MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
			MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
			MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
			MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
			MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
			MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
			Mirror                           *string `json:"mirror,omitempty"`
			MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
			MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
			MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
			ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
			ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
			MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
			MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
			Name                             *string `json:"name,omitempty"`
			NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
			Namespace                        *struct {
				AvatarUrl *string `json:"avatar_url,omitempty"`
				FullPath  *string `json:"full_path,omitempty"`
				Id        *int32  `json:"id,omitempty"`
				Kind      *string `json:"kind,omitempty"`
				Name      *string `json:"name,omitempty"`
				ParentId  *int32  `json:"parent_id,omitempty"`
				Path      *string `json:"path,omitempty"`
				WebUrl    *string `json:"web_url,omitempty"`
			} `json:"namespace,omitempty"`
			OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
			OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
			OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
			OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
			OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

			// Owner API_Entities_UserBasic model
			Owner *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"owner,omitempty"`
			PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
			PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
			Path                             *string   `json:"path,omitempty"`
			PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
			PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
			PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
			PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
			PublicJobs                       *bool     `json:"public_jobs,omitempty"`
			ReadmeUrl                        *string   `json:"readme_url,omitempty"`
			ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
			RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
			RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
			RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
			RepositoryStorage                *string   `json:"repository_storage,omitempty"`
			RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
			RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
			RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
			ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
			RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
			RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
			RunnersToken                     *string   `json:"runners_token,omitempty"`
			SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
			SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
			SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
			ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
			ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
			SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
			SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
			SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
			SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
			SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
			SquashOption                     *string   `json:"squash_option,omitempty"`
			SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
			StarCount                        *int32    `json:"star_count,omitempty"`
			Statistics                       *struct {
				CommitCount           *string `json:"commit_count,omitempty"`
				ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
			TagList                                *[]string  `json:"tag_list,omitempty"`
			Topics                                 *[]string  `json:"topics,omitempty"`
			UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
			Visibility                             *string    `json:"visibility,omitempty"`
			WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
			WebUrl                                 *string    `json:"web_url,omitempty"`
			WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
			WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
		} `json:"projects,omitempty"`
		RepositoryStorage              *string `json:"repository_storage,omitempty"`
		RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
		RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
		RootStorageStatistics          *struct {
			// BuildArtifactsSize CI artifacts size in bytes.
			BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

			// ContainerRegistrySize container registry size in bytes.
			ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

			// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
			ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

			// DependencyProxySize Dependency Proxy sizes in bytes.
			DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

			// LfsObjectsSize LFS objects size in bytes.
			LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

			// PackagesSize Packages size in bytes.
			PackagesSize *int32 `json:"packages_size,omitempty"`

			// PipelineArtifactsSize CI pipeline artifacts size in bytes.
			PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

			// RepositorySize Git repository size in bytes.
			RepositorySize *int32 `json:"repository_size,omitempty"`

			// SnippetsSize Snippets size in bytes.
			SnippetsSize *int32 `json:"snippets_size,omitempty"`

			// StorageSize Total storage in bytes.
			StorageSize *int32 `json:"storage_size,omitempty"`

			// UploadsSize Uploads size in bytes.
			UploadsSize *int32 `json:"uploads_size,omitempty"`

			// WikiSize Wiki size in bytes.
			WikiSize *int32 `json:"wiki_size,omitempty"`
		} `json:"root_storage_statistics,omitempty"`
		RunnersToken   *string `json:"runners_token,omitempty"`
		SamlGroupLinks *struct {
			AccessLevel  *int32  `json:"access_level,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Name         *string `json:"name,omitempty"`
		} `json:"saml_group_links,omitempty"`
		ServiceAccessTokensExpirationEnforced *string `json:"service_access_tokens_expiration_enforced,omitempty"`
		ShareWithGroupLock                    *string `json:"share_with_group_lock,omitempty"`

		// SharedProjects API_Entities_Project model
		SharedProjects *struct {
			Links *struct {
				ClusterAgents *string `json:"cluster_agents,omitempty"`
				Events        *string `json:"events,omitempty"`
				Issues        *string `json:"issues,omitempty"`
				Labels        *string `json:"labels,omitempty"`
				Members       *string `json:"members,omitempty"`
				MergeRequests *string `json:"merge_requests,omitempty"`
				RepoBranches  *string `json:"repo_branches,omitempty"`
				Self          *string `json:"self,omitempty"`
			} `json:"_links,omitempty"`
			AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
			AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
			AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
			ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
			Archived                                 *bool     `json:"archived,omitempty"`
			AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
			AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
			AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
			AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
			AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
			AvatarUrl                                *string   `json:"avatar_url,omitempty"`
			BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
			BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
			BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
			CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
			CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
			CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
			CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
			CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
			CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
			CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
			CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
			CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
			CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
			CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
			CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
			CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
			ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
			ContainerExpirationPolicy                *struct {
				Cadence       *string `json:"cadence,omitempty"`
				Enabled       *string `json:"enabled,omitempty"`
				KeepN         *string `json:"keep_n,omitempty"`
				NameRegex     *string `json:"name_regex,omitempty"`
				NameRegexKeep *string `json:"name_regex_keep,omitempty"`
				NextRunAt     *string `json:"next_run_at,omitempty"`
				OlderThan     *string `json:"older_than,omitempty"`
			} `json:"container_expiration_policy,omitempty"`
			ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
			ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
			ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
			CreatedAt                    *time.Time `json:"created_at,omitempty"`
			CreatorId                    *int32     `json:"creator_id,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                            *string `json:"default_branch,omitempty"`
			Description                              *string `json:"description,omitempty"`
			DescriptionHtml                          *string `json:"description_html,omitempty"`
			EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
			EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
			EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
			EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
			ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
			FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

			// ForkedFromProject API_Entities_BasicProjectDetails model
			ForkedFromProject *struct {
				AvatarUrl *string    `json:"avatar_url,omitempty"`
				CreatedAt *time.Time `json:"created_at,omitempty"`

				// CustomAttributes API_Entities_CustomAttribute model
				CustomAttributes *struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				DefaultBranch  *string    `json:"default_branch,omitempty"`
				Description    *string    `json:"description,omitempty"`
				ForksCount     *int32     `json:"forks_count,omitempty"`
				HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
				Id             *int32     `json:"id,omitempty"`
				LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
				License        *struct {
					HtmlUrl   *string `json:"html_url,omitempty"`
					Key       *string `json:"key,omitempty"`
					Name      *string `json:"name,omitempty"`
					Nickname  *string `json:"nickname,omitempty"`
					SourceUrl *string `json:"source_url,omitempty"`
				} `json:"license,omitempty"`
				LicenseUrl        *string `json:"license_url,omitempty"`
				Name              *string `json:"name,omitempty"`
				NameWithNamespace *string `json:"name_with_namespace,omitempty"`
				Namespace         *struct {
					AvatarUrl *string `json:"avatar_url,omitempty"`
					FullPath  *string `json:"full_path,omitempty"`
					Id        *int32  `json:"id,omitempty"`
					Kind      *string `json:"kind,omitempty"`
					Name      *string `json:"name,omitempty"`
					ParentId  *int32  `json:"parent_id,omitempty"`
					Path      *string `json:"path,omitempty"`
					WebUrl    *string `json:"web_url,omitempty"`
				} `json:"namespace,omitempty"`
				Path              *string   `json:"path,omitempty"`
				PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
				ReadmeUrl         *string   `json:"readme_url,omitempty"`
				RepositoryStorage *string   `json:"repository_storage,omitempty"`
				SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
				StarCount         *int32    `json:"star_count,omitempty"`
				TagList           *[]string `json:"tag_list,omitempty"`
				Topics            *[]string `json:"topics,omitempty"`
				WebUrl            *string   `json:"web_url,omitempty"`
			} `json:"forked_from_project,omitempty"`
			ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
			ForksCount                *int32     `json:"forks_count,omitempty"`
			GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
			HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
			Id                        *int32     `json:"id,omitempty"`
			ImportError               *string    `json:"import_error,omitempty"`
			ImportStatus              *string    `json:"import_status,omitempty"`
			ImportType                *string    `json:"import_type,omitempty"`
			ImportUrl                 *string    `json:"import_url,omitempty"`
			InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
			IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
			IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
			IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
			IssuesTemplate            *string    `json:"issues_template,omitempty"`
			JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
			KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
			LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
			LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
			License                   *struct {
				HtmlUrl   *string `json:"html_url,omitempty"`
				Key       *string `json:"key,omitempty"`
				Name      *string `json:"name,omitempty"`
				Nickname  *string `json:"nickname,omitempty"`
				SourceUrl *string `json:"source_url,omitempty"`
			} `json:"license,omitempty"`
			LicenseUrl                       *string `json:"license_url,omitempty"`
			MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
			MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
			MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
			MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
			MergeMethod                      *string `json:"merge_method,omitempty"`
			MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
			MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
			MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
			MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
			MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
			MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
			MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
			Mirror                           *string `json:"mirror,omitempty"`
			MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
			MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
			MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
			ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
			ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
			MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
			MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
			Name                             *string `json:"name,omitempty"`
			NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
			Namespace                        *struct {
				AvatarUrl *string `json:"avatar_url,omitempty"`
				FullPath  *string `json:"full_path,omitempty"`
				Id        *int32  `json:"id,omitempty"`
				Kind      *string `json:"kind,omitempty"`
				Name      *string `json:"name,omitempty"`
				ParentId  *int32  `json:"parent_id,omitempty"`
				Path      *string `json:"path,omitempty"`
				WebUrl    *string `json:"web_url,omitempty"`
			} `json:"namespace,omitempty"`
			OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
			OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
			OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
			OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
			OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

			// Owner API_Entities_UserBasic model
			Owner *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"owner,omitempty"`
			PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
			PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
			Path                             *string   `json:"path,omitempty"`
			PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
			PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
			PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
			PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
			PublicJobs                       *bool     `json:"public_jobs,omitempty"`
			ReadmeUrl                        *string   `json:"readme_url,omitempty"`
			ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
			RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
			RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
			RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
			RepositoryStorage                *string   `json:"repository_storage,omitempty"`
			RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
			RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
			RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
			ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
			RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
			RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
			RunnersToken                     *string   `json:"runners_token,omitempty"`
			SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
			SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
			SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
			ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
			ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
			SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
			SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
			SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
			SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
			SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
			SquashOption                     *string   `json:"squash_option,omitempty"`
			SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
			StarCount                        *int32    `json:"star_count,omitempty"`
			Statistics                       *struct {
				CommitCount           *string `json:"commit_count,omitempty"`
				ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
			TagList                                *[]string  `json:"tag_list,omitempty"`
			Topics                                 *[]string  `json:"topics,omitempty"`
			UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
			Visibility                             *string    `json:"visibility,omitempty"`
			WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
			WebUrl                                 *string    `json:"web_url,omitempty"`
			WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
			WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
		} `json:"shared_projects,omitempty"`
		SharedRunnersMinutesLimit *string `json:"shared_runners_minutes_limit,omitempty"`
		SharedRunnersSetting      *string `json:"shared_runners_setting,omitempty"`
		SharedWithGroups          *string `json:"shared_with_groups,omitempty"`
		Statistics                *struct {
			JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
			LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
			PackagesSize          *string `json:"packages_size,omitempty"`
			PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
			RepositorySize        *string `json:"repository_size,omitempty"`
			SnippetsSize          *string `json:"snippets_size,omitempty"`
			StorageSize           *string `json:"storage_size,omitempty"`
			UploadsSize           *string `json:"uploads_size,omitempty"`
			WikiSize              *string `json:"wiki_size,omitempty"`
		} `json:"statistics,omitempty"`
		SubgroupCreationLevel                       *string `json:"subgroup_creation_level,omitempty"`
		TwoFactorGracePeriod                        *string `json:"two_factor_grace_period,omitempty"`
		UniqueProjectDownloadLimit                  *string `json:"unique_project_download_limit,omitempty"`
		UniqueProjectDownloadLimitAlertlist         *string `json:"unique_project_download_limit_alertlist,omitempty"`
		UniqueProjectDownloadLimitAllowlist         *string `json:"unique_project_download_limit_allowlist,omitempty"`
		UniqueProjectDownloadLimitIntervalInSeconds *string `json:"unique_project_download_limit_interval_in_seconds,omitempty"`
		Visibility                                  *string `json:"visibility,omitempty"`
		WebBasedCommitSigningEnabled                *string `json:"web_based_commit_signing_enabled,omitempty"`
		WebUrl                                      *string `json:"web_url,omitempty"`
		WikiAccessLevel                             *string `json:"wiki_access_level,omitempty"`
	}
}
type DeleteApiV4GroupsIdShareGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdSshCertificatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt *time.Time `json:"created_at,omitempty"`
		Id        *int32     `json:"id,omitempty"`
		Key       *string    `json:"key,omitempty"`
		Title     *string    `json:"title,omitempty"`
	}
}
type PostApiV4GroupsIdSshCertificatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt *time.Time `json:"created_at,omitempty"`
		Id        *int32     `json:"id,omitempty"`
		Key       *string    `json:"key,omitempty"`
		Title     *string    `json:"title,omitempty"`
	}
}
type DeleteApiV4GroupsIdSshCertificatesSshCertificatesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdSubgroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Archived          *bool   `json:"archived,omitempty"`
		AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
		AvatarUrl         *string `json:"avatar_url,omitempty"`
		CreatedAt         *string `json:"created_at,omitempty"`

		// CustomAttributes API_Entities_CustomAttribute model
		CustomAttributes *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		DefaultBranch                   *string `json:"default_branch,omitempty"`
		DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
		DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
		Description                     *string `json:"description,omitempty"`

		// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
		DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
		DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
		EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
		EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
		FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
		FullName               *string `json:"full_name,omitempty"`
		FullPath               *string `json:"full_path,omitempty"`
		Id                     *string `json:"id,omitempty"`
		LdapAccess             *string `json:"ldap_access,omitempty"`
		LdapCn                 *string `json:"ldap_cn,omitempty"`
		LdapGroupLinks         *struct {
			Cn           *string `json:"cn,omitempty"`
			Filter       *string `json:"filter,omitempty"`
			GroupAccess  *int32  `json:"group_access,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Provider     *string `json:"provider,omitempty"`
		} `json:"ldap_group_links,omitempty"`
		LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
		LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
		LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
		MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
		MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
		MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
		MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
		Name                           *string `json:"name,omitempty"`
		OrganizationId                 *string `json:"organization_id,omitempty"`
		ParentId                       *string `json:"parent_id,omitempty"`
		Path                           *string `json:"path,omitempty"`
		ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
		RepositoryStorage              *string `json:"repository_storage,omitempty"`
		RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
		RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
		RootStorageStatistics          *struct {
			// BuildArtifactsSize CI artifacts size in bytes.
			BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

			// ContainerRegistrySize container registry size in bytes.
			ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

			// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
			ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

			// DependencyProxySize Dependency Proxy sizes in bytes.
			DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

			// LfsObjectsSize LFS objects size in bytes.
			LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

			// PackagesSize Packages size in bytes.
			PackagesSize *int32 `json:"packages_size,omitempty"`

			// PipelineArtifactsSize CI pipeline artifacts size in bytes.
			PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

			// RepositorySize Git repository size in bytes.
			RepositorySize *int32 `json:"repository_size,omitempty"`

			// SnippetsSize Snippets size in bytes.
			SnippetsSize *int32 `json:"snippets_size,omitempty"`

			// StorageSize Total storage in bytes.
			StorageSize *int32 `json:"storage_size,omitempty"`

			// UploadsSize Uploads size in bytes.
			UploadsSize *int32 `json:"uploads_size,omitempty"`

			// WikiSize Wiki size in bytes.
			WikiSize *int32 `json:"wiki_size,omitempty"`
		} `json:"root_storage_statistics,omitempty"`
		SamlGroupLinks *struct {
			AccessLevel  *int32  `json:"access_level,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Name         *string `json:"name,omitempty"`
		} `json:"saml_group_links,omitempty"`
		ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
		SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
		Statistics           *struct {
			JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
			LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
			PackagesSize          *string `json:"packages_size,omitempty"`
			PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
			RepositorySize        *string `json:"repository_size,omitempty"`
			SnippetsSize          *string `json:"snippets_size,omitempty"`
			StorageSize           *string `json:"storage_size,omitempty"`
			UploadsSize           *string `json:"uploads_size,omitempty"`
			WikiSize              *string `json:"wiki_size,omitempty"`
		} `json:"statistics,omitempty"`
		SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
		TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
		Visibility                   *string `json:"visibility,omitempty"`
		WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
		WebUrl                       *string `json:"web_url,omitempty"`
		WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
	}
}
type PostApiV4GroupsIdTokensRevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type PostApiV4GroupsIdTransferResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdTransferLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Archived          *bool   `json:"archived,omitempty"`
		AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
		AvatarUrl         *string `json:"avatar_url,omitempty"`
		CreatedAt         *string `json:"created_at,omitempty"`

		// CustomAttributes API_Entities_CustomAttribute model
		CustomAttributes *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		DefaultBranch                   *string `json:"default_branch,omitempty"`
		DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
		DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
		Description                     *string `json:"description,omitempty"`

		// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
		DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
		DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
		EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
		EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
		FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
		FullName               *string `json:"full_name,omitempty"`
		FullPath               *string `json:"full_path,omitempty"`
		Id                     *string `json:"id,omitempty"`
		LdapAccess             *string `json:"ldap_access,omitempty"`
		LdapCn                 *string `json:"ldap_cn,omitempty"`
		LdapGroupLinks         *struct {
			Cn           *string `json:"cn,omitempty"`
			Filter       *string `json:"filter,omitempty"`
			GroupAccess  *int32  `json:"group_access,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Provider     *string `json:"provider,omitempty"`
		} `json:"ldap_group_links,omitempty"`
		LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
		LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
		LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
		MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
		MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
		MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
		MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
		Name                           *string `json:"name,omitempty"`
		OrganizationId                 *string `json:"organization_id,omitempty"`
		ParentId                       *string `json:"parent_id,omitempty"`
		Path                           *string `json:"path,omitempty"`
		ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
		RepositoryStorage              *string `json:"repository_storage,omitempty"`
		RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
		RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
		RootStorageStatistics          *struct {
			// BuildArtifactsSize CI artifacts size in bytes.
			BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

			// ContainerRegistrySize container registry size in bytes.
			ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

			// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
			ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

			// DependencyProxySize Dependency Proxy sizes in bytes.
			DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

			// LfsObjectsSize LFS objects size in bytes.
			LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

			// PackagesSize Packages size in bytes.
			PackagesSize *int32 `json:"packages_size,omitempty"`

			// PipelineArtifactsSize CI pipeline artifacts size in bytes.
			PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

			// RepositorySize Git repository size in bytes.
			RepositorySize *int32 `json:"repository_size,omitempty"`

			// SnippetsSize Snippets size in bytes.
			SnippetsSize *int32 `json:"snippets_size,omitempty"`

			// StorageSize Total storage in bytes.
			StorageSize *int32 `json:"storage_size,omitempty"`

			// UploadsSize Uploads size in bytes.
			UploadsSize *int32 `json:"uploads_size,omitempty"`

			// WikiSize Wiki size in bytes.
			WikiSize *int32 `json:"wiki_size,omitempty"`
		} `json:"root_storage_statistics,omitempty"`
		SamlGroupLinks *struct {
			AccessLevel  *int32  `json:"access_level,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Name         *string `json:"name,omitempty"`
		} `json:"saml_group_links,omitempty"`
		ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
		SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
		Statistics           *struct {
			JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
			LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
			PackagesSize          *string `json:"packages_size,omitempty"`
			PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
			RepositorySize        *string `json:"repository_size,omitempty"`
			SnippetsSize          *string `json:"snippets_size,omitempty"`
			StorageSize           *string `json:"storage_size,omitempty"`
			UploadsSize           *string `json:"uploads_size,omitempty"`
			WikiSize              *string `json:"wiki_size,omitempty"`
		} `json:"statistics,omitempty"`
		SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
		TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
		Visibility                   *string `json:"visibility,omitempty"`
		WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
		WebUrl                       *string `json:"web_url,omitempty"`
		WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
	}
}
type PostApiV4GroupsIdUnarchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Archived          *bool   `json:"archived,omitempty"`
		AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
		AvatarUrl         *string `json:"avatar_url,omitempty"`
		CreatedAt         *string `json:"created_at,omitempty"`

		// CustomAttributes API_Entities_CustomAttribute model
		CustomAttributes *struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		DefaultBranch                   *string `json:"default_branch,omitempty"`
		DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
		DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
		Description                     *string `json:"description,omitempty"`

		// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
		DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
		DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
		EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
		EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
		FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
		FullName               *string `json:"full_name,omitempty"`
		FullPath               *string `json:"full_path,omitempty"`
		Id                     *string `json:"id,omitempty"`
		LdapAccess             *string `json:"ldap_access,omitempty"`
		LdapCn                 *string `json:"ldap_cn,omitempty"`
		LdapGroupLinks         *struct {
			Cn           *string `json:"cn,omitempty"`
			Filter       *string `json:"filter,omitempty"`
			GroupAccess  *int32  `json:"group_access,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Provider     *string `json:"provider,omitempty"`
		} `json:"ldap_group_links,omitempty"`
		LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
		LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
		LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
		MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
		MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
		MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
		MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
		Name                           *string `json:"name,omitempty"`
		OrganizationId                 *string `json:"organization_id,omitempty"`
		ParentId                       *string `json:"parent_id,omitempty"`
		Path                           *string `json:"path,omitempty"`
		ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
		RepositoryStorage              *string `json:"repository_storage,omitempty"`
		RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
		RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
		RootStorageStatistics          *struct {
			// BuildArtifactsSize CI artifacts size in bytes.
			BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

			// ContainerRegistrySize container registry size in bytes.
			ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

			// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
			ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

			// DependencyProxySize Dependency Proxy sizes in bytes.
			DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

			// LfsObjectsSize LFS objects size in bytes.
			LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

			// PackagesSize Packages size in bytes.
			PackagesSize *int32 `json:"packages_size,omitempty"`

			// PipelineArtifactsSize CI pipeline artifacts size in bytes.
			PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

			// RepositorySize Git repository size in bytes.
			RepositorySize *int32 `json:"repository_size,omitempty"`

			// SnippetsSize Snippets size in bytes.
			SnippetsSize *int32 `json:"snippets_size,omitempty"`

			// StorageSize Total storage in bytes.
			StorageSize *int32 `json:"storage_size,omitempty"`

			// UploadsSize Uploads size in bytes.
			UploadsSize *int32 `json:"uploads_size,omitempty"`

			// WikiSize Wiki size in bytes.
			WikiSize *int32 `json:"wiki_size,omitempty"`
		} `json:"root_storage_statistics,omitempty"`
		SamlGroupLinks *struct {
			AccessLevel  *int32  `json:"access_level,omitempty"`
			MemberRoleId *int32  `json:"member_role_id,omitempty"`
			Name         *string `json:"name,omitempty"`
		} `json:"saml_group_links,omitempty"`
		ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
		SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
		Statistics           *struct {
			JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
			LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
			PackagesSize          *string `json:"packages_size,omitempty"`
			PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
			RepositorySize        *string `json:"repository_size,omitempty"`
			SnippetsSize          *string `json:"snippets_size,omitempty"`
			StorageSize           *string `json:"storage_size,omitempty"`
			UploadsSize           *string `json:"uploads_size,omitempty"`
			WikiSize              *string `json:"wiki_size,omitempty"`
		} `json:"statistics,omitempty"`
		SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
		TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
		Visibility                   *string `json:"visibility,omitempty"`
		WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
		WebUrl                       *string `json:"web_url,omitempty"`
		WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
	}
}
type GetApiV4GroupsIdUploadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt  *string `json:"created_at,omitempty"`
		Filename   *string `json:"filename,omitempty"`
		Id         *string `json:"id,omitempty"`
		Size       *string `json:"size,omitempty"`
		UploadedBy *struct {
			Id          *int32  `json:"id,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			Username    *string `json:"username,omitempty"`
		} `json:"uploaded_by,omitempty"`
	}
}
type DeleteApiV4GroupsIdUploadsSecretFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdUploadsSecretFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}
type DeleteApiV4GroupsIdUploadsUploadIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdUploadsUploadIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}
type GetApiV4GroupsIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AvatarPath       *string    `json:"avatar_path,omitempty"`
		AvatarUrl        *string    `json:"avatar_url,omitempty"`
		Bio              *string    `json:"bio,omitempty"`
		Bot              *string    `json:"bot,omitempty"`
		CanCreateGroup   *bool      `json:"can_create_group,omitempty"`
		CanCreateProject *bool      `json:"can_create_project,omitempty"`
		ColorSchemeId    *int32     `json:"color_scheme_id,omitempty"`
		CommitEmail      *string    `json:"commit_email,omitempty"`
		ConfirmedAt      *time.Time `json:"confirmed_at,omitempty"`
		CreatedAt        *string    `json:"created_at,omitempty"`
		CurrentSignInAt  *time.Time `json:"current_sign_in_at,omitempty"`
		CustomAttributes *[]struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		} `json:"custom_attributes,omitempty"`
		Discord                        *string `json:"discord,omitempty"`
		Email                          *string `json:"email,omitempty"`
		External                       *string `json:"external,omitempty"`
		ExtraSharedRunnersMinutesLimit *string `json:"extra_shared_runners_minutes_limit,omitempty"`
		Followers                      *string `json:"followers,omitempty"`
		Following                      *string `json:"following,omitempty"`
		Github                         *string `json:"github,omitempty"`
		Id                             *int32  `json:"id,omitempty"`
		Identities                     *struct {
			ExternUid      *string `json:"extern_uid,omitempty"`
			Provider       *string `json:"provider,omitempty"`
			SamlProviderId *string `json:"saml_provider_id,omitempty"`
		} `json:"identities,omitempty"`
		IsFollowed     *string    `json:"is_followed,omitempty"`
		JobTitle       *string    `json:"job_title,omitempty"`
		LastActivityOn *time.Time `json:"last_activity_on,omitempty"`
		LastSignInAt   *time.Time `json:"last_sign_in_at,omitempty"`
		Linkedin       *string    `json:"linkedin,omitempty"`
		LocalTime      *string    `json:"local_time,omitempty"`
		Location       *string    `json:"location,omitempty"`
		Locked         *bool      `json:"locked,omitempty"`
		Name           *string    `json:"name,omitempty"`
		Organization   *string    `json:"organization,omitempty"`
		PrivateProfile *bool      `json:"private_profile,omitempty"`
		ProjectsLimit  *int32     `json:"projects_limit,omitempty"`
		Pronouns       *string    `json:"pronouns,omitempty"`
		PublicEmail    *string    `json:"public_email,omitempty"`
		ScimIdentities *struct {
			Active    *string `json:"active,omitempty"`
			ExternUid *string `json:"extern_uid,omitempty"`
			GroupId   *string `json:"group_id,omitempty"`
		} `json:"scim_identities,omitempty"`
		SharedRunnersMinutesLimit *string `json:"shared_runners_minutes_limit,omitempty"`
		Skype                     *string `json:"skype,omitempty"`
		State                     *string `json:"state,omitempty"`
		ThemeId                   *int32  `json:"theme_id,omitempty"`
		Twitter                   *string `json:"twitter,omitempty"`
		TwoFactorEnabled          *bool   `json:"two_factor_enabled,omitempty"`
		Username                  *string `json:"username,omitempty"`
		WebUrl                    *string `json:"web_url,omitempty"`
		WebsiteUrl                *string `json:"website_url,omitempty"`
		WorkInformation           *string `json:"work_information,omitempty"`
	}
}
type GetApiV4GroupsIdVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Description      *string `json:"description,omitempty"`
		EnvironmentScope *string `json:"environment_scope,omitempty"`
		Hidden           *bool   `json:"hidden,omitempty"`
		Key              *string `json:"key,omitempty"`
		Masked           *bool   `json:"masked,omitempty"`
		Protected        *bool   `json:"protected,omitempty"`
		Raw              *bool   `json:"raw,omitempty"`
		Value            *string `json:"value,omitempty"`
		VariableType     *string `json:"variable_type,omitempty"`
	}
}
type PostApiV4GroupsIdVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Description      *string `json:"description,omitempty"`
		EnvironmentScope *string `json:"environment_scope,omitempty"`
		Hidden           *bool   `json:"hidden,omitempty"`
		Key              *string `json:"key,omitempty"`
		Masked           *bool   `json:"masked,omitempty"`
		Protected        *bool   `json:"protected,omitempty"`
		Raw              *bool   `json:"raw,omitempty"`
		Value            *string `json:"value,omitempty"`
		VariableType     *string `json:"variable_type,omitempty"`
	}
}
type DeleteApiV4GroupsIdVariablesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *struct {
		Description      *string `json:"description,omitempty"`
		EnvironmentScope *string `json:"environment_scope,omitempty"`
		Hidden           *bool   `json:"hidden,omitempty"`
		Key              *string `json:"key,omitempty"`
		Masked           *bool   `json:"masked,omitempty"`
		Protected        *bool   `json:"protected,omitempty"`
		Raw              *bool   `json:"raw,omitempty"`
		Value            *string `json:"value,omitempty"`
		VariableType     *string `json:"variable_type,omitempty"`
	}
}
type GetApiV4GroupsIdVariablesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Description      *string `json:"description,omitempty"`
		EnvironmentScope *string `json:"environment_scope,omitempty"`
		Hidden           *bool   `json:"hidden,omitempty"`
		Key              *string `json:"key,omitempty"`
		Masked           *bool   `json:"masked,omitempty"`
		Protected        *bool   `json:"protected,omitempty"`
		Raw              *bool   `json:"raw,omitempty"`
		Value            *string `json:"value,omitempty"`
		VariableType     *string `json:"variable_type,omitempty"`
	}
}
type PutApiV4GroupsIdVariablesKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Description      *string `json:"description,omitempty"`
		EnvironmentScope *string `json:"environment_scope,omitempty"`
		Hidden           *bool   `json:"hidden,omitempty"`
		Key              *string `json:"key,omitempty"`
		Masked           *bool   `json:"masked,omitempty"`
		Protected        *bool   `json:"protected,omitempty"`
		Raw              *bool   `json:"raw,omitempty"`
		Value            *string `json:"value,omitempty"`
		VariableType     *string `json:"variable_type,omitempty"`
	}
}
type GetApiV4GroupsIdWikisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Format         *string `json:"format,omitempty"`
		Slug           *string `json:"slug,omitempty"`
		Title          *string `json:"title,omitempty"`
		WikiPageMetaId *int32  `json:"wiki_page_meta_id,omitempty"`
	}
}
type PostApiV4GroupsIdWikisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Content        *string                 `json:"content,omitempty"`
		Encoding       *string                 `json:"encoding,omitempty"`
		Format         *string                 `json:"format,omitempty"`
		FrontMatter    *map[string]interface{} `json:"front_matter,omitempty"`
		Slug           *string                 `json:"slug,omitempty"`
		Title          *string                 `json:"title,omitempty"`
		WikiPageMetaId *int32                  `json:"wiki_page_meta_id,omitempty"`
	}
}
type PostApiV4GroupsIdWikisAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Branch   *string `json:"branch,omitempty"`
		FileName *string `json:"file_name,omitempty"`
		FilePath *string `json:"file_path,omitempty"`
		Link     *struct {
			Markdown *string `json:"markdown,omitempty"`
			Url      *string `json:"url,omitempty"`
		} `json:"link,omitempty"`
	}
}
type DeleteApiV4GroupsIdWikisSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}
type GetApiV4GroupsIdWikisSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Content        *string                 `json:"content,omitempty"`
		Encoding       *string                 `json:"encoding,omitempty"`
		Format         *string                 `json:"format,omitempty"`
		FrontMatter    *map[string]interface{} `json:"front_matter,omitempty"`
		Slug           *string                 `json:"slug,omitempty"`
		Title          *string                 `json:"title,omitempty"`
		WikiPageMetaId *int32                  `json:"wiki_page_meta_id,omitempty"`
	}
}
type PutApiV4GroupsIdWikisSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Content        *string                 `json:"content,omitempty"`
		Encoding       *string                 `json:"encoding,omitempty"`
		Format         *string                 `json:"format,omitempty"`
		FrontMatter    *map[string]interface{} `json:"front_matter,omitempty"`
		Slug           *string                 `json:"slug,omitempty"`
		Title          *string                 `json:"title,omitempty"`
		WikiPageMetaId *int32                  `json:"wiki_page_meta_id,omitempty"`
	}
}

func (c *Client) GetApiV4GroupIdPackagesComposerpackageName(ctx context.Context, id string, params *GetApiV4GroupIdPackagesComposerpackageNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupIdPackagesComposerpackageNameRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupIdPackagesComposerPSha(ctx context.Context, id string, sha string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupIdPackagesComposerPShaRequest(c.Server, id, sha)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupIdPackagesComposerP2packageName(ctx context.Context, id string, params *GetApiV4GroupIdPackagesComposerP2packageNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupIdPackagesComposerP2packageNameRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupIdPackagesComposerPackages(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupIdPackagesComposerPackagesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4Groups(ctx context.Context, params *GetApiV4GroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4Groups(ctx context.Context, body PostApiV4GroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsImportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsImportAuthorize(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsImportAuthorizeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsId(ctx context.Context, id string, params *GetApiV4GroupsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsId(ctx context.Context, id string, body PutApiV4GroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdDebianDistributions(ctx context.Context, id string, params *GetApiV4GroupsIdDebianDistributionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdDebianDistributionsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdDebianDistributionsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdDebianDistributionsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdDebianDistributions(ctx context.Context, id string, body PostApiV4GroupsIdDebianDistributionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdDebianDistributionsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdDebianDistributionsCodename(ctx context.Context, id string, codename string, params *DeleteApiV4GroupsIdDebianDistributionsCodenameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdDebianDistributionsCodenameRequest(c.Server, id, codename, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdDebianDistributionsCodename(ctx context.Context, id string, codename string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdDebianDistributionsCodenameRequest(c.Server, id, codename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdDebianDistributionsCodenameWithBody(ctx context.Context, id string, codename string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdDebianDistributionsCodenameRequestWithBody(c.Server, id, codename, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdDebianDistributionsCodename(ctx context.Context, id string, codename string, body PutApiV4GroupsIdDebianDistributionsCodenameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdDebianDistributionsCodenameRequest(c.Server, id, codename, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdDebianDistributionsCodenameKeyAsc(ctx context.Context, id string, codename string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdDebianDistributionsCodenameKeyAscRequest(c.Server, id, codename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesDebianDistsdistributionInrelease(ctx context.Context, id string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionInreleaseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesDebianDistsdistributionInreleaseRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesDebianDistsdistributionRelease(ctx context.Context, id string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesDebianDistsdistributionReleaseRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpg(ctx context.Context, id string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpgParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpgRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackages(ctx context.Context, id string, component string, architecture string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackagesRequest(c.Server, id, component, architecture, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256(ctx context.Context, id string, component string, architecture string, fileSha256 int32, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256Request(c.Server, id, component, architecture, fileSha256, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackages(ctx context.Context, id string, component string, architecture string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackagesRequest(c.Server, id, component, architecture, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256(ctx context.Context, id string, component string, architecture string, fileSha256 int32, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256Request(c.Server, id, component, architecture, fileSha256, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSources(ctx context.Context, id string, component string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSourcesRequest(c.Server, id, component, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256(ctx context.Context, id string, component string, fileSha256 int32, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256Request(c.Server, id, component, fileSha256, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesDebianPoolDistributionProjectIdLetterPackageNamePackageVersionFileName(ctx context.Context, id string, distribution string, projectId int32, letter string, packageName string, packageVersion string, fileName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesDebianPoolDistributionProjectIdLetterPackageNamePackageVersionFileNameRequest(c.Server, id, distribution, projectId, letter, packageName, packageVersion, fileName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesMavenpathFileName(ctx context.Context, id string, fileName string, params *GetApiV4GroupsIdPackagesMavenpathFileNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesMavenpathFileNameRequest(c.Server, id, fileName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesNpmpackageName(ctx context.Context, id string, params *GetApiV4GroupsIdPackagesNpmpackageNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesNpmpackageNameRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdPackagesNpmNpmV1SecurityAdvisoriesBulk(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdPackagesNpmNpmV1SecurityAdvisoriesBulkRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdPackagesNpmNpmV1SecurityAuditsQuick(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdPackagesNpmNpmV1SecurityAuditsQuickRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesNpmPackagepackageNameDistTags(ctx context.Context, id string, params *GetApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTag(ctx context.Context, id string, tag string, params *DeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagRequest(c.Server, id, tag, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagWithBody(ctx context.Context, id string, tag string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagRequestWithBody(c.Server, id, tag, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTag(ctx context.Context, id string, tag string, body PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagRequest(c.Server, id, tag, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesNugetIndex(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesNugetIndexRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesNugetQuery(ctx context.Context, id int32, params *GetApiV4GroupsIdPackagesNugetQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesNugetQueryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileName(ctx context.Context, id int32, params *GetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileNameRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesNugetV2(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesNugetV2Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesNugetV2Metadata(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesNugetV2MetadataRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifier(ctx context.Context, id int32, sha256 string, params *GetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifierParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifierRequest(c.Server, id, sha256, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesPypiSimple(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesPypiSimpleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackagesPypiSimplepackageName(ctx context.Context, id int32, params *GetApiV4GroupsIdPackagesPypiSimplepackageNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesPypiSimplepackageNameRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdAccessRequests(ctx context.Context, id string, params *GetApiV4GroupsIdAccessRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdAccessRequestsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdAccessRequests(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdAccessRequestsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdAccessRequestsUserId(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdAccessRequestsUserIdRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdAccessRequestsUserIdApproveWithBody(ctx context.Context, id string, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdAccessRequestsUserIdApproveRequestWithBody(c.Server, id, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdAccessRequestsUserIdApprove(ctx context.Context, id string, userId int32, body PutApiV4GroupsIdAccessRequestsUserIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdAccessRequestsUserIdApproveRequest(c.Server, id, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdAccessTokensSelfRotateWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdAccessTokensSelfRotateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdAccessTokensSelfRotate(ctx context.Context, id string, body PostApiV4GroupsIdAccessTokensSelfRotateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdAccessTokensSelfRotateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdArchive(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdArchiveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdAuditEvents(ctx context.Context, id int32, params *GetApiV4GroupsIdAuditEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdAuditEventsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdAuditEventsAuditEventId(ctx context.Context, id int32, auditEventId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdAuditEventsAuditEventIdRequest(c.Server, id, auditEventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdAvatar(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdAvatarRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdBadges(ctx context.Context, id string, params *GetApiV4GroupsIdBadgesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdBadgesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdBadgesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdBadgesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdBadges(ctx context.Context, id string, body PostApiV4GroupsIdBadgesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdBadgesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdBadgesRender(ctx context.Context, id string, params *GetApiV4GroupsIdBadgesRenderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdBadgesRenderRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdBadgesBadgeId(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdBadgesBadgeIdRequest(c.Server, id, badgeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdBadgesBadgeId(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdBadgesBadgeIdRequest(c.Server, id, badgeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdBadgesBadgeIdWithBody(ctx context.Context, id string, badgeId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdBadgesBadgeIdRequestWithBody(c.Server, id, badgeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdBadgesBadgeId(ctx context.Context, id string, badgeId int32, body PutApiV4GroupsIdBadgesBadgeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdBadgesBadgeIdRequest(c.Server, id, badgeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdBillableMembers(ctx context.Context, id string, params *GetApiV4GroupsIdBillableMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdBillableMembersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdBillableMembersUserId(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdBillableMembersUserIdRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdBillableMembersUserIdIndirect(ctx context.Context, id string, userId int32, params *GetApiV4GroupsIdBillableMembersUserIdIndirectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdBillableMembersUserIdIndirectRequest(c.Server, id, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdBillableMembersUserIdMemberships(ctx context.Context, id string, userId int32, params *GetApiV4GroupsIdBillableMembersUserIdMembershipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdBillableMembersUserIdMembershipsRequest(c.Server, id, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdClusters(ctx context.Context, id string, params *GetApiV4GroupsIdClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdClustersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdClustersUserWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdClustersUserRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdClustersUser(ctx context.Context, id string, body PostApiV4GroupsIdClustersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdClustersUserRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdClustersClusterId(ctx context.Context, id string, clusterId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdClustersClusterIdRequest(c.Server, id, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdClustersClusterId(ctx context.Context, id string, clusterId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdClustersClusterIdRequest(c.Server, id, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdClustersClusterIdWithBody(ctx context.Context, id string, clusterId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdClustersClusterIdRequestWithBody(c.Server, id, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdClustersClusterId(ctx context.Context, id string, clusterId int32, body PutApiV4GroupsIdClustersClusterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdClustersClusterIdRequest(c.Server, id, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdCustomAttributes(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdCustomAttributesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdCustomAttributesKey(ctx context.Context, id int32, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdCustomAttributesKeyRequest(c.Server, id, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdCustomAttributesKey(ctx context.Context, id int32, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdCustomAttributesKeyRequest(c.Server, id, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdCustomAttributesKeyWithBody(ctx context.Context, id int32, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdCustomAttributesKeyRequestWithBody(c.Server, id, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdCustomAttributesKey(ctx context.Context, id int32, key string, body PutApiV4GroupsIdCustomAttributesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdCustomAttributesKeyRequest(c.Server, id, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdDependencyProxyCache(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdDependencyProxyCacheRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdDeployTokens(ctx context.Context, id int32, params *GetApiV4GroupsIdDeployTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdDeployTokensRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdDeployTokensWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdDeployTokensRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdDeployTokens(ctx context.Context, id int32, body PostApiV4GroupsIdDeployTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdDeployTokensRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdDeployTokensTokenId(ctx context.Context, id int32, tokenId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdDeployTokensTokenIdRequest(c.Server, id, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdDeployTokensTokenId(ctx context.Context, id int32, tokenId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdDeployTokensTokenIdRequest(c.Server, id, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdDescendantGroups(ctx context.Context, id string, params *GetApiV4GroupsIdDescendantGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdDescendantGroupsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdEpicsEpicIidAwardEmoji(ctx context.Context, id string, epicIid int32, params *GetApiV4GroupsIdEpicsEpicIidAwardEmojiParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdEpicsEpicIidAwardEmojiRequest(c.Server, id, epicIid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdEpicsEpicIidAwardEmojiWithBody(ctx context.Context, id int32, epicIid int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdEpicsEpicIidAwardEmojiRequestWithBody(c.Server, id, epicIid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdEpicsEpicIidAwardEmoji(ctx context.Context, id int32, epicIid int32, body PostApiV4GroupsIdEpicsEpicIidAwardEmojiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdEpicsEpicIidAwardEmojiRequest(c.Server, id, epicIid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdEpicsEpicIidAwardEmojiAwardId(ctx context.Context, id int32, epicIid int32, awardId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdRequest(c.Server, id, epicIid, awardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdEpicsEpicIidAwardEmojiAwardId(ctx context.Context, id int32, epicIid int32, awardId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdRequest(c.Server, id, epicIid, awardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmoji(ctx context.Context, id int32, epicIid int32, noteId int32, params *GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiRequest(c.Server, id, epicIid, noteId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiWithBody(ctx context.Context, id int32, epicIid int32, noteId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiRequestWithBody(c.Server, id, epicIid, noteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmoji(ctx context.Context, id int32, epicIid int32, noteId int32, body PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiRequest(c.Server, id, epicIid, noteId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardId(ctx context.Context, id int32, epicIid int32, noteId int32, awardId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdRequest(c.Server, id, epicIid, noteId, awardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardId(ctx context.Context, id int32, epicIid int32, noteId int32, awardId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdRequest(c.Server, id, epicIid, noteId, awardId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdExport(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdExportRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdExportDownload(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdExportDownloadRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdExportRelationsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdExportRelationsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdExportRelations(ctx context.Context, id string, body PostApiV4GroupsIdExportRelationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdExportRelationsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdExportRelationsDownload(ctx context.Context, id string, params *GetApiV4GroupsIdExportRelationsDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdExportRelationsDownloadRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdExportRelationsStatus(ctx context.Context, id string, params *GetApiV4GroupsIdExportRelationsStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdExportRelationsStatusRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdGroupsShared(ctx context.Context, id string, params *GetApiV4GroupsIdGroupsSharedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdGroupsSharedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdIntegrations(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdIntegrationsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsAppleAppStoreWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsAppleAppStoreRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsAppleAppStore(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsAppleAppStoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsAppleAppStoreRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsAsanaWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsAsanaRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsAsana(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsAsanaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsAsanaRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsAssemblaWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsAssemblaRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsAssembla(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsAssemblaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsAssemblaRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsBambooWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsBambooRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsBamboo(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsBambooJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsBambooRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsBugzillaWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsBugzillaRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsBugzilla(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsBugzillaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsBugzillaRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsBuildkiteWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsBuildkiteRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsBuildkite(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsBuildkiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsBuildkiteRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsCampfireWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsCampfireRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsCampfire(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsCampfireJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsCampfireRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsClickupWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsClickupRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsClickup(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsClickupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsClickupRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsConfluenceWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsConfluenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsConfluence(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsConfluenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsConfluenceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsCustomIssueTrackerWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsCustomIssueTrackerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsCustomIssueTracker(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsCustomIssueTrackerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsCustomIssueTrackerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsDatadogWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsDatadogRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsDatadog(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsDatadogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsDatadogRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsDiffblueCoverWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsDiffblueCoverRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsDiffblueCover(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsDiffblueCoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsDiffblueCoverRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsDiscordWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsDiscordRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsDiscord(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsDiscordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsDiscordRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsDroneCiWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsDroneCiRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsDroneCi(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsDroneCiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsDroneCiRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsEmailsOnPushWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsEmailsOnPushRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsEmailsOnPush(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsEmailsOnPushJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsEmailsOnPushRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsEwmWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsEwmRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsEwm(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsEwmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsEwmRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsExternalWikiWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsExternalWikiRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsExternalWiki(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsExternalWikiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsExternalWikiRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsGitGuardianWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsGitGuardianRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsGitGuardian(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsGitGuardianJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsGitGuardianRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsGithubWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsGithubRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsGithub(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsGithubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsGithubRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsGitlabSlackApplicationWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsGitlabSlackApplicationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsGitlabSlackApplication(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsGitlabSlackApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsGitlabSlackApplicationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistry(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederation(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsGooglePlayWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsGooglePlayRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsGooglePlay(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsGooglePlayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsGooglePlayRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsHangoutsChatWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsHangoutsChatRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsHangoutsChat(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsHangoutsChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsHangoutsChatRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsHarborWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsHarborRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsHarbor(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsHarborJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsHarborRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsIrkerWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsIrkerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsIrker(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsIrkerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsIrkerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsJenkinsWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsJenkinsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsJenkins(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsJenkinsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsJenkinsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsJiraWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsJiraRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsJira(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsJiraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsJiraRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsJiraCloudAppWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsJiraCloudAppRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsJiraCloudApp(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsJiraCloudAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsJiraCloudAppRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsMatrixWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsMatrixRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsMatrix(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsMatrixJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsMatrixRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsMattermostWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsMattermostRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsMattermost(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsMattermostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsMattermostRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsMattermostSlashCommandsWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsMattermostSlashCommandsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsMattermostSlashCommands(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsMattermostSlashCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsMattermostSlashCommandsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsMicrosoftTeamsWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsMicrosoftTeamsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsMicrosoftTeams(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsMicrosoftTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsMicrosoftTeamsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsMockCiWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsMockCiRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsMockCi(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsMockCiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsMockCiRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsMockMonitoringWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsMockMonitoringRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsMockMonitoring(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsMockMonitoringJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsMockMonitoringRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsPackagistWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsPackagistRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsPackagist(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsPackagistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsPackagistRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsPhorgeWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsPhorgeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsPhorge(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsPhorgeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsPhorgeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsPipelinesEmailWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsPipelinesEmailRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsPipelinesEmail(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsPipelinesEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsPipelinesEmailRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsPivotaltrackerWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsPivotaltrackerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsPivotaltracker(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsPivotaltrackerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsPivotaltrackerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsPumbleWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsPumbleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsPumble(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsPumbleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsPumbleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsPushoverWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsPushoverRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsPushover(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsPushoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsPushoverRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsRedmineWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsRedmineRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsRedmine(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsRedmineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsRedmineRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsSlackWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsSlackRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsSlack(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsSlackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsSlackRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsSlackSlashCommandsWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsSlackSlashCommandsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsSlackSlashCommands(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsSlackSlashCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsSlackSlashCommandsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsSquashTmWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsSquashTmRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsSquashTm(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsSquashTmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsSquashTmRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsTeamcityWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsTeamcityRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsTeamcity(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsTeamcityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsTeamcityRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsTelegramWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsTelegramRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsTelegram(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsTelegramJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsTelegramRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsUnifyCircuitWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsUnifyCircuitRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsUnifyCircuit(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsUnifyCircuitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsUnifyCircuitRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsWebexTeamsWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsWebexTeamsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsWebexTeams(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsWebexTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsWebexTeamsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsYoutrackWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsYoutrackRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsYoutrack(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsYoutrackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsYoutrackRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsZentaoWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsZentaoRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdIntegrationsZentao(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsZentaoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdIntegrationsZentaoRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdIntegrationsSlug(ctx context.Context, id int32, slug DeleteApiV4GroupsIdIntegrationsSlugParamsSlug, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdIntegrationsSlugRequest(c.Server, id, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdIntegrationsSlug(ctx context.Context, id int32, slug GetApiV4GroupsIdIntegrationsSlugParamsSlug, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdIntegrationsSlugRequest(c.Server, id, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdInvitations(ctx context.Context, id string, params *GetApiV4GroupsIdInvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdInvitationsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdInvitationsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdInvitationsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdInvitations(ctx context.Context, id string, body PostApiV4GroupsIdInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdInvitationsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdInvitationsEmail(ctx context.Context, id string, email string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdInvitationsEmailRequest(c.Server, id, email)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdInvitationsEmailWithBody(ctx context.Context, id string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdInvitationsEmailRequestWithBody(c.Server, id, email, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdInvitationsEmail(ctx context.Context, id string, email string, body PutApiV4GroupsIdInvitationsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdInvitationsEmailRequest(c.Server, id, email, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdInvitedGroups(ctx context.Context, id string, params *GetApiV4GroupsIdInvitedGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdInvitedGroupsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdIssues(ctx context.Context, id string, params *GetApiV4GroupsIdIssuesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdIssuesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdLdapSync(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdLdapSyncRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdMembers(ctx context.Context, id string, params *GetApiV4GroupsIdMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdMembersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdMembersWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdMembersRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdMembers(ctx context.Context, id string, body PostApiV4GroupsIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdMembersRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdMembersAll(ctx context.Context, id string, params *GetApiV4GroupsIdMembersAllParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdMembersAllRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdMembersAllUserId(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdMembersAllUserIdRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdMembersApproveAll(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdMembersApproveAllRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdMembersMemberIdApprove(ctx context.Context, id string, memberId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdMembersMemberIdApproveRequest(c.Server, id, memberId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdMembersUserId(ctx context.Context, id string, userId int32, params *DeleteApiV4GroupsIdMembersUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdMembersUserIdRequest(c.Server, id, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdMembersUserId(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdMembersUserIdRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdMembersUserIdWithBody(ctx context.Context, id string, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdMembersUserIdRequestWithBody(c.Server, id, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdMembersUserId(ctx context.Context, id string, userId int32, body PutApiV4GroupsIdMembersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdMembersUserIdRequest(c.Server, id, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdMembersUserIdOverride(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdMembersUserIdOverrideRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdMembersUserIdOverride(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdMembersUserIdOverrideRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdMembersUserIdStateWithBody(ctx context.Context, id string, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdMembersUserIdStateRequestWithBody(c.Server, id, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdMembersUserIdState(ctx context.Context, id string, userId int32, body PutApiV4GroupsIdMembersUserIdStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdMembersUserIdStateRequest(c.Server, id, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdMergeRequests(ctx context.Context, id string, params *GetApiV4GroupsIdMergeRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdMergeRequestsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPackages(ctx context.Context, id string, params *GetApiV4GroupsIdPackagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPackagesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPendingMembers(ctx context.Context, id string, params *GetApiV4GroupsIdPendingMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPendingMembersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdPlaceholderReassignments(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdPlaceholderReassignmentsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdPlaceholderReassignmentsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdPlaceholderReassignmentsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdPlaceholderReassignments(ctx context.Context, id string, body PostApiV4GroupsIdPlaceholderReassignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdPlaceholderReassignmentsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdPlaceholderReassignmentsAuthorize(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdPlaceholderReassignmentsAuthorizeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdProjects(ctx context.Context, id string, params *GetApiV4GroupsIdProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdProjectsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdProjectsShared(ctx context.Context, id string, params *GetApiV4GroupsIdProjectsSharedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdProjectsSharedRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdProjectsProjectId(ctx context.Context, id string, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdProjectsProjectIdRequest(c.Server, id, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdProvisionedUsers(ctx context.Context, id int32, params *GetApiV4GroupsIdProvisionedUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdProvisionedUsersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdRegistryRepositories(ctx context.Context, id string, params *GetApiV4GroupsIdRegistryRepositoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdRegistryRepositoriesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdReleases(ctx context.Context, id string, params *GetApiV4GroupsIdReleasesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdReleasesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdRestore(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdRestoreRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdRunners(ctx context.Context, id string, params *GetApiV4GroupsIdRunnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdRunnersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdRunnersResetRegistrationToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdRunnersResetRegistrationTokenRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdSamlUsers(ctx context.Context, id int32, params *GetApiV4GroupsIdSamlUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdSamlUsersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdShareWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdShareRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdShare(ctx context.Context, id string, body PostApiV4GroupsIdShareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdShareRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdShareGroupId(ctx context.Context, id string, groupId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdShareGroupIdRequest(c.Server, id, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdSshCertificates(ctx context.Context, id int32, params *GetApiV4GroupsIdSshCertificatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdSshCertificatesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdSshCertificatesWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdSshCertificatesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdSshCertificates(ctx context.Context, id int32, body PostApiV4GroupsIdSshCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdSshCertificatesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdSshCertificatesSshCertificatesId(ctx context.Context, id int32, sshCertificatesId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdSshCertificatesSshCertificatesIdRequest(c.Server, id, sshCertificatesId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdSubgroups(ctx context.Context, id string, params *GetApiV4GroupsIdSubgroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdSubgroupsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdTokensRevokeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdTokensRevokeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdTokensRevoke(ctx context.Context, id string, body PostApiV4GroupsIdTokensRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdTokensRevokeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdTransferWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdTransferRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdTransfer(ctx context.Context, id string, body PostApiV4GroupsIdTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdTransferRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdTransferLocations(ctx context.Context, id string, params *GetApiV4GroupsIdTransferLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdTransferLocationsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdUnarchive(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdUnarchiveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdUploads(ctx context.Context, id int32, params *GetApiV4GroupsIdUploadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdUploadsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdUploadsSecretFilename(ctx context.Context, id int32, secret string, filename string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdUploadsSecretFilenameRequest(c.Server, id, secret, filename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdUploadsSecretFilename(ctx context.Context, id int32, secret string, filename string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdUploadsSecretFilenameRequest(c.Server, id, secret, filename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdUploadsUploadId(ctx context.Context, id int32, uploadId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdUploadsUploadIdRequest(c.Server, id, uploadId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdUploadsUploadId(ctx context.Context, id int32, uploadId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdUploadsUploadIdRequest(c.Server, id, uploadId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdUsers(ctx context.Context, id int32, params *GetApiV4GroupsIdUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdUsersRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdVariables(ctx context.Context, id string, params *GetApiV4GroupsIdVariablesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdVariablesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdVariablesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdVariablesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdVariables(ctx context.Context, id string, body PostApiV4GroupsIdVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdVariablesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdVariablesKey(ctx context.Context, id string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdVariablesKeyRequest(c.Server, id, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdVariablesKey(ctx context.Context, id string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdVariablesKeyRequest(c.Server, id, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdVariablesKeyWithBody(ctx context.Context, id string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdVariablesKeyRequestWithBody(c.Server, id, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdVariablesKey(ctx context.Context, id string, key string, body PutApiV4GroupsIdVariablesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdVariablesKeyRequest(c.Server, id, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdWikis(ctx context.Context, id int32, params *GetApiV4GroupsIdWikisParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdWikisRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdWikisWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdWikisRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdWikis(ctx context.Context, id int32, body PostApiV4GroupsIdWikisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdWikisRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdWikisAttachmentsWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdWikisAttachmentsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PostApiV4GroupsIdWikisAttachments(ctx context.Context, id int32, body PostApiV4GroupsIdWikisAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV4GroupsIdWikisAttachmentsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) DeleteApiV4GroupsIdWikisSlug(ctx context.Context, id int32, slug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV4GroupsIdWikisSlugRequest(c.Server, id, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) GetApiV4GroupsIdWikisSlug(ctx context.Context, id int32, slug string, params *GetApiV4GroupsIdWikisSlugParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV4GroupsIdWikisSlugRequest(c.Server, id, slug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdWikisSlugWithBody(ctx context.Context, id int32, slug int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdWikisSlugRequestWithBody(c.Server, id, slug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func (c *Client) PutApiV4GroupsIdWikisSlug(ctx context.Context, id int32, slug int32, body PutApiV4GroupsIdWikisSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV4GroupsIdWikisSlugRequest(c.Server, id, slug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}
func NewGetApiV4GroupIdPackagesComposerpackageNameRequest(server string, id string, params *GetApiV4GroupIdPackagesComposerpackageNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/group/%s/-/packages/composer/*package_name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupIdPackagesComposerPShaRequest(server string, id string, sha string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sha", runtime.ParamLocationPath, sha)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/group/%s/-/packages/composer/p/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupIdPackagesComposerP2packageNameRequest(server string, id string, params *GetApiV4GroupIdPackagesComposerP2packageNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/group/%s/-/packages/composer/p2/*package_name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupIdPackagesComposerPackagesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/group/%s/-/packages/composer/packages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsRequest(server string, params *GetApiV4GroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Statistics != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statistics", runtime.ParamLocationQuery, *params.Statistics); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipGroups != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "skip_groups", runtime.ParamLocationQuery, *params.SkipGroups); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AllAvailable != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all_available", runtime.ParamLocationQuery, *params.AllAvailable); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owned != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owned", runtime.ParamLocationQuery, *params.Owned); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinAccessLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_access_level", runtime.ParamLocationQuery, *params.MinAccessLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TopLevelOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "top_level_only", runtime.ParamLocationQuery, *params.TopLevelOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MarkedForDeletionOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marked_for_deletion_on", runtime.ParamLocationQuery, *params.MarkedForDeletionOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RepositoryStorage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repository_storage", runtime.ParamLocationQuery, *params.RepositoryStorage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCustomAttributes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_custom_attributes", runtime.ParamLocationQuery, *params.WithCustomAttributes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsRequest(server string, body PostApiV4GroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsRequestWithBody(server, "application/json", bodyReader)
}
func NewPostApiV4GroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPostApiV4GroupsImportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPostApiV4GroupsImportAuthorizeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/import/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewDeleteApiV4GroupsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdRequest(server string, id string, params *GetApiV4GroupsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithCustomAttributes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_custom_attributes", runtime.ParamLocationQuery, *params.WithCustomAttributes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithProjects != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_projects", runtime.ParamLocationQuery, *params.WithProjects); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPutApiV4GroupsIdRequest(server string, id string, body PutApiV4GroupsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewGetApiV4GroupsIdDebianDistributionsRequest(server string, id string, params *GetApiV4GroupsIdDebianDistributionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/debian_distributions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Codename != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "codename", runtime.ParamLocationQuery, *params.Codename); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Suite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "suite", runtime.ParamLocationQuery, *params.Suite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Origin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "origin", runtime.ParamLocationQuery, *params.Origin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Label != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label", runtime.ParamLocationQuery, *params.Label); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValidTimeDurationSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "valid_time_duration_seconds", runtime.ParamLocationQuery, *params.ValidTimeDurationSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Components != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "components", runtime.ParamLocationQuery, *params.Components); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Architectures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "architectures", runtime.ParamLocationQuery, *params.Architectures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdDebianDistributionsRequest(server string, id string, body PostApiV4GroupsIdDebianDistributionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdDebianDistributionsRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdDebianDistributionsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/debian_distributions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewDeleteApiV4GroupsIdDebianDistributionsCodenameRequest(server string, id string, codename string, params *DeleteApiV4GroupsIdDebianDistributionsCodenameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "codename", runtime.ParamLocationPath, codename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/debian_distributions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Suite != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "suite", runtime.ParamLocationQuery, *params.Suite); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Origin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "origin", runtime.ParamLocationQuery, *params.Origin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Label != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label", runtime.ParamLocationQuery, *params.Label); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValidTimeDurationSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "valid_time_duration_seconds", runtime.ParamLocationQuery, *params.ValidTimeDurationSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Components != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "components", runtime.ParamLocationQuery, *params.Components); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Architectures != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "architectures", runtime.ParamLocationQuery, *params.Architectures); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdDebianDistributionsCodenameRequest(server string, id string, codename string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "codename", runtime.ParamLocationPath, codename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/debian_distributions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPutApiV4GroupsIdDebianDistributionsCodenameRequest(server string, id string, codename string, body PutApiV4GroupsIdDebianDistributionsCodenameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdDebianDistributionsCodenameRequestWithBody(server, id, codename, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdDebianDistributionsCodenameRequestWithBody(server string, id string, codename string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "codename", runtime.ParamLocationPath, codename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/debian_distributions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewGetApiV4GroupsIdDebianDistributionsCodenameKeyAscRequest(server string, id string, codename string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "codename", runtime.ParamLocationPath, codename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/debian_distributions/%s/key.asc", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesDebianDistsdistributionInreleaseRequest(server string, id string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionInreleaseParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/debian/dists/*distribution/InRelease", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distribution", runtime.ParamLocationQuery, params.Distribution); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesDebianDistsdistributionReleaseRequest(server string, id string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/debian/dists/*distribution/Release", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distribution", runtime.ParamLocationQuery, params.Distribution); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpgRequest(server string, id string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpgParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/debian/dists/*distribution/Release.gpg", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distribution", runtime.ParamLocationQuery, params.Distribution); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackagesRequest(server string, id string, component string, architecture string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "component", runtime.ParamLocationPath, component)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "architecture", runtime.ParamLocationPath, architecture)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/debian/dists/*distribution/%s/binary-%s/Packages", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distribution", runtime.ParamLocationQuery, params.Distribution); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256Request(server string, id string, component string, architecture string, fileSha256 int32, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "component", runtime.ParamLocationPath, component)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "architecture", runtime.ParamLocationPath, architecture)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "file_sha256", runtime.ParamLocationPath, fileSha256)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/debian/dists/*distribution/%s/binary-%s/by-hash/SHA256/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distribution", runtime.ParamLocationQuery, params.Distribution); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackagesRequest(server string, id string, component string, architecture string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "component", runtime.ParamLocationPath, component)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "architecture", runtime.ParamLocationPath, architecture)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/debian/dists/*distribution/%s/debian-installer/binary-%s/Packages", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distribution", runtime.ParamLocationQuery, params.Distribution); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256Request(server string, id string, component string, architecture string, fileSha256 int32, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "component", runtime.ParamLocationPath, component)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "architecture", runtime.ParamLocationPath, architecture)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "file_sha256", runtime.ParamLocationPath, fileSha256)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/debian/dists/*distribution/%s/debian-installer/binary-%s/by-hash/SHA256/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distribution", runtime.ParamLocationQuery, params.Distribution); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSourcesRequest(server string, id string, component string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSourcesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "component", runtime.ParamLocationPath, component)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/debian/dists/*distribution/%s/source/Sources", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distribution", runtime.ParamLocationQuery, params.Distribution); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256Request(server string, id string, component string, fileSha256 int32, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "component", runtime.ParamLocationPath, component)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "file_sha256", runtime.ParamLocationPath, fileSha256)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/debian/dists/*distribution/%s/source/by-hash/SHA256/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "distribution", runtime.ParamLocationQuery, params.Distribution); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesDebianPoolDistributionProjectIdLetterPackageNamePackageVersionFileNameRequest(server string, id string, distribution string, projectId int32, letter string, packageName string, packageVersion string, fileName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "distribution", runtime.ParamLocationPath, distribution)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "letter", runtime.ParamLocationPath, letter)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "package_name", runtime.ParamLocationPath, packageName)
	if err != nil {
		return nil, err
	}

	var pathParam5 string

	pathParam5, err = runtime.StyleParamWithLocation("simple", false, "package_version", runtime.ParamLocationPath, packageVersion)
	if err != nil {
		return nil, err
	}

	var pathParam6 string

	pathParam6, err = runtime.StyleParamWithLocation("simple", false, "file_name", runtime.ParamLocationPath, fileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/debian/pool/%s/%s/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4, pathParam5, pathParam6)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesMavenpathFileNameRequest(server string, id string, fileName string, params *GetApiV4GroupsIdPackagesMavenpathFileNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "file_name", runtime.ParamLocationPath, fileName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/maven/*path/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesNpmpackageNameRequest(server string, id string, params *GetApiV4GroupsIdPackagesNpmpackageNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/npm/*package_name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdPackagesNpmNpmV1SecurityAdvisoriesBulkRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/npm/-/npm/v1/security/advisories/bulk", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdPackagesNpmNpmV1SecurityAuditsQuickRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/npm/-/npm/v1/security/audits/quick", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsRequest(server string, id string, params *GetApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/npm/-/package/*package_name/dist-tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewDeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagRequest(server string, id string, tag string, params *DeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tag", runtime.ParamLocationPath, tag)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/npm/-/package/*package_name/dist-tags/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagRequest(server string, id string, tag string, body PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagRequestWithBody(server, id, tag, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagRequestWithBody(server string, id string, tag string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tag", runtime.ParamLocationPath, tag)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/npm/-/package/*package_name/dist-tags/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewGetApiV4GroupsIdPackagesNugetIndexRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/nuget/index", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesNugetQueryRequest(server string, id int32, params *GetApiV4GroupsIdPackagesNugetQueryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/nuget/query", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Take != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prerelease != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prerelease", runtime.ParamLocationQuery, *params.Prerelease); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileNameRequest(server string, id int32, params *GetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/nuget/symbolfiles/*file_name/*signature/*same_file_name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_name", runtime.ParamLocationQuery, params.FileName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "signature", runtime.ParamLocationQuery, params.Signature); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "same_file_name", runtime.ParamLocationQuery, params.SameFileName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Symbolchecksum", runtime.ParamLocationHeader, params.Symbolchecksum)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Symbolchecksum", headerParam0)

	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesNugetV2Request(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/nuget/v2", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesNugetV2MetadataRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/nuget/v2/$metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifierRequest(server string, id int32, sha256 string, params *GetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifierParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sha256", runtime.ParamLocationPath, sha256)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/pypi/files/%s/*file_identifier", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_identifier", runtime.ParamLocationQuery, params.FileIdentifier); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesPypiSimpleRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/pypi/simple", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesPypiSimplepackageNameRequest(server string, id int32, params *GetApiV4GroupsIdPackagesPypiSimplepackageNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/-/packages/pypi/simple/*package_name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdAccessRequestsRequest(server string, id string, params *GetApiV4GroupsIdAccessRequestsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/access_requests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdAccessRequestsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/access_requests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewDeleteApiV4GroupsIdAccessRequestsUserIdRequest(server string, id string, userId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/access_requests/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPutApiV4GroupsIdAccessRequestsUserIdApproveRequest(server string, id string, userId int32, body PutApiV4GroupsIdAccessRequestsUserIdApproveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdAccessRequestsUserIdApproveRequestWithBody(server, id, userId, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdAccessRequestsUserIdApproveRequestWithBody(server string, id string, userId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/access_requests/%s/approve", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPostApiV4GroupsIdAccessTokensSelfRotateRequest(server string, id string, body PostApiV4GroupsIdAccessTokensSelfRotateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdAccessTokensSelfRotateRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdAccessTokensSelfRotateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/access_tokens/self/rotate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPostApiV4GroupsIdArchiveRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdAuditEventsRequest(server string, id int32, params *GetApiV4GroupsIdAuditEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/audit_events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CreatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdAuditEventsAuditEventIdRequest(server string, id int32, auditEventId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "audit_event_id", runtime.ParamLocationPath, auditEventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/audit_events/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdAvatarRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/avatar", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdBadgesRequest(server string, id string, params *GetApiV4GroupsIdBadgesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/badges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdBadgesRequest(server string, id string, body PostApiV4GroupsIdBadgesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdBadgesRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdBadgesRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/badges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewGetApiV4GroupsIdBadgesRenderRequest(server string, id string, params *GetApiV4GroupsIdBadgesRenderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/badges/render", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "link_url", runtime.ParamLocationQuery, params.LinkUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "image_url", runtime.ParamLocationQuery, params.ImageUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewDeleteApiV4GroupsIdBadgesBadgeIdRequest(server string, id string, badgeId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "badge_id", runtime.ParamLocationPath, badgeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/badges/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdBadgesBadgeIdRequest(server string, id string, badgeId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "badge_id", runtime.ParamLocationPath, badgeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/badges/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPutApiV4GroupsIdBadgesBadgeIdRequest(server string, id string, badgeId int32, body PutApiV4GroupsIdBadgesBadgeIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdBadgesBadgeIdRequestWithBody(server, id, badgeId, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdBadgesBadgeIdRequestWithBody(server string, id string, badgeId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "badge_id", runtime.ParamLocationPath, badgeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/badges/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewGetApiV4GroupsIdBillableMembersRequest(server string, id string, params *GetApiV4GroupsIdBillableMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/billable_members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewDeleteApiV4GroupsIdBillableMembersUserIdRequest(server string, id string, userId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/billable_members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdBillableMembersUserIdIndirectRequest(server string, id string, userId int32, params *GetApiV4GroupsIdBillableMembersUserIdIndirectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/billable_members/%s/indirect", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdBillableMembersUserIdMembershipsRequest(server string, id string, userId int32, params *GetApiV4GroupsIdBillableMembersUserIdMembershipsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/billable_members/%s/memberships", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdClustersRequest(server string, id string, params *GetApiV4GroupsIdClustersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/clusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdClustersUserRequest(server string, id string, body PostApiV4GroupsIdClustersUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdClustersUserRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdClustersUserRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/clusters/user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewDeleteApiV4GroupsIdClustersClusterIdRequest(server string, id string, clusterId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdClustersClusterIdRequest(server string, id string, clusterId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPutApiV4GroupsIdClustersClusterIdRequest(server string, id string, clusterId int32, body PutApiV4GroupsIdClustersClusterIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdClustersClusterIdRequestWithBody(server, id, clusterId, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdClustersClusterIdRequestWithBody(server string, id string, clusterId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewGetApiV4GroupsIdCustomAttributesRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/custom_attributes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewDeleteApiV4GroupsIdCustomAttributesKeyRequest(server string, id int32, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/custom_attributes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdCustomAttributesKeyRequest(server string, id int32, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/custom_attributes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPutApiV4GroupsIdCustomAttributesKeyRequest(server string, id int32, key string, body PutApiV4GroupsIdCustomAttributesKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdCustomAttributesKeyRequestWithBody(server, id, key, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdCustomAttributesKeyRequestWithBody(server string, id int32, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/custom_attributes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewDeleteApiV4GroupsIdDependencyProxyCacheRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/dependency_proxy/cache", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdDeployTokensRequest(server string, id int32, params *GetApiV4GroupsIdDeployTokensParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/deploy_tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdDeployTokensRequest(server string, id int32, body PostApiV4GroupsIdDeployTokensJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdDeployTokensRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdDeployTokensRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/deploy_tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewDeleteApiV4GroupsIdDeployTokensTokenIdRequest(server string, id int32, tokenId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "token_id", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/deploy_tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdDeployTokensTokenIdRequest(server string, id int32, tokenId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "token_id", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/deploy_tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdDescendantGroupsRequest(server string, id string, params *GetApiV4GroupsIdDescendantGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/descendant_groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Statistics != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statistics", runtime.ParamLocationQuery, *params.Statistics); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipGroups != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "skip_groups", runtime.ParamLocationQuery, *params.SkipGroups); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AllAvailable != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all_available", runtime.ParamLocationQuery, *params.AllAvailable); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owned != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owned", runtime.ParamLocationQuery, *params.Owned); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinAccessLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_access_level", runtime.ParamLocationQuery, *params.MinAccessLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TopLevelOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "top_level_only", runtime.ParamLocationQuery, *params.TopLevelOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MarkedForDeletionOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marked_for_deletion_on", runtime.ParamLocationQuery, *params.MarkedForDeletionOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RepositoryStorage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repository_storage", runtime.ParamLocationQuery, *params.RepositoryStorage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCustomAttributes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_custom_attributes", runtime.ParamLocationQuery, *params.WithCustomAttributes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdEpicsEpicIidAwardEmojiRequest(server string, id string, epicIid int32, params *GetApiV4GroupsIdEpicsEpicIidAwardEmojiParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "epic_iid", runtime.ParamLocationPath, epicIid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/epics/%s/award_emoji", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdEpicsEpicIidAwardEmojiRequest(server string, id int32, epicIid int32, body PostApiV4GroupsIdEpicsEpicIidAwardEmojiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdEpicsEpicIidAwardEmojiRequestWithBody(server, id, epicIid, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdEpicsEpicIidAwardEmojiRequestWithBody(server string, id int32, epicIid int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "epic_iid", runtime.ParamLocationPath, epicIid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/epics/%s/award_emoji", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewDeleteApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdRequest(server string, id int32, epicIid int32, awardId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "epic_iid", runtime.ParamLocationPath, epicIid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "award_id", runtime.ParamLocationPath, awardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/epics/%s/award_emoji/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdRequest(server string, id int32, epicIid int32, awardId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "epic_iid", runtime.ParamLocationPath, epicIid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "award_id", runtime.ParamLocationPath, awardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/epics/%s/award_emoji/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiRequest(server string, id int32, epicIid int32, noteId int32, params *GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "epic_iid", runtime.ParamLocationPath, epicIid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "note_id", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/epics/%s/notes/%s/award_emoji", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiRequest(server string, id int32, epicIid int32, noteId int32, body PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiRequestWithBody(server, id, epicIid, noteId, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiRequestWithBody(server string, id int32, epicIid int32, noteId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "epic_iid", runtime.ParamLocationPath, epicIid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "note_id", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/epics/%s/notes/%s/award_emoji", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewDeleteApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdRequest(server string, id int32, epicIid int32, noteId int32, awardId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "epic_iid", runtime.ParamLocationPath, epicIid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "note_id", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "award_id", runtime.ParamLocationPath, awardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/epics/%s/notes/%s/award_emoji/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdRequest(server string, id int32, epicIid int32, noteId int32, awardId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "epic_iid", runtime.ParamLocationPath, epicIid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "note_id", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "award_id", runtime.ParamLocationPath, awardId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/epics/%s/notes/%s/award_emoji/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdExportRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/export", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdExportDownloadRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/export/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdExportRelationsRequest(server string, id string, body PostApiV4GroupsIdExportRelationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdExportRelationsRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdExportRelationsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/export_relations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewGetApiV4GroupsIdExportRelationsDownloadRequest(server string, id string, params *GetApiV4GroupsIdExportRelationsDownloadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/export_relations/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relation", runtime.ParamLocationQuery, params.Relation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Batched != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "batched", runtime.ParamLocationQuery, *params.Batched); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BatchNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "batch_number", runtime.ParamLocationQuery, *params.BatchNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdExportRelationsStatusRequest(server string, id string, params *GetApiV4GroupsIdExportRelationsStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/export_relations/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Relation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relation", runtime.ParamLocationQuery, *params.Relation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdGroupsSharedRequest(server string, id string, params *GetApiV4GroupsIdGroupsSharedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/groups/shared", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SkipGroups != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "skip_groups", runtime.ParamLocationQuery, *params.SkipGroups); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinAccessLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_access_level", runtime.ParamLocationQuery, *params.MinAccessLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCustomAttributes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_custom_attributes", runtime.ParamLocationQuery, *params.WithCustomAttributes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdIntegrationsRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsAppleAppStoreRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsAppleAppStoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsAppleAppStoreRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsAppleAppStoreRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/apple-app-store", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsAsanaRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsAsanaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsAsanaRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsAsanaRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/asana", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsAssemblaRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsAssemblaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsAssemblaRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsAssemblaRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/assembla", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsBambooRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsBambooJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsBambooRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsBambooRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/bamboo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsBugzillaRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsBugzillaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsBugzillaRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsBugzillaRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/bugzilla", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsBuildkiteRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsBuildkiteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsBuildkiteRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsBuildkiteRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/buildkite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsCampfireRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsCampfireJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsCampfireRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsCampfireRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/campfire", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsClickupRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsClickupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsClickupRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsClickupRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/clickup", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsConfluenceRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsConfluenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsConfluenceRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsConfluenceRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/confluence", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsCustomIssueTrackerRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsCustomIssueTrackerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsCustomIssueTrackerRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsCustomIssueTrackerRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/custom-issue-tracker", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsDatadogRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsDatadogJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsDatadogRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsDatadogRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/datadog", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsDiffblueCoverRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsDiffblueCoverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsDiffblueCoverRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsDiffblueCoverRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/diffblue-cover", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsDiscordRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsDiscordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsDiscordRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsDiscordRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/discord", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsDroneCiRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsDroneCiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsDroneCiRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsDroneCiRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/drone-ci", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsEmailsOnPushRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsEmailsOnPushJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsEmailsOnPushRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsEmailsOnPushRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/emails-on-push", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsEwmRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsEwmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsEwmRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsEwmRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/ewm", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsExternalWikiRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsExternalWikiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsExternalWikiRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsExternalWikiRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/external-wiki", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsGitGuardianRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsGitGuardianJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsGitGuardianRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsGitGuardianRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/git-guardian", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsGithubRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsGithubJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsGithubRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsGithubRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/github", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsGitlabSlackApplicationRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsGitlabSlackApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsGitlabSlackApplicationRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsGitlabSlackApplicationRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/gitlab-slack-application", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/google-cloud-platform-artifact-registry", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/google-cloud-platform-workload-identity-federation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsGooglePlayRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsGooglePlayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsGooglePlayRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsGooglePlayRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/google-play", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsHangoutsChatRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsHangoutsChatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsHangoutsChatRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsHangoutsChatRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/hangouts-chat", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsHarborRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsHarborJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsHarborRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsHarborRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/harbor", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsIrkerRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsIrkerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsIrkerRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsIrkerRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/irker", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsJenkinsRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsJenkinsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsJenkinsRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsJenkinsRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/jenkins", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsJiraRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsJiraJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsJiraRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsJiraRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/jira", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsJiraCloudAppRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsJiraCloudAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsJiraCloudAppRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsJiraCloudAppRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/jira-cloud-app", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsMatrixRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsMatrixJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsMatrixRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsMatrixRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/matrix", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsMattermostRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsMattermostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsMattermostRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsMattermostRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/mattermost", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsMattermostSlashCommandsRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsMattermostSlashCommandsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsMattermostSlashCommandsRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsMattermostSlashCommandsRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/mattermost-slash-commands", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsMicrosoftTeamsRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsMicrosoftTeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsMicrosoftTeamsRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsMicrosoftTeamsRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/microsoft-teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsMockCiRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsMockCiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsMockCiRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsMockCiRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/mock-ci", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsMockMonitoringRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsMockMonitoringJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsMockMonitoringRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsMockMonitoringRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/mock-monitoring", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsPackagistRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsPackagistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsPackagistRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsPackagistRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/packagist", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsPhorgeRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsPhorgeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsPhorgeRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsPhorgeRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/phorge", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsPipelinesEmailRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsPipelinesEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsPipelinesEmailRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsPipelinesEmailRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/pipelines-email", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsPivotaltrackerRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsPivotaltrackerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsPivotaltrackerRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsPivotaltrackerRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/pivotaltracker", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsPumbleRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsPumbleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsPumbleRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsPumbleRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/pumble", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsPushoverRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsPushoverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsPushoverRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsPushoverRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/pushover", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsRedmineRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsRedmineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsRedmineRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsRedmineRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/redmine", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsSlackRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsSlackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsSlackRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsSlackRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/slack", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsSlackSlashCommandsRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsSlackSlashCommandsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsSlackSlashCommandsRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsSlackSlashCommandsRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/slack-slash-commands", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsSquashTmRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsSquashTmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsSquashTmRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsSquashTmRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/squash-tm", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsTeamcityRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsTeamcityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsTeamcityRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsTeamcityRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/teamcity", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsTelegramRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsTelegramJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsTelegramRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsTelegramRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/telegram", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsUnifyCircuitRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsUnifyCircuitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsUnifyCircuitRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsUnifyCircuitRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/unify-circuit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsWebexTeamsRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsWebexTeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsWebexTeamsRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsWebexTeamsRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/webex-teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsYoutrackRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsYoutrackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsYoutrackRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsYoutrackRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/youtrack", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPutApiV4GroupsIdIntegrationsZentaoRequest(server string, id int32, body PutApiV4GroupsIdIntegrationsZentaoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdIntegrationsZentaoRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdIntegrationsZentaoRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/zentao", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewDeleteApiV4GroupsIdIntegrationsSlugRequest(server string, id int32, slug DeleteApiV4GroupsIdIntegrationsSlugParamsSlug) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdIntegrationsSlugRequest(server string, id int32, slug GetApiV4GroupsIdIntegrationsSlugParamsSlug) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/integrations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdInvitationsRequest(server string, id string, params *GetApiV4GroupsIdInvitationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdInvitationsRequest(server string, id string, body PostApiV4GroupsIdInvitationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdInvitationsRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdInvitationsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewDeleteApiV4GroupsIdInvitationsEmailRequest(server string, id string, email string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/invitations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPutApiV4GroupsIdInvitationsEmailRequest(server string, id string, email string, body PutApiV4GroupsIdInvitationsEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdInvitationsEmailRequestWithBody(server, id, email, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdInvitationsEmailRequestWithBody(server string, id string, email string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/invitations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewGetApiV4GroupsIdInvitedGroupsRequest(server string, id string, params *GetApiV4GroupsIdInvitedGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/invited_groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Relation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "relation", runtime.ParamLocationQuery, *params.Relation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinAccessLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_access_level", runtime.ParamLocationQuery, *params.MinAccessLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCustomAttributes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_custom_attributes", runtime.ParamLocationQuery, *params.WithCustomAttributes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdIssuesRequest(server string, id string, params *GetApiV4GroupsIdIssuesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/issues", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AssigneeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assignee_id", runtime.ParamLocationQuery, *params.AssigneeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AssigneeUsername != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assignee_username", runtime.ParamLocationQuery, *params.AssigneeUsername); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthorId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author_id", runtime.ParamLocationQuery, *params.AuthorId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthorUsername != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author_username", runtime.ParamLocationQuery, *params.AuthorUsername); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Confidential != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "confidential", runtime.ParamLocationQuery, *params.Confidential); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DueDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "due_date", runtime.ParamLocationQuery, *params.DueDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EpicId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "epic_id", runtime.ParamLocationQuery, *params.EpicId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Iids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iids[]", runtime.ParamLocationQuery, *params.Iids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IssueType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "issue_type", runtime.ParamLocationQuery, *params.IssueType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IterationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iteration_id", runtime.ParamLocationQuery, *params.IterationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IterationTitle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "iteration_title", runtime.ParamLocationQuery, *params.IterationTitle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Labels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labels", runtime.ParamLocationQuery, *params.Labels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Milestone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "milestone", runtime.ParamLocationQuery, *params.Milestone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MyReactionEmoji != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "my_reaction_emoji", runtime.ParamLocationQuery, *params.MyReactionEmoji); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NonArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "non_archived", runtime.ParamLocationQuery, *params.NonArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Not != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not", runtime.ParamLocationQuery, *params.Not); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_after", runtime.ParamLocationQuery, *params.UpdatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_before", runtime.ParamLocationQuery, *params.UpdatedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Weight != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "weight", runtime.ParamLocationQuery, *params.Weight); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithLabelsDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_labels_details", runtime.ParamLocationQuery, *params.WithLabelsDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdLdapSyncRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/ldap_sync", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdMembersRequest(server string, id string, params *GetApiV4GroupsIdMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_ids", runtime.ParamLocationQuery, *params.UserIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipUsers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "skip_users", runtime.ParamLocationQuery, *params.SkipUsers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowSeatInfo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show_seat_info", runtime.ParamLocationQuery, *params.ShowSeatInfo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithSamlIdentity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_saml_identity", runtime.ParamLocationQuery, *params.WithSamlIdentity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdMembersRequest(server string, id string, body PostApiV4GroupsIdMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdMembersRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdMembersRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewGetApiV4GroupsIdMembersAllRequest(server string, id string, params *GetApiV4GroupsIdMembersAllParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/members/all", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "user_ids", runtime.ParamLocationQuery, *params.UserIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowSeatInfo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show_seat_info", runtime.ParamLocationQuery, *params.ShowSeatInfo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdMembersAllUserIdRequest(server string, id string, userId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/members/all/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdMembersApproveAllRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/members/approve_all", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPutApiV4GroupsIdMembersMemberIdApproveRequest(server string, id string, memberId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "member_id", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/members/%s/approve", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewDeleteApiV4GroupsIdMembersUserIdRequest(server string, id string, userId int32, params *DeleteApiV4GroupsIdMembersUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SkipSubresources != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip_subresources", runtime.ParamLocationQuery, *params.SkipSubresources); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnassignIssuables != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unassign_issuables", runtime.ParamLocationQuery, *params.UnassignIssuables); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdMembersUserIdRequest(server string, id string, userId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPutApiV4GroupsIdMembersUserIdRequest(server string, id string, userId int32, body PutApiV4GroupsIdMembersUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdMembersUserIdRequestWithBody(server, id, userId, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdMembersUserIdRequestWithBody(server string, id string, userId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewDeleteApiV4GroupsIdMembersUserIdOverrideRequest(server string, id string, userId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/members/%s/override", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdMembersUserIdOverrideRequest(server string, id string, userId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/members/%s/override", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPutApiV4GroupsIdMembersUserIdStateRequest(server string, id string, userId int32, body PutApiV4GroupsIdMembersUserIdStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdMembersUserIdStateRequestWithBody(server, id, userId, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdMembersUserIdStateRequestWithBody(server string, id string, userId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/members/%s/state", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewGetApiV4GroupsIdMergeRequestsRequest(server string, id string, params *GetApiV4GroupsIdMergeRequestsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/merge_requests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AuthorId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author_id", runtime.ParamLocationQuery, *params.AuthorId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthorUsername != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author_username", runtime.ParamLocationQuery, *params.AuthorUsername); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AssigneeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assignee_id", runtime.ParamLocationQuery, *params.AssigneeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AssigneeUsername != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "assignee_username", runtime.ParamLocationQuery, *params.AssigneeUsername); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReviewerUsername != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewer_username", runtime.ParamLocationQuery, *params.ReviewerUsername); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Labels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "labels", runtime.ParamLocationQuery, *params.Labels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Milestone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "milestone", runtime.ParamLocationQuery, *params.Milestone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MyReactionEmoji != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "my_reaction_emoji", runtime.ParamLocationQuery, *params.MyReactionEmoji); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReviewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reviewer_id", runtime.ParamLocationQuery, *params.ReviewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithLabelsDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_labels_details", runtime.ParamLocationQuery, *params.WithLabelsDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithMergeStatusRecheck != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_merge_status_recheck", runtime.ParamLocationQuery, *params.WithMergeStatusRecheck); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_after", runtime.ParamLocationQuery, *params.UpdatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_before", runtime.ParamLocationQuery, *params.UpdatedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.View != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view", runtime.ParamLocationQuery, *params.View); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceBranch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_branch", runtime.ParamLocationQuery, *params.SourceBranch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_project_id", runtime.ParamLocationQuery, *params.SourceProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetBranch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "target_branch", runtime.ParamLocationQuery, *params.TargetBranch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "in", runtime.ParamLocationQuery, *params.In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Wip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wip", runtime.ParamLocationQuery, *params.Wip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotAuthorId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not[author_id]", runtime.ParamLocationQuery, *params.NotAuthorId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotAuthorUsername != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not[author_username]", runtime.ParamLocationQuery, *params.NotAuthorUsername); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotAssigneeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not[assignee_id]", runtime.ParamLocationQuery, *params.NotAssigneeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotAssigneeUsername != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not[assignee_username]", runtime.ParamLocationQuery, *params.NotAssigneeUsername); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotReviewerUsername != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not[reviewer_username]", runtime.ParamLocationQuery, *params.NotReviewerUsername); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotLabels != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "not[labels]", runtime.ParamLocationQuery, *params.NotLabels); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMilestone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not[milestone]", runtime.ParamLocationQuery, *params.NotMilestone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotMyReactionEmoji != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not[my_reaction_emoji]", runtime.ParamLocationQuery, *params.NotMyReactionEmoji); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NotReviewerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "not[reviewer_id]", runtime.ParamLocationQuery, *params.NotReviewerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeployedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deployed_before", runtime.ParamLocationQuery, *params.DeployedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeployedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deployed_after", runtime.ParamLocationQuery, *params.DeployedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Approved != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "approved", runtime.ParamLocationQuery, *params.Approved); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MergeUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "merge_user_id", runtime.ParamLocationQuery, *params.MergeUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MergeUserUsername != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "merge_user_username", runtime.ParamLocationQuery, *params.MergeUserUsername); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApproverIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "approver_ids", runtime.ParamLocationQuery, *params.ApproverIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApprovedByIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "approved_by_ids", runtime.ParamLocationQuery, *params.ApprovedByIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApprovedByUsernames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "approved_by_usernames", runtime.ParamLocationQuery, *params.ApprovedByUsernames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NonArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "non_archived", runtime.ParamLocationQuery, *params.NonArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPackagesRequest(server string, id string, params *GetApiV4GroupsIdPackagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/packages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExcludeSubgroups != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_subgroups", runtime.ParamLocationQuery, *params.ExcludeSubgroups); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PackageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_type", runtime.ParamLocationQuery, *params.PackageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PackageName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_name", runtime.ParamLocationQuery, *params.PackageName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PackageVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_version", runtime.ParamLocationQuery, *params.PackageVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeVersionless != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_versionless", runtime.ParamLocationQuery, *params.IncludeVersionless); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPendingMembersRequest(server string, id string, params *GetApiV4GroupsIdPendingMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/pending_members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdPlaceholderReassignmentsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/placeholder_reassignments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdPlaceholderReassignmentsRequest(server string, id string, body PostApiV4GroupsIdPlaceholderReassignmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdPlaceholderReassignmentsRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdPlaceholderReassignmentsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/placeholder_reassignments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPostApiV4GroupsIdPlaceholderReassignmentsAuthorizeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/placeholder_reassignments/authorize", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdProjectsRequest(server string, id string, params *GetApiV4GroupsIdProjectsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Simple != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "simple", runtime.ParamLocationQuery, *params.Simple); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owned != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owned", runtime.ParamLocationQuery, *params.Owned); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Starred != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "starred", runtime.ParamLocationQuery, *params.Starred); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithIssuesEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_issues_enabled", runtime.ParamLocationQuery, *params.WithIssuesEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithMergeRequestsEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_merge_requests_enabled", runtime.ParamLocationQuery, *params.WithMergeRequestsEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithShared != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_shared", runtime.ParamLocationQuery, *params.WithShared); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeSubgroups != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_subgroups", runtime.ParamLocationQuery, *params.IncludeSubgroups); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeAncestorGroups != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_ancestor_groups", runtime.ParamLocationQuery, *params.IncludeAncestorGroups); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinAccessLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_access_level", runtime.ParamLocationQuery, *params.MinAccessLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCustomAttributes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_custom_attributes", runtime.ParamLocationQuery, *params.WithCustomAttributes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithSecurityReports != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_security_reports", runtime.ParamLocationQuery, *params.WithSecurityReports); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdProjectsSharedRequest(server string, id string, params *GetApiV4GroupsIdProjectsSharedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/projects/shared", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Simple != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "simple", runtime.ParamLocationQuery, *params.Simple); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Starred != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "starred", runtime.ParamLocationQuery, *params.Starred); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithIssuesEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_issues_enabled", runtime.ParamLocationQuery, *params.WithIssuesEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithMergeRequestsEnabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_merge_requests_enabled", runtime.ParamLocationQuery, *params.WithMergeRequestsEnabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinAccessLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_access_level", runtime.ParamLocationQuery, *params.MinAccessLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCustomAttributes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_custom_attributes", runtime.ParamLocationQuery, *params.WithCustomAttributes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdProjectsProjectIdRequest(server string, id string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/projects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdProvisionedUsersRequest(server string, id int32, params *GetApiV4GroupsIdProvisionedUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/provisioned_users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Blocked != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "blocked", runtime.ParamLocationQuery, *params.Blocked); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdRegistryRepositoriesRequest(server string, id string, params *GetApiV4GroupsIdRegistryRepositoriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/registry/repositories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdReleasesRequest(server string, id string, params *GetApiV4GroupsIdReleasesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/releases", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Simple != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "simple", runtime.ParamLocationQuery, *params.Simple); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdRestoreRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/restore", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdRunnersRequest(server string, id string, params *GetApiV4GroupsIdRunnersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/runners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Paused != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "paused", runtime.ParamLocationQuery, *params.Paused); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "tag_list", runtime.ParamLocationQuery, *params.TagList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VersionPrefix != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version_prefix", runtime.ParamLocationQuery, *params.VersionPrefix); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdRunnersResetRegistrationTokenRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/runners/reset_registration_token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdSamlUsersRequest(server string, id int32, params *GetApiV4GroupsIdSamlUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/saml_users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Blocked != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "blocked", runtime.ParamLocationQuery, *params.Blocked); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_after", runtime.ParamLocationQuery, *params.CreatedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdShareRequest(server string, id string, body PostApiV4GroupsIdShareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdShareRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdShareRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/share", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewDeleteApiV4GroupsIdShareGroupIdRequest(server string, id string, groupId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/share/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdSshCertificatesRequest(server string, id int32, params *GetApiV4GroupsIdSshCertificatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/ssh_certificates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdSshCertificatesRequest(server string, id int32, body PostApiV4GroupsIdSshCertificatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdSshCertificatesRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdSshCertificatesRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/ssh_certificates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewDeleteApiV4GroupsIdSshCertificatesSshCertificatesIdRequest(server string, id int32, sshCertificatesId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ssh_certificates_id", runtime.ParamLocationPath, sshCertificatesId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/ssh_certificates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdSubgroupsRequest(server string, id string, params *GetApiV4GroupsIdSubgroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/subgroups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Statistics != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "statistics", runtime.ParamLocationQuery, *params.Statistics); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SkipGroups != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "skip_groups", runtime.ParamLocationQuery, *params.SkipGroups); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AllAvailable != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all_available", runtime.ParamLocationQuery, *params.AllAvailable); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owned != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owned", runtime.ParamLocationQuery, *params.Owned); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinAccessLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_access_level", runtime.ParamLocationQuery, *params.MinAccessLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TopLevelOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "top_level_only", runtime.ParamLocationQuery, *params.TopLevelOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MarkedForDeletionOn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marked_for_deletion_on", runtime.ParamLocationQuery, *params.MarkedForDeletionOn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RepositoryStorage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repository_storage", runtime.ParamLocationQuery, *params.RepositoryStorage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCustomAttributes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_custom_attributes", runtime.ParamLocationQuery, *params.WithCustomAttributes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdTokensRevokeRequest(server string, id string, body PostApiV4GroupsIdTokensRevokeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdTokensRevokeRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdTokensRevokeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/tokens/revoke", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPostApiV4GroupsIdTransferRequest(server string, id string, body PostApiV4GroupsIdTransferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdTransferRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdTransferRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/transfer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewGetApiV4GroupsIdTransferLocationsRequest(server string, id string, params *GetApiV4GroupsIdTransferLocationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/transfer_locations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdUnarchiveRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/unarchive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdUploadsRequest(server string, id int32, params *GetApiV4GroupsIdUploadsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/uploads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewDeleteApiV4GroupsIdUploadsSecretFilenameRequest(server string, id int32, secret string, filename string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "secret", runtime.ParamLocationPath, secret)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/uploads/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdUploadsSecretFilenameRequest(server string, id int32, secret string, filename string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "secret", runtime.ParamLocationPath, secret)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/uploads/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewDeleteApiV4GroupsIdUploadsUploadIdRequest(server string, id int32, uploadId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "upload_id", runtime.ParamLocationPath, uploadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/uploads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdUploadsUploadIdRequest(server string, id int32, uploadId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "upload_id", runtime.ParamLocationPath, uploadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/uploads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdUsersRequest(server string, id int32, params *GetApiV4GroupsIdUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeSamlUsers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_saml_users", runtime.ParamLocationQuery, *params.IncludeSamlUsers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeServiceAccounts != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_service_accounts", runtime.ParamLocationQuery, *params.IncludeServiceAccounts); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdVariablesRequest(server string, id string, params *GetApiV4GroupsIdVariablesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdVariablesRequest(server string, id string, body PostApiV4GroupsIdVariablesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdVariablesRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdVariablesRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewDeleteApiV4GroupsIdVariablesKeyRequest(server string, id string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/variables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdVariablesKeyRequest(server string, id string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/variables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPutApiV4GroupsIdVariablesKeyRequest(server string, id string, key string, body PutApiV4GroupsIdVariablesKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdVariablesKeyRequestWithBody(server, id, key, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdVariablesKeyRequestWithBody(server string, id string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/variables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewGetApiV4GroupsIdWikisRequest(server string, id int32, params *GetApiV4GroupsIdWikisParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/wikis", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithContent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_content", runtime.ParamLocationQuery, *params.WithContent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPostApiV4GroupsIdWikisRequest(server string, id int32, body PostApiV4GroupsIdWikisJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdWikisRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdWikisRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/wikis", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewPostApiV4GroupsIdWikisAttachmentsRequest(server string, id int32, body PostApiV4GroupsIdWikisAttachmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV4GroupsIdWikisAttachmentsRequestWithBody(server, id, "application/json", bodyReader)
}
func NewPostApiV4GroupsIdWikisAttachmentsRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/wikis/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func NewDeleteApiV4GroupsIdWikisSlugRequest(server string, id int32, slug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/wikis/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewGetApiV4GroupsIdWikisSlugRequest(server string, id int32, slug string, params *GetApiV4GroupsIdWikisSlugParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/wikis/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RenderHtml != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "render_html", runtime.ParamLocationQuery, *params.RenderHtml); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}
func NewPutApiV4GroupsIdWikisSlugRequest(server string, id int32, slug int32, body PutApiV4GroupsIdWikisSlugJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV4GroupsIdWikisSlugRequestWithBody(server, id, slug, "application/json", bodyReader)
}
func NewPutApiV4GroupsIdWikisSlugRequestWithBody(server string, id int32, slug int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v4/groups/%s/wikis/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}
func (r GetApiV4GroupIdPackagesComposerpackageNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupIdPackagesComposerpackageNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupIdPackagesComposerPShaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupIdPackagesComposerPShaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupIdPackagesComposerP2packageNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupIdPackagesComposerP2packageNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupIdPackagesComposerPackagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupIdPackagesComposerPackagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsImportAuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsImportAuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdDebianDistributionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdDebianDistributionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdDebianDistributionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdDebianDistributionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdDebianDistributionsCodenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdDebianDistributionsCodenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdDebianDistributionsCodenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdDebianDistributionsCodenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdDebianDistributionsCodenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdDebianDistributionsCodenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdDebianDistributionsCodenameKeyAscResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdDebianDistributionsCodenameKeyAscResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionInreleaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionInreleaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesDebianPoolDistributionProjectIdLetterPackageNamePackageVersionFileNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesDebianPoolDistributionProjectIdLetterPackageNamePackageVersionFileNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesMavenpathFileNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesMavenpathFileNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesNpmpackageNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesNpmpackageNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdPackagesNpmNpmV1SecurityAdvisoriesBulkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdPackagesNpmNpmV1SecurityAdvisoriesBulkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdPackagesNpmNpmV1SecurityAuditsQuickResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdPackagesNpmNpmV1SecurityAuditsQuickResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesNugetIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesNugetIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesNugetQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesNugetQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesNugetV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesNugetV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesNugetV2MetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesNugetV2MetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesPypiSimpleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesPypiSimpleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesPypiSimplepackageNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesPypiSimplepackageNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdAccessRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdAccessRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdAccessRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdAccessRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdAccessRequestsUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdAccessRequestsUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdAccessRequestsUserIdApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdAccessRequestsUserIdApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdAccessTokensSelfRotateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdAccessTokensSelfRotateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdAuditEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdAuditEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdAuditEventsAuditEventIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdAuditEventsAuditEventIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdBadgesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdBadgesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdBadgesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdBadgesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdBadgesRenderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdBadgesRenderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdBadgesBadgeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdBadgesBadgeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdBadgesBadgeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdBadgesBadgeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdBadgesBadgeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdBadgesBadgeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdBillableMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdBillableMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdBillableMembersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdBillableMembersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdBillableMembersUserIdIndirectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdBillableMembersUserIdIndirectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdBillableMembersUserIdMembershipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdBillableMembersUserIdMembershipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdClustersUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdClustersUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdClustersClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdClustersClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdClustersClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdClustersClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdClustersClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdClustersClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdCustomAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdCustomAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdCustomAttributesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdCustomAttributesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdCustomAttributesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdCustomAttributesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdCustomAttributesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdCustomAttributesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdDependencyProxyCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdDependencyProxyCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdDeployTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdDeployTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdDeployTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdDeployTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdDeployTokensTokenIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdDeployTokensTokenIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdDeployTokensTokenIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdDeployTokensTokenIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdDescendantGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdDescendantGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdEpicsEpicIidAwardEmojiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdEpicsEpicIidAwardEmojiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdEpicsEpicIidAwardEmojiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdEpicsEpicIidAwardEmojiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdExportDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdExportDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdExportRelationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdExportRelationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdExportRelationsDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdExportRelationsDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdExportRelationsStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdExportRelationsStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdGroupsSharedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdGroupsSharedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdIntegrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdIntegrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsAppleAppStoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsAppleAppStoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsAsanaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsAsanaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsAssemblaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsAssemblaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsBambooResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsBambooResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsBugzillaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsBugzillaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsBuildkiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsBuildkiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsCampfireResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsCampfireResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsClickupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsClickupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsConfluenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsConfluenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsCustomIssueTrackerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsCustomIssueTrackerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsDatadogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsDatadogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsDiffblueCoverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsDiffblueCoverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsDiscordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsDiscordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsDroneCiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsDroneCiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsEmailsOnPushResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsEmailsOnPushResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsEwmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsEwmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsExternalWikiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsExternalWikiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsGitGuardianResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsGitGuardianResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsGithubResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsGithubResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsGitlabSlackApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsGitlabSlackApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsGooglePlayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsGooglePlayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsHangoutsChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsHangoutsChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsHarborResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsHarborResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsIrkerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsIrkerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsJenkinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsJenkinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsJiraResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsJiraResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsJiraCloudAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsJiraCloudAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsMatrixResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsMatrixResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsMattermostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsMattermostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsMattermostSlashCommandsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsMattermostSlashCommandsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsMicrosoftTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsMicrosoftTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsMockCiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsMockCiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsMockMonitoringResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsMockMonitoringResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsPackagistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsPackagistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsPhorgeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsPhorgeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsPipelinesEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsPipelinesEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsPivotaltrackerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsPivotaltrackerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsPumbleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsPumbleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsPushoverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsPushoverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsRedmineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsRedmineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsSlackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsSlackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsSlackSlashCommandsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsSlackSlashCommandsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsSquashTmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsSquashTmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsTeamcityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsTeamcityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsTelegramResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsTelegramResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsUnifyCircuitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsUnifyCircuitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsWebexTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsWebexTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsYoutrackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsYoutrackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdIntegrationsZentaoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdIntegrationsZentaoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdIntegrationsSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdIntegrationsSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdIntegrationsSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdIntegrationsSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdInvitationsEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdInvitationsEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdInvitationsEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdInvitationsEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdInvitedGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdInvitedGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdIssuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdIssuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdLdapSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdLdapSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdMembersAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdMembersAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdMembersAllUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdMembersAllUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdMembersApproveAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdMembersApproveAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdMembersMemberIdApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdMembersMemberIdApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdMembersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdMembersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdMembersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdMembersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdMembersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdMembersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdMembersUserIdOverrideResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdMembersUserIdOverrideResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdMembersUserIdOverrideResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdMembersUserIdOverrideResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdMembersUserIdStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdMembersUserIdStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdMergeRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdMergeRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPackagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPackagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPendingMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPendingMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdPlaceholderReassignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdPlaceholderReassignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdPlaceholderReassignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdPlaceholderReassignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdPlaceholderReassignmentsAuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdPlaceholderReassignmentsAuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdProjectsSharedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdProjectsSharedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdProjectsProjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdProjectsProjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdProvisionedUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdProvisionedUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdRegistryRepositoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdRegistryRepositoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdReleasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdReleasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdRunnersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdRunnersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdRunnersResetRegistrationTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdRunnersResetRegistrationTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdSamlUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdSamlUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdShareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdShareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdShareGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdShareGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdSshCertificatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdSshCertificatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdSshCertificatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdSshCertificatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdSshCertificatesSshCertificatesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdSshCertificatesSshCertificatesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdSubgroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdSubgroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdTokensRevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdTokensRevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdTransferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdTransferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdTransferLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdTransferLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdUnarchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdUnarchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdUploadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdUploadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdUploadsSecretFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdUploadsSecretFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdUploadsSecretFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdUploadsSecretFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdUploadsUploadIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdUploadsUploadIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdUploadsUploadIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdUploadsUploadIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdVariablesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdVariablesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdVariablesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdVariablesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdVariablesKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdVariablesKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdWikisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdWikisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdWikisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdWikisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PostApiV4GroupsIdWikisAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PostApiV4GroupsIdWikisAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r DeleteApiV4GroupsIdWikisSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r DeleteApiV4GroupsIdWikisSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r GetApiV4GroupsIdWikisSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r GetApiV4GroupsIdWikisSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (r PutApiV4GroupsIdWikisSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}
func (r PutApiV4GroupsIdWikisSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}
func (c *ClientWithResponses) GetApiV4GroupIdPackagesComposerpackageNameWithResponse(ctx context.Context, id string, params *GetApiV4GroupIdPackagesComposerpackageNameParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupIdPackagesComposerpackageNameResponse, error) {
	rsp, err := c.GetApiV4GroupIdPackagesComposerpackageName(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupIdPackagesComposerpackageNameResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupIdPackagesComposerPShaWithResponse(ctx context.Context, id string, sha string, reqEditors ...RequestEditorFn) (*GetApiV4GroupIdPackagesComposerPShaResponse, error) {
	rsp, err := c.GetApiV4GroupIdPackagesComposerPSha(ctx, id, sha, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupIdPackagesComposerPShaResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupIdPackagesComposerP2packageNameWithResponse(ctx context.Context, id string, params *GetApiV4GroupIdPackagesComposerP2packageNameParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupIdPackagesComposerP2packageNameResponse, error) {
	rsp, err := c.GetApiV4GroupIdPackagesComposerP2packageName(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupIdPackagesComposerP2packageNameResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupIdPackagesComposerPackagesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiV4GroupIdPackagesComposerPackagesResponse, error) {
	rsp, err := c.GetApiV4GroupIdPackagesComposerPackages(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupIdPackagesComposerPackagesResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsWithResponse(ctx context.Context, params *GetApiV4GroupsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsResponse, error) {
	rsp, err := c.GetApiV4Groups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsResponse, error) {
	rsp, err := c.PostApiV4GroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsWithResponse(ctx context.Context, body PostApiV4GroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsResponse, error) {
	rsp, err := c.PostApiV4Groups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsImportResponse, error) {
	rsp, err := c.PostApiV4GroupsImportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsImportResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsImportAuthorizeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV4GroupsImportAuthorizeResponse, error) {
	rsp, err := c.PostApiV4GroupsImportAuthorize(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsImportAuthorizeResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdResponse, error) {
	rsp, err := c.DeleteApiV4GroupsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdResponse, error) {
	rsp, err := c.GetApiV4GroupsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdResponse, error) {
	rsp, err := c.PutApiV4GroupsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdWithResponse(ctx context.Context, id string, body PutApiV4GroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdResponse, error) {
	rsp, err := c.PutApiV4GroupsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdDebianDistributionsWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdDebianDistributionsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdDebianDistributionsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdDebianDistributions(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdDebianDistributionsResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdDebianDistributionsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdDebianDistributionsResponse, error) {
	rsp, err := c.PostApiV4GroupsIdDebianDistributionsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdDebianDistributionsResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdDebianDistributionsWithResponse(ctx context.Context, id string, body PostApiV4GroupsIdDebianDistributionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdDebianDistributionsResponse, error) {
	rsp, err := c.PostApiV4GroupsIdDebianDistributions(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdDebianDistributionsResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdDebianDistributionsCodenameWithResponse(ctx context.Context, id string, codename string, params *DeleteApiV4GroupsIdDebianDistributionsCodenameParams, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdDebianDistributionsCodenameResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdDebianDistributionsCodename(ctx, id, codename, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdDebianDistributionsCodenameResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdDebianDistributionsCodenameWithResponse(ctx context.Context, id string, codename string, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdDebianDistributionsCodenameResponse, error) {
	rsp, err := c.GetApiV4GroupsIdDebianDistributionsCodename(ctx, id, codename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdDebianDistributionsCodenameResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdDebianDistributionsCodenameWithBodyWithResponse(ctx context.Context, id string, codename string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdDebianDistributionsCodenameResponse, error) {
	rsp, err := c.PutApiV4GroupsIdDebianDistributionsCodenameWithBody(ctx, id, codename, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdDebianDistributionsCodenameResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdDebianDistributionsCodenameWithResponse(ctx context.Context, id string, codename string, body PutApiV4GroupsIdDebianDistributionsCodenameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdDebianDistributionsCodenameResponse, error) {
	rsp, err := c.PutApiV4GroupsIdDebianDistributionsCodename(ctx, id, codename, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdDebianDistributionsCodenameResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdDebianDistributionsCodenameKeyAscWithResponse(ctx context.Context, id string, codename string, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdDebianDistributionsCodenameKeyAscResponse, error) {
	rsp, err := c.GetApiV4GroupsIdDebianDistributionsCodenameKeyAsc(ctx, id, codename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdDebianDistributionsCodenameKeyAscResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesDebianDistsdistributionInreleaseWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionInreleaseParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesDebianDistsdistributionInreleaseResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesDebianDistsdistributionInrelease(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesDebianDistsdistributionInreleaseResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesDebianDistsdistributionRelease(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesDebianDistsdistributionReleaseResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpgWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpgParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpgResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpg(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpgResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackagesWithResponse(ctx context.Context, id string, component string, architecture string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackagesParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackagesResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackages(ctx, id, component, architecture, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackagesResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256WithResponse(ctx context.Context, id string, component string, architecture string, fileSha256 int32, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256Params, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256Response, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256(ctx, id, component, architecture, fileSha256, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256Response(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackagesWithResponse(ctx context.Context, id string, component string, architecture string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackagesParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackagesResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackages(ctx, id, component, architecture, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackagesResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256WithResponse(ctx context.Context, id string, component string, architecture string, fileSha256 int32, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256Params, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256Response, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256(ctx, id, component, architecture, fileSha256, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256Response(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSourcesWithResponse(ctx context.Context, id string, component string, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSourcesParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSourcesResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSources(ctx, id, component, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSourcesResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256WithResponse(ctx context.Context, id string, component string, fileSha256 int32, params *GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256Params, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256Response, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256(ctx, id, component, fileSha256, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256Response(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesDebianPoolDistributionProjectIdLetterPackageNamePackageVersionFileNameWithResponse(ctx context.Context, id string, distribution string, projectId int32, letter string, packageName string, packageVersion string, fileName string, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesDebianPoolDistributionProjectIdLetterPackageNamePackageVersionFileNameResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesDebianPoolDistributionProjectIdLetterPackageNamePackageVersionFileName(ctx, id, distribution, projectId, letter, packageName, packageVersion, fileName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesDebianPoolDistributionProjectIdLetterPackageNamePackageVersionFileNameResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesMavenpathFileNameWithResponse(ctx context.Context, id string, fileName string, params *GetApiV4GroupsIdPackagesMavenpathFileNameParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesMavenpathFileNameResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesMavenpathFileName(ctx, id, fileName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesMavenpathFileNameResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesNpmpackageNameWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdPackagesNpmpackageNameParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesNpmpackageNameResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesNpmpackageName(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesNpmpackageNameResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdPackagesNpmNpmV1SecurityAdvisoriesBulkWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdPackagesNpmNpmV1SecurityAdvisoriesBulkResponse, error) {
	rsp, err := c.PostApiV4GroupsIdPackagesNpmNpmV1SecurityAdvisoriesBulk(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdPackagesNpmNpmV1SecurityAdvisoriesBulkResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdPackagesNpmNpmV1SecurityAuditsQuickWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdPackagesNpmNpmV1SecurityAuditsQuickResponse, error) {
	rsp, err := c.PostApiV4GroupsIdPackagesNpmNpmV1SecurityAuditsQuick(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdPackagesNpmNpmV1SecurityAuditsQuickResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesNpmPackagepackageNameDistTags(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagWithResponse(ctx context.Context, id string, tag string, params *DeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagParams, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTag(ctx, id, tag, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagWithBodyWithResponse(ctx context.Context, id string, tag string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse, error) {
	rsp, err := c.PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagWithBody(ctx, id, tag, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagWithResponse(ctx context.Context, id string, tag string, body PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse, error) {
	rsp, err := c.PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTag(ctx, id, tag, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesNugetIndexWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesNugetIndexResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesNugetIndex(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesNugetIndexResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesNugetQueryWithResponse(ctx context.Context, id int32, params *GetApiV4GroupsIdPackagesNugetQueryParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesNugetQueryResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesNugetQuery(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesNugetQueryResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileNameWithResponse(ctx context.Context, id int32, params *GetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileNameParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileNameResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileName(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileNameResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesNugetV2WithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesNugetV2Response, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesNugetV2(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesNugetV2Response(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesNugetV2MetadataWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesNugetV2MetadataResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesNugetV2Metadata(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesNugetV2MetadataResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifierWithResponse(ctx context.Context, id int32, sha256 string, params *GetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifierParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifierResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifier(ctx, id, sha256, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifierResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesPypiSimpleWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesPypiSimpleResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesPypiSimple(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesPypiSimpleResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesPypiSimplepackageNameWithResponse(ctx context.Context, id int32, params *GetApiV4GroupsIdPackagesPypiSimplepackageNameParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesPypiSimplepackageNameResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackagesPypiSimplepackageName(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesPypiSimplepackageNameResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdAccessRequestsWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdAccessRequestsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdAccessRequestsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdAccessRequests(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdAccessRequestsResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdAccessRequestsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdAccessRequestsResponse, error) {
	rsp, err := c.PostApiV4GroupsIdAccessRequests(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdAccessRequestsResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdAccessRequestsUserIdWithResponse(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdAccessRequestsUserIdResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdAccessRequestsUserId(ctx, id, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdAccessRequestsUserIdResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdAccessRequestsUserIdApproveWithBodyWithResponse(ctx context.Context, id string, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdAccessRequestsUserIdApproveResponse, error) {
	rsp, err := c.PutApiV4GroupsIdAccessRequestsUserIdApproveWithBody(ctx, id, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdAccessRequestsUserIdApproveResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdAccessRequestsUserIdApproveWithResponse(ctx context.Context, id string, userId int32, body PutApiV4GroupsIdAccessRequestsUserIdApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdAccessRequestsUserIdApproveResponse, error) {
	rsp, err := c.PutApiV4GroupsIdAccessRequestsUserIdApprove(ctx, id, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdAccessRequestsUserIdApproveResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdAccessTokensSelfRotateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdAccessTokensSelfRotateResponse, error) {
	rsp, err := c.PostApiV4GroupsIdAccessTokensSelfRotateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdAccessTokensSelfRotateResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdAccessTokensSelfRotateWithResponse(ctx context.Context, id string, body PostApiV4GroupsIdAccessTokensSelfRotateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdAccessTokensSelfRotateResponse, error) {
	rsp, err := c.PostApiV4GroupsIdAccessTokensSelfRotate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdAccessTokensSelfRotateResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdArchiveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdArchiveResponse, error) {
	rsp, err := c.PostApiV4GroupsIdArchive(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdArchiveResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdAuditEventsWithResponse(ctx context.Context, id int32, params *GetApiV4GroupsIdAuditEventsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdAuditEventsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdAuditEvents(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdAuditEventsResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdAuditEventsAuditEventIdWithResponse(ctx context.Context, id int32, auditEventId int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdAuditEventsAuditEventIdResponse, error) {
	rsp, err := c.GetApiV4GroupsIdAuditEventsAuditEventId(ctx, id, auditEventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdAuditEventsAuditEventIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdAvatarWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdAvatarResponse, error) {
	rsp, err := c.GetApiV4GroupsIdAvatar(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdAvatarResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdBadgesWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdBadgesParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdBadgesResponse, error) {
	rsp, err := c.GetApiV4GroupsIdBadges(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdBadgesResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdBadgesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdBadgesResponse, error) {
	rsp, err := c.PostApiV4GroupsIdBadgesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdBadgesResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdBadgesWithResponse(ctx context.Context, id string, body PostApiV4GroupsIdBadgesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdBadgesResponse, error) {
	rsp, err := c.PostApiV4GroupsIdBadges(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdBadgesResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdBadgesRenderWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdBadgesRenderParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdBadgesRenderResponse, error) {
	rsp, err := c.GetApiV4GroupsIdBadgesRender(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdBadgesRenderResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdBadgesBadgeIdWithResponse(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdBadgesBadgeIdResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdBadgesBadgeId(ctx, id, badgeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdBadgesBadgeIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdBadgesBadgeIdWithResponse(ctx context.Context, id string, badgeId int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdBadgesBadgeIdResponse, error) {
	rsp, err := c.GetApiV4GroupsIdBadgesBadgeId(ctx, id, badgeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdBadgesBadgeIdResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdBadgesBadgeIdWithBodyWithResponse(ctx context.Context, id string, badgeId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdBadgesBadgeIdResponse, error) {
	rsp, err := c.PutApiV4GroupsIdBadgesBadgeIdWithBody(ctx, id, badgeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdBadgesBadgeIdResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdBadgesBadgeIdWithResponse(ctx context.Context, id string, badgeId int32, body PutApiV4GroupsIdBadgesBadgeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdBadgesBadgeIdResponse, error) {
	rsp, err := c.PutApiV4GroupsIdBadgesBadgeId(ctx, id, badgeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdBadgesBadgeIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdBillableMembersWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdBillableMembersParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdBillableMembersResponse, error) {
	rsp, err := c.GetApiV4GroupsIdBillableMembers(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdBillableMembersResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdBillableMembersUserIdWithResponse(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdBillableMembersUserIdResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdBillableMembersUserId(ctx, id, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdBillableMembersUserIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdBillableMembersUserIdIndirectWithResponse(ctx context.Context, id string, userId int32, params *GetApiV4GroupsIdBillableMembersUserIdIndirectParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdBillableMembersUserIdIndirectResponse, error) {
	rsp, err := c.GetApiV4GroupsIdBillableMembersUserIdIndirect(ctx, id, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdBillableMembersUserIdIndirectResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdBillableMembersUserIdMembershipsWithResponse(ctx context.Context, id string, userId int32, params *GetApiV4GroupsIdBillableMembersUserIdMembershipsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdBillableMembersUserIdMembershipsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdBillableMembersUserIdMemberships(ctx, id, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdBillableMembersUserIdMembershipsResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdClustersWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdClustersParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdClustersResponse, error) {
	rsp, err := c.GetApiV4GroupsIdClusters(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdClustersResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdClustersUserWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdClustersUserResponse, error) {
	rsp, err := c.PostApiV4GroupsIdClustersUserWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdClustersUserResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdClustersUserWithResponse(ctx context.Context, id string, body PostApiV4GroupsIdClustersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdClustersUserResponse, error) {
	rsp, err := c.PostApiV4GroupsIdClustersUser(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdClustersUserResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdClustersClusterIdWithResponse(ctx context.Context, id string, clusterId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdClustersClusterIdResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdClustersClusterId(ctx, id, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdClustersClusterIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdClustersClusterIdWithResponse(ctx context.Context, id string, clusterId int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdClustersClusterIdResponse, error) {
	rsp, err := c.GetApiV4GroupsIdClustersClusterId(ctx, id, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdClustersClusterIdResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdClustersClusterIdWithBodyWithResponse(ctx context.Context, id string, clusterId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdClustersClusterIdResponse, error) {
	rsp, err := c.PutApiV4GroupsIdClustersClusterIdWithBody(ctx, id, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdClustersClusterIdResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdClustersClusterIdWithResponse(ctx context.Context, id string, clusterId int32, body PutApiV4GroupsIdClustersClusterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdClustersClusterIdResponse, error) {
	rsp, err := c.PutApiV4GroupsIdClustersClusterId(ctx, id, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdClustersClusterIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdCustomAttributesWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdCustomAttributesResponse, error) {
	rsp, err := c.GetApiV4GroupsIdCustomAttributes(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdCustomAttributesResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdCustomAttributesKeyWithResponse(ctx context.Context, id int32, key string, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdCustomAttributesKeyResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdCustomAttributesKey(ctx, id, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdCustomAttributesKeyResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdCustomAttributesKeyWithResponse(ctx context.Context, id int32, key string, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdCustomAttributesKeyResponse, error) {
	rsp, err := c.GetApiV4GroupsIdCustomAttributesKey(ctx, id, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdCustomAttributesKeyResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdCustomAttributesKeyWithBodyWithResponse(ctx context.Context, id int32, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdCustomAttributesKeyResponse, error) {
	rsp, err := c.PutApiV4GroupsIdCustomAttributesKeyWithBody(ctx, id, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdCustomAttributesKeyResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdCustomAttributesKeyWithResponse(ctx context.Context, id int32, key string, body PutApiV4GroupsIdCustomAttributesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdCustomAttributesKeyResponse, error) {
	rsp, err := c.PutApiV4GroupsIdCustomAttributesKey(ctx, id, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdCustomAttributesKeyResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdDependencyProxyCacheWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdDependencyProxyCacheResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdDependencyProxyCache(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdDependencyProxyCacheResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdDeployTokensWithResponse(ctx context.Context, id int32, params *GetApiV4GroupsIdDeployTokensParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdDeployTokensResponse, error) {
	rsp, err := c.GetApiV4GroupsIdDeployTokens(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdDeployTokensResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdDeployTokensWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdDeployTokensResponse, error) {
	rsp, err := c.PostApiV4GroupsIdDeployTokensWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdDeployTokensResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdDeployTokensWithResponse(ctx context.Context, id int32, body PostApiV4GroupsIdDeployTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdDeployTokensResponse, error) {
	rsp, err := c.PostApiV4GroupsIdDeployTokens(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdDeployTokensResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdDeployTokensTokenIdWithResponse(ctx context.Context, id int32, tokenId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdDeployTokensTokenIdResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdDeployTokensTokenId(ctx, id, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdDeployTokensTokenIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdDeployTokensTokenIdWithResponse(ctx context.Context, id int32, tokenId int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdDeployTokensTokenIdResponse, error) {
	rsp, err := c.GetApiV4GroupsIdDeployTokensTokenId(ctx, id, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdDeployTokensTokenIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdDescendantGroupsWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdDescendantGroupsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdDescendantGroupsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdDescendantGroups(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdDescendantGroupsResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdEpicsEpicIidAwardEmojiWithResponse(ctx context.Context, id string, epicIid int32, params *GetApiV4GroupsIdEpicsEpicIidAwardEmojiParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdEpicsEpicIidAwardEmojiResponse, error) {
	rsp, err := c.GetApiV4GroupsIdEpicsEpicIidAwardEmoji(ctx, id, epicIid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdEpicsEpicIidAwardEmojiResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdEpicsEpicIidAwardEmojiWithBodyWithResponse(ctx context.Context, id int32, epicIid int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdEpicsEpicIidAwardEmojiResponse, error) {
	rsp, err := c.PostApiV4GroupsIdEpicsEpicIidAwardEmojiWithBody(ctx, id, epicIid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdEpicsEpicIidAwardEmojiResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdEpicsEpicIidAwardEmojiWithResponse(ctx context.Context, id int32, epicIid int32, body PostApiV4GroupsIdEpicsEpicIidAwardEmojiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdEpicsEpicIidAwardEmojiResponse, error) {
	rsp, err := c.PostApiV4GroupsIdEpicsEpicIidAwardEmoji(ctx, id, epicIid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdEpicsEpicIidAwardEmojiResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdWithResponse(ctx context.Context, id int32, epicIid int32, awardId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdEpicsEpicIidAwardEmojiAwardId(ctx, id, epicIid, awardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdWithResponse(ctx context.Context, id int32, epicIid int32, awardId int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse, error) {
	rsp, err := c.GetApiV4GroupsIdEpicsEpicIidAwardEmojiAwardId(ctx, id, epicIid, awardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiWithResponse(ctx context.Context, id int32, epicIid int32, noteId int32, params *GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse, error) {
	rsp, err := c.GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmoji(ctx, id, epicIid, noteId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiWithBodyWithResponse(ctx context.Context, id int32, epicIid int32, noteId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse, error) {
	rsp, err := c.PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiWithBody(ctx, id, epicIid, noteId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiWithResponse(ctx context.Context, id int32, epicIid int32, noteId int32, body PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse, error) {
	rsp, err := c.PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmoji(ctx, id, epicIid, noteId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdWithResponse(ctx context.Context, id int32, epicIid int32, noteId int32, awardId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardId(ctx, id, epicIid, noteId, awardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdWithResponse(ctx context.Context, id int32, epicIid int32, noteId int32, awardId int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse, error) {
	rsp, err := c.GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardId(ctx, id, epicIid, noteId, awardId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdExportWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdExportResponse, error) {
	rsp, err := c.PostApiV4GroupsIdExport(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdExportResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdExportDownloadWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdExportDownloadResponse, error) {
	rsp, err := c.GetApiV4GroupsIdExportDownload(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdExportDownloadResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdExportRelationsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdExportRelationsResponse, error) {
	rsp, err := c.PostApiV4GroupsIdExportRelationsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdExportRelationsResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdExportRelationsWithResponse(ctx context.Context, id string, body PostApiV4GroupsIdExportRelationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdExportRelationsResponse, error) {
	rsp, err := c.PostApiV4GroupsIdExportRelations(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdExportRelationsResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdExportRelationsDownloadWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdExportRelationsDownloadParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdExportRelationsDownloadResponse, error) {
	rsp, err := c.GetApiV4GroupsIdExportRelationsDownload(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdExportRelationsDownloadResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdExportRelationsStatusWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdExportRelationsStatusParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdExportRelationsStatusResponse, error) {
	rsp, err := c.GetApiV4GroupsIdExportRelationsStatus(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdExportRelationsStatusResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdGroupsSharedWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdGroupsSharedParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdGroupsSharedResponse, error) {
	rsp, err := c.GetApiV4GroupsIdGroupsShared(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdGroupsSharedResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdIntegrationsWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdIntegrationsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdIntegrations(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdIntegrationsResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsAppleAppStoreWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsAppleAppStoreResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsAppleAppStoreWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsAppleAppStoreResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsAppleAppStoreWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsAppleAppStoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsAppleAppStoreResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsAppleAppStore(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsAppleAppStoreResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsAsanaWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsAsanaResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsAsanaWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsAsanaResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsAsanaWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsAsanaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsAsanaResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsAsana(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsAsanaResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsAssemblaWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsAssemblaResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsAssemblaWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsAssemblaResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsAssemblaWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsAssemblaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsAssemblaResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsAssembla(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsAssemblaResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsBambooWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsBambooResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsBambooWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsBambooResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsBambooWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsBambooJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsBambooResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsBamboo(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsBambooResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsBugzillaWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsBugzillaResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsBugzillaWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsBugzillaResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsBugzillaWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsBugzillaJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsBugzillaResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsBugzilla(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsBugzillaResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsBuildkiteWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsBuildkiteResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsBuildkiteWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsBuildkiteResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsBuildkiteWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsBuildkiteJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsBuildkiteResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsBuildkite(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsBuildkiteResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsCampfireWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsCampfireResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsCampfireWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsCampfireResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsCampfireWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsCampfireJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsCampfireResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsCampfire(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsCampfireResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsClickupWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsClickupResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsClickupWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsClickupResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsClickupWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsClickupJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsClickupResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsClickup(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsClickupResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsConfluenceWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsConfluenceResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsConfluenceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsConfluenceResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsConfluenceWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsConfluenceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsConfluenceResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsConfluence(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsConfluenceResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsCustomIssueTrackerWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsCustomIssueTrackerResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsCustomIssueTrackerWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsCustomIssueTrackerResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsCustomIssueTrackerWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsCustomIssueTrackerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsCustomIssueTrackerResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsCustomIssueTracker(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsCustomIssueTrackerResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsDatadogWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsDatadogResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsDatadogWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsDatadogResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsDatadogWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsDatadogJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsDatadogResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsDatadog(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsDatadogResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsDiffblueCoverWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsDiffblueCoverResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsDiffblueCoverWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsDiffblueCoverResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsDiffblueCoverWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsDiffblueCoverJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsDiffblueCoverResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsDiffblueCover(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsDiffblueCoverResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsDiscordWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsDiscordResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsDiscordWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsDiscordResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsDiscordWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsDiscordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsDiscordResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsDiscord(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsDiscordResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsDroneCiWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsDroneCiResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsDroneCiWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsDroneCiResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsDroneCiWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsDroneCiJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsDroneCiResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsDroneCi(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsDroneCiResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsEmailsOnPushWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsEmailsOnPushResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsEmailsOnPushWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsEmailsOnPushResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsEmailsOnPushWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsEmailsOnPushJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsEmailsOnPushResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsEmailsOnPush(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsEmailsOnPushResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsEwmWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsEwmResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsEwmWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsEwmResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsEwmWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsEwmJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsEwmResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsEwm(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsEwmResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsExternalWikiWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsExternalWikiResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsExternalWikiWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsExternalWikiResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsExternalWikiWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsExternalWikiJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsExternalWikiResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsExternalWiki(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsExternalWikiResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsGitGuardianWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsGitGuardianResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsGitGuardianWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsGitGuardianResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsGitGuardianWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsGitGuardianJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsGitGuardianResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsGitGuardian(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsGitGuardianResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsGithubWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsGithubResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsGithubWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsGithubResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsGithubWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsGithubJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsGithubResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsGithub(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsGithubResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsGitlabSlackApplicationWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsGitlabSlackApplicationResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsGitlabSlackApplicationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsGitlabSlackApplicationResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsGitlabSlackApplicationWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsGitlabSlackApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsGitlabSlackApplicationResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsGitlabSlackApplication(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsGitlabSlackApplicationResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistry(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederation(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsGooglePlayWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsGooglePlayResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsGooglePlayWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsGooglePlayResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsGooglePlayWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsGooglePlayJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsGooglePlayResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsGooglePlay(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsGooglePlayResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsHangoutsChatWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsHangoutsChatResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsHangoutsChatWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsHangoutsChatResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsHangoutsChatWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsHangoutsChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsHangoutsChatResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsHangoutsChat(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsHangoutsChatResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsHarborWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsHarborResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsHarborWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsHarborResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsHarborWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsHarborJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsHarborResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsHarbor(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsHarborResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsIrkerWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsIrkerResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsIrkerWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsIrkerResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsIrkerWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsIrkerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsIrkerResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsIrker(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsIrkerResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsJenkinsWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsJenkinsResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsJenkinsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsJenkinsResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsJenkinsWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsJenkinsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsJenkinsResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsJenkins(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsJenkinsResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsJiraWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsJiraResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsJiraWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsJiraResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsJiraWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsJiraJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsJiraResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsJira(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsJiraResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsJiraCloudAppWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsJiraCloudAppResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsJiraCloudAppWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsJiraCloudAppResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsJiraCloudAppWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsJiraCloudAppJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsJiraCloudAppResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsJiraCloudApp(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsJiraCloudAppResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsMatrixWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsMatrixResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsMatrixWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsMatrixResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsMatrixWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsMatrixJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsMatrixResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsMatrix(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsMatrixResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsMattermostWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsMattermostResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsMattermostWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsMattermostResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsMattermostWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsMattermostJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsMattermostResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsMattermost(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsMattermostResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsMattermostSlashCommandsWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsMattermostSlashCommandsResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsMattermostSlashCommandsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsMattermostSlashCommandsResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsMattermostSlashCommandsWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsMattermostSlashCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsMattermostSlashCommandsResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsMattermostSlashCommands(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsMattermostSlashCommandsResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsMicrosoftTeamsWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsMicrosoftTeamsResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsMicrosoftTeamsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsMicrosoftTeamsResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsMicrosoftTeamsWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsMicrosoftTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsMicrosoftTeamsResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsMicrosoftTeams(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsMicrosoftTeamsResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsMockCiWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsMockCiResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsMockCiWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsMockCiResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsMockCiWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsMockCiJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsMockCiResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsMockCi(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsMockCiResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsMockMonitoringWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsMockMonitoringResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsMockMonitoringWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsMockMonitoringResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsMockMonitoringWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsMockMonitoringJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsMockMonitoringResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsMockMonitoring(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsMockMonitoringResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsPackagistWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsPackagistResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsPackagistWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsPackagistResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsPackagistWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsPackagistJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsPackagistResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsPackagist(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsPackagistResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsPhorgeWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsPhorgeResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsPhorgeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsPhorgeResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsPhorgeWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsPhorgeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsPhorgeResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsPhorge(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsPhorgeResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsPipelinesEmailWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsPipelinesEmailResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsPipelinesEmailWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsPipelinesEmailResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsPipelinesEmailWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsPipelinesEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsPipelinesEmailResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsPipelinesEmail(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsPipelinesEmailResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsPivotaltrackerWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsPivotaltrackerResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsPivotaltrackerWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsPivotaltrackerResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsPivotaltrackerWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsPivotaltrackerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsPivotaltrackerResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsPivotaltracker(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsPivotaltrackerResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsPumbleWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsPumbleResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsPumbleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsPumbleResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsPumbleWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsPumbleJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsPumbleResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsPumble(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsPumbleResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsPushoverWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsPushoverResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsPushoverWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsPushoverResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsPushoverWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsPushoverJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsPushoverResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsPushover(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsPushoverResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsRedmineWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsRedmineResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsRedmineWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsRedmineResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsRedmineWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsRedmineJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsRedmineResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsRedmine(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsRedmineResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsSlackWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsSlackResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsSlackWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsSlackResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsSlackWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsSlackJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsSlackResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsSlack(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsSlackResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsSlackSlashCommandsWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsSlackSlashCommandsResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsSlackSlashCommandsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsSlackSlashCommandsResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsSlackSlashCommandsWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsSlackSlashCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsSlackSlashCommandsResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsSlackSlashCommands(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsSlackSlashCommandsResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsSquashTmWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsSquashTmResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsSquashTmWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsSquashTmResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsSquashTmWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsSquashTmJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsSquashTmResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsSquashTm(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsSquashTmResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsTeamcityWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsTeamcityResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsTeamcityWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsTeamcityResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsTeamcityWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsTeamcityJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsTeamcityResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsTeamcity(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsTeamcityResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsTelegramWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsTelegramResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsTelegramWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsTelegramResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsTelegramWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsTelegramJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsTelegramResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsTelegram(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsTelegramResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsUnifyCircuitWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsUnifyCircuitResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsUnifyCircuitWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsUnifyCircuitResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsUnifyCircuitWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsUnifyCircuitJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsUnifyCircuitResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsUnifyCircuit(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsUnifyCircuitResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsWebexTeamsWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsWebexTeamsResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsWebexTeamsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsWebexTeamsResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsWebexTeamsWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsWebexTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsWebexTeamsResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsWebexTeams(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsWebexTeamsResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsYoutrackWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsYoutrackResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsYoutrackWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsYoutrackResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsYoutrackWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsYoutrackJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsYoutrackResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsYoutrack(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsYoutrackResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsZentaoWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsZentaoResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsZentaoWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsZentaoResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdIntegrationsZentaoWithResponse(ctx context.Context, id int32, body PutApiV4GroupsIdIntegrationsZentaoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdIntegrationsZentaoResponse, error) {
	rsp, err := c.PutApiV4GroupsIdIntegrationsZentao(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdIntegrationsZentaoResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdIntegrationsSlugWithResponse(ctx context.Context, id int32, slug DeleteApiV4GroupsIdIntegrationsSlugParamsSlug, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdIntegrationsSlugResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdIntegrationsSlug(ctx, id, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdIntegrationsSlugResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdIntegrationsSlugWithResponse(ctx context.Context, id int32, slug GetApiV4GroupsIdIntegrationsSlugParamsSlug, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdIntegrationsSlugResponse, error) {
	rsp, err := c.GetApiV4GroupsIdIntegrationsSlug(ctx, id, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdIntegrationsSlugResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdInvitationsWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdInvitationsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdInvitationsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdInvitations(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdInvitationsResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdInvitationsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdInvitationsResponse, error) {
	rsp, err := c.PostApiV4GroupsIdInvitationsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdInvitationsResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdInvitationsWithResponse(ctx context.Context, id string, body PostApiV4GroupsIdInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdInvitationsResponse, error) {
	rsp, err := c.PostApiV4GroupsIdInvitations(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdInvitationsResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdInvitationsEmailWithResponse(ctx context.Context, id string, email string, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdInvitationsEmailResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdInvitationsEmail(ctx, id, email, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdInvitationsEmailResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdInvitationsEmailWithBodyWithResponse(ctx context.Context, id string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdInvitationsEmailResponse, error) {
	rsp, err := c.PutApiV4GroupsIdInvitationsEmailWithBody(ctx, id, email, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdInvitationsEmailResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdInvitationsEmailWithResponse(ctx context.Context, id string, email string, body PutApiV4GroupsIdInvitationsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdInvitationsEmailResponse, error) {
	rsp, err := c.PutApiV4GroupsIdInvitationsEmail(ctx, id, email, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdInvitationsEmailResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdInvitedGroupsWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdInvitedGroupsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdInvitedGroupsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdInvitedGroups(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdInvitedGroupsResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdIssuesWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdIssuesParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdIssuesResponse, error) {
	rsp, err := c.GetApiV4GroupsIdIssues(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdIssuesResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdLdapSyncWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdLdapSyncResponse, error) {
	rsp, err := c.PostApiV4GroupsIdLdapSync(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdLdapSyncResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdMembersWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdMembersParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdMembersResponse, error) {
	rsp, err := c.GetApiV4GroupsIdMembers(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdMembersResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdMembersWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdMembersResponse, error) {
	rsp, err := c.PostApiV4GroupsIdMembersWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdMembersResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdMembersWithResponse(ctx context.Context, id string, body PostApiV4GroupsIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdMembersResponse, error) {
	rsp, err := c.PostApiV4GroupsIdMembers(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdMembersResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdMembersAllWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdMembersAllParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdMembersAllResponse, error) {
	rsp, err := c.GetApiV4GroupsIdMembersAll(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdMembersAllResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdMembersAllUserIdWithResponse(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdMembersAllUserIdResponse, error) {
	rsp, err := c.GetApiV4GroupsIdMembersAllUserId(ctx, id, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdMembersAllUserIdResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdMembersApproveAllWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdMembersApproveAllResponse, error) {
	rsp, err := c.PostApiV4GroupsIdMembersApproveAll(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdMembersApproveAllResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdMembersMemberIdApproveWithResponse(ctx context.Context, id string, memberId int32, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdMembersMemberIdApproveResponse, error) {
	rsp, err := c.PutApiV4GroupsIdMembersMemberIdApprove(ctx, id, memberId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdMembersMemberIdApproveResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdMembersUserIdWithResponse(ctx context.Context, id string, userId int32, params *DeleteApiV4GroupsIdMembersUserIdParams, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdMembersUserIdResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdMembersUserId(ctx, id, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdMembersUserIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdMembersUserIdWithResponse(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdMembersUserIdResponse, error) {
	rsp, err := c.GetApiV4GroupsIdMembersUserId(ctx, id, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdMembersUserIdResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdMembersUserIdWithBodyWithResponse(ctx context.Context, id string, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdMembersUserIdResponse, error) {
	rsp, err := c.PutApiV4GroupsIdMembersUserIdWithBody(ctx, id, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdMembersUserIdResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdMembersUserIdWithResponse(ctx context.Context, id string, userId int32, body PutApiV4GroupsIdMembersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdMembersUserIdResponse, error) {
	rsp, err := c.PutApiV4GroupsIdMembersUserId(ctx, id, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdMembersUserIdResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdMembersUserIdOverrideWithResponse(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdMembersUserIdOverrideResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdMembersUserIdOverride(ctx, id, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdMembersUserIdOverrideResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdMembersUserIdOverrideWithResponse(ctx context.Context, id string, userId int32, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdMembersUserIdOverrideResponse, error) {
	rsp, err := c.PostApiV4GroupsIdMembersUserIdOverride(ctx, id, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdMembersUserIdOverrideResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdMembersUserIdStateWithBodyWithResponse(ctx context.Context, id string, userId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdMembersUserIdStateResponse, error) {
	rsp, err := c.PutApiV4GroupsIdMembersUserIdStateWithBody(ctx, id, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdMembersUserIdStateResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdMembersUserIdStateWithResponse(ctx context.Context, id string, userId int32, body PutApiV4GroupsIdMembersUserIdStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdMembersUserIdStateResponse, error) {
	rsp, err := c.PutApiV4GroupsIdMembersUserIdState(ctx, id, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdMembersUserIdStateResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdMergeRequestsWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdMergeRequestsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdMergeRequestsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdMergeRequests(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdMergeRequestsResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPackagesWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdPackagesParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPackagesResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPackages(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPackagesResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPendingMembersWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdPendingMembersParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPendingMembersResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPendingMembers(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPendingMembersResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdPlaceholderReassignmentsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdPlaceholderReassignmentsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdPlaceholderReassignments(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdPlaceholderReassignmentsResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdPlaceholderReassignmentsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdPlaceholderReassignmentsResponse, error) {
	rsp, err := c.PostApiV4GroupsIdPlaceholderReassignmentsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdPlaceholderReassignmentsResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdPlaceholderReassignmentsWithResponse(ctx context.Context, id string, body PostApiV4GroupsIdPlaceholderReassignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdPlaceholderReassignmentsResponse, error) {
	rsp, err := c.PostApiV4GroupsIdPlaceholderReassignments(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdPlaceholderReassignmentsResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdPlaceholderReassignmentsAuthorizeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdPlaceholderReassignmentsAuthorizeResponse, error) {
	rsp, err := c.PostApiV4GroupsIdPlaceholderReassignmentsAuthorize(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdPlaceholderReassignmentsAuthorizeResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdProjectsWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdProjectsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdProjectsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdProjects(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdProjectsResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdProjectsSharedWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdProjectsSharedParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdProjectsSharedResponse, error) {
	rsp, err := c.GetApiV4GroupsIdProjectsShared(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdProjectsSharedResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdProjectsProjectIdWithResponse(ctx context.Context, id string, projectId string, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdProjectsProjectIdResponse, error) {
	rsp, err := c.PostApiV4GroupsIdProjectsProjectId(ctx, id, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdProjectsProjectIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdProvisionedUsersWithResponse(ctx context.Context, id int32, params *GetApiV4GroupsIdProvisionedUsersParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdProvisionedUsersResponse, error) {
	rsp, err := c.GetApiV4GroupsIdProvisionedUsers(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdProvisionedUsersResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdRegistryRepositoriesWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdRegistryRepositoriesParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdRegistryRepositoriesResponse, error) {
	rsp, err := c.GetApiV4GroupsIdRegistryRepositories(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdRegistryRepositoriesResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdReleasesWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdReleasesParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdReleasesResponse, error) {
	rsp, err := c.GetApiV4GroupsIdReleases(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdReleasesResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdRestoreWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdRestoreResponse, error) {
	rsp, err := c.PostApiV4GroupsIdRestore(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdRestoreResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdRunnersWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdRunnersParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdRunnersResponse, error) {
	rsp, err := c.GetApiV4GroupsIdRunners(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdRunnersResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdRunnersResetRegistrationTokenWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdRunnersResetRegistrationTokenResponse, error) {
	rsp, err := c.PostApiV4GroupsIdRunnersResetRegistrationToken(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdRunnersResetRegistrationTokenResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdSamlUsersWithResponse(ctx context.Context, id int32, params *GetApiV4GroupsIdSamlUsersParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdSamlUsersResponse, error) {
	rsp, err := c.GetApiV4GroupsIdSamlUsers(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdSamlUsersResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdShareWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdShareResponse, error) {
	rsp, err := c.PostApiV4GroupsIdShareWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdShareResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdShareWithResponse(ctx context.Context, id string, body PostApiV4GroupsIdShareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdShareResponse, error) {
	rsp, err := c.PostApiV4GroupsIdShare(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdShareResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdShareGroupIdWithResponse(ctx context.Context, id string, groupId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdShareGroupIdResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdShareGroupId(ctx, id, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdShareGroupIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdSshCertificatesWithResponse(ctx context.Context, id int32, params *GetApiV4GroupsIdSshCertificatesParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdSshCertificatesResponse, error) {
	rsp, err := c.GetApiV4GroupsIdSshCertificates(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdSshCertificatesResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdSshCertificatesWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdSshCertificatesResponse, error) {
	rsp, err := c.PostApiV4GroupsIdSshCertificatesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdSshCertificatesResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdSshCertificatesWithResponse(ctx context.Context, id int32, body PostApiV4GroupsIdSshCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdSshCertificatesResponse, error) {
	rsp, err := c.PostApiV4GroupsIdSshCertificates(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdSshCertificatesResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdSshCertificatesSshCertificatesIdWithResponse(ctx context.Context, id int32, sshCertificatesId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdSshCertificatesSshCertificatesIdResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdSshCertificatesSshCertificatesId(ctx, id, sshCertificatesId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdSshCertificatesSshCertificatesIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdSubgroupsWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdSubgroupsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdSubgroupsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdSubgroups(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdSubgroupsResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdTokensRevokeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdTokensRevokeResponse, error) {
	rsp, err := c.PostApiV4GroupsIdTokensRevokeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdTokensRevokeResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdTokensRevokeWithResponse(ctx context.Context, id string, body PostApiV4GroupsIdTokensRevokeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdTokensRevokeResponse, error) {
	rsp, err := c.PostApiV4GroupsIdTokensRevoke(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdTokensRevokeResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdTransferWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdTransferResponse, error) {
	rsp, err := c.PostApiV4GroupsIdTransferWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdTransferResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdTransferWithResponse(ctx context.Context, id string, body PostApiV4GroupsIdTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdTransferResponse, error) {
	rsp, err := c.PostApiV4GroupsIdTransfer(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdTransferResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdTransferLocationsWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdTransferLocationsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdTransferLocationsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdTransferLocations(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdTransferLocationsResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdUnarchiveWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdUnarchiveResponse, error) {
	rsp, err := c.PostApiV4GroupsIdUnarchive(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdUnarchiveResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdUploadsWithResponse(ctx context.Context, id int32, params *GetApiV4GroupsIdUploadsParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdUploadsResponse, error) {
	rsp, err := c.GetApiV4GroupsIdUploads(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdUploadsResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdUploadsSecretFilenameWithResponse(ctx context.Context, id int32, secret string, filename string, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdUploadsSecretFilenameResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdUploadsSecretFilename(ctx, id, secret, filename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdUploadsSecretFilenameResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdUploadsSecretFilenameWithResponse(ctx context.Context, id int32, secret string, filename string, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdUploadsSecretFilenameResponse, error) {
	rsp, err := c.GetApiV4GroupsIdUploadsSecretFilename(ctx, id, secret, filename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdUploadsSecretFilenameResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdUploadsUploadIdWithResponse(ctx context.Context, id int32, uploadId int32, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdUploadsUploadIdResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdUploadsUploadId(ctx, id, uploadId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdUploadsUploadIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdUploadsUploadIdWithResponse(ctx context.Context, id int32, uploadId int32, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdUploadsUploadIdResponse, error) {
	rsp, err := c.GetApiV4GroupsIdUploadsUploadId(ctx, id, uploadId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdUploadsUploadIdResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdUsersWithResponse(ctx context.Context, id int32, params *GetApiV4GroupsIdUsersParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdUsersResponse, error) {
	rsp, err := c.GetApiV4GroupsIdUsers(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdUsersResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdVariablesWithResponse(ctx context.Context, id string, params *GetApiV4GroupsIdVariablesParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdVariablesResponse, error) {
	rsp, err := c.GetApiV4GroupsIdVariables(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdVariablesResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdVariablesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdVariablesResponse, error) {
	rsp, err := c.PostApiV4GroupsIdVariablesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdVariablesResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdVariablesWithResponse(ctx context.Context, id string, body PostApiV4GroupsIdVariablesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdVariablesResponse, error) {
	rsp, err := c.PostApiV4GroupsIdVariables(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdVariablesResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdVariablesKeyWithResponse(ctx context.Context, id string, key string, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdVariablesKeyResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdVariablesKey(ctx, id, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdVariablesKeyResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdVariablesKeyWithResponse(ctx context.Context, id string, key string, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdVariablesKeyResponse, error) {
	rsp, err := c.GetApiV4GroupsIdVariablesKey(ctx, id, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdVariablesKeyResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdVariablesKeyWithBodyWithResponse(ctx context.Context, id string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdVariablesKeyResponse, error) {
	rsp, err := c.PutApiV4GroupsIdVariablesKeyWithBody(ctx, id, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdVariablesKeyResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdVariablesKeyWithResponse(ctx context.Context, id string, key string, body PutApiV4GroupsIdVariablesKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdVariablesKeyResponse, error) {
	rsp, err := c.PutApiV4GroupsIdVariablesKey(ctx, id, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdVariablesKeyResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdWikisWithResponse(ctx context.Context, id int32, params *GetApiV4GroupsIdWikisParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdWikisResponse, error) {
	rsp, err := c.GetApiV4GroupsIdWikis(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdWikisResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdWikisWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdWikisResponse, error) {
	rsp, err := c.PostApiV4GroupsIdWikisWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdWikisResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdWikisWithResponse(ctx context.Context, id int32, body PostApiV4GroupsIdWikisJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdWikisResponse, error) {
	rsp, err := c.PostApiV4GroupsIdWikis(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdWikisResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdWikisAttachmentsWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdWikisAttachmentsResponse, error) {
	rsp, err := c.PostApiV4GroupsIdWikisAttachmentsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdWikisAttachmentsResponse(rsp)
}
func (c *ClientWithResponses) PostApiV4GroupsIdWikisAttachmentsWithResponse(ctx context.Context, id int32, body PostApiV4GroupsIdWikisAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV4GroupsIdWikisAttachmentsResponse, error) {
	rsp, err := c.PostApiV4GroupsIdWikisAttachments(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV4GroupsIdWikisAttachmentsResponse(rsp)
}
func (c *ClientWithResponses) DeleteApiV4GroupsIdWikisSlugWithResponse(ctx context.Context, id int32, slug string, reqEditors ...RequestEditorFn) (*DeleteApiV4GroupsIdWikisSlugResponse, error) {
	rsp, err := c.DeleteApiV4GroupsIdWikisSlug(ctx, id, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV4GroupsIdWikisSlugResponse(rsp)
}
func (c *ClientWithResponses) GetApiV4GroupsIdWikisSlugWithResponse(ctx context.Context, id int32, slug string, params *GetApiV4GroupsIdWikisSlugParams, reqEditors ...RequestEditorFn) (*GetApiV4GroupsIdWikisSlugResponse, error) {
	rsp, err := c.GetApiV4GroupsIdWikisSlug(ctx, id, slug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV4GroupsIdWikisSlugResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdWikisSlugWithBodyWithResponse(ctx context.Context, id int32, slug int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdWikisSlugResponse, error) {
	rsp, err := c.PutApiV4GroupsIdWikisSlugWithBody(ctx, id, slug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdWikisSlugResponse(rsp)
}
func (c *ClientWithResponses) PutApiV4GroupsIdWikisSlugWithResponse(ctx context.Context, id int32, slug int32, body PutApiV4GroupsIdWikisSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV4GroupsIdWikisSlugResponse, error) {
	rsp, err := c.PutApiV4GroupsIdWikisSlug(ctx, id, slug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV4GroupsIdWikisSlugResponse(rsp)
}
func ParseGetApiV4GroupIdPackagesComposerpackageNameResponse(rsp *http.Response) (*GetApiV4GroupIdPackagesComposerpackageNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupIdPackagesComposerpackageNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupIdPackagesComposerPShaResponse(rsp *http.Response) (*GetApiV4GroupIdPackagesComposerPShaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupIdPackagesComposerPShaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupIdPackagesComposerP2packageNameResponse(rsp *http.Response) (*GetApiV4GroupIdPackagesComposerP2packageNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupIdPackagesComposerP2packageNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupIdPackagesComposerPackagesResponse(rsp *http.Response) (*GetApiV4GroupIdPackagesComposerPackagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupIdPackagesComposerPackagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsResponse(rsp *http.Response) (*GetApiV4GroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Archived          *bool   `json:"archived,omitempty"`
			AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
			AvatarUrl         *string `json:"avatar_url,omitempty"`
			CreatedAt         *string `json:"created_at,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                   *string `json:"default_branch,omitempty"`
			DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
			DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
			Description                     *string `json:"description,omitempty"`

			// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
			DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
			DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
			EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
			FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
			FullName               *string `json:"full_name,omitempty"`
			FullPath               *string `json:"full_path,omitempty"`
			Id                     *string `json:"id,omitempty"`
			LdapAccess             *string `json:"ldap_access,omitempty"`
			LdapCn                 *string `json:"ldap_cn,omitempty"`
			LdapGroupLinks         *struct {
				Cn           *string `json:"cn,omitempty"`
				Filter       *string `json:"filter,omitempty"`
				GroupAccess  *int32  `json:"group_access,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Provider     *string `json:"provider,omitempty"`
			} `json:"ldap_group_links,omitempty"`
			LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
			LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
			LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
			MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
			MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
			MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
			MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
			Name                           *string `json:"name,omitempty"`
			OrganizationId                 *string `json:"organization_id,omitempty"`
			ParentId                       *string `json:"parent_id,omitempty"`
			Path                           *string `json:"path,omitempty"`
			ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
			RepositoryStorage              *string `json:"repository_storage,omitempty"`
			RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
			RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
			RootStorageStatistics          *struct {
				// BuildArtifactsSize CI artifacts size in bytes.
				BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

				// ContainerRegistrySize container registry size in bytes.
				ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

				// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
				ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

				// DependencyProxySize Dependency Proxy sizes in bytes.
				DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

				// LfsObjectsSize LFS objects size in bytes.
				LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

				// PackagesSize Packages size in bytes.
				PackagesSize *int32 `json:"packages_size,omitempty"`

				// PipelineArtifactsSize CI pipeline artifacts size in bytes.
				PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

				// RepositorySize Git repository size in bytes.
				RepositorySize *int32 `json:"repository_size,omitempty"`

				// SnippetsSize Snippets size in bytes.
				SnippetsSize *int32 `json:"snippets_size,omitempty"`

				// StorageSize Total storage in bytes.
				StorageSize *int32 `json:"storage_size,omitempty"`

				// UploadsSize Uploads size in bytes.
				UploadsSize *int32 `json:"uploads_size,omitempty"`

				// WikiSize Wiki size in bytes.
				WikiSize *int32 `json:"wiki_size,omitempty"`
			} `json:"root_storage_statistics,omitempty"`
			SamlGroupLinks *struct {
				AccessLevel  *int32  `json:"access_level,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"saml_group_links,omitempty"`
			ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
			SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
			Statistics           *struct {
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
			TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
			Visibility                   *string `json:"visibility,omitempty"`
			WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
			WebUrl                       *string `json:"web_url,omitempty"`
			WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsResponse(rsp *http.Response) (*PostApiV4GroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Archived          *bool   `json:"archived,omitempty"`
			AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
			AvatarUrl         *string `json:"avatar_url,omitempty"`
			CreatedAt         *string `json:"created_at,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                   *string `json:"default_branch,omitempty"`
			DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
			DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
			Description                     *string `json:"description,omitempty"`

			// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
			DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
			DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
			EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
			FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
			FullName               *string `json:"full_name,omitempty"`
			FullPath               *string `json:"full_path,omitempty"`
			Id                     *string `json:"id,omitempty"`
			LdapAccess             *string `json:"ldap_access,omitempty"`
			LdapCn                 *string `json:"ldap_cn,omitempty"`
			LdapGroupLinks         *struct {
				Cn           *string `json:"cn,omitempty"`
				Filter       *string `json:"filter,omitempty"`
				GroupAccess  *int32  `json:"group_access,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Provider     *string `json:"provider,omitempty"`
			} `json:"ldap_group_links,omitempty"`
			LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
			LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
			LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
			MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
			MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
			MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
			MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
			Name                           *string `json:"name,omitempty"`
			OrganizationId                 *string `json:"organization_id,omitempty"`
			ParentId                       *string `json:"parent_id,omitempty"`
			Path                           *string `json:"path,omitempty"`
			ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
			RepositoryStorage              *string `json:"repository_storage,omitempty"`
			RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
			RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
			RootStorageStatistics          *struct {
				// BuildArtifactsSize CI artifacts size in bytes.
				BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

				// ContainerRegistrySize container registry size in bytes.
				ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

				// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
				ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

				// DependencyProxySize Dependency Proxy sizes in bytes.
				DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

				// LfsObjectsSize LFS objects size in bytes.
				LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

				// PackagesSize Packages size in bytes.
				PackagesSize *int32 `json:"packages_size,omitempty"`

				// PipelineArtifactsSize CI pipeline artifacts size in bytes.
				PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

				// RepositorySize Git repository size in bytes.
				RepositorySize *int32 `json:"repository_size,omitempty"`

				// SnippetsSize Snippets size in bytes.
				SnippetsSize *int32 `json:"snippets_size,omitempty"`

				// StorageSize Total storage in bytes.
				StorageSize *int32 `json:"storage_size,omitempty"`

				// UploadsSize Uploads size in bytes.
				UploadsSize *int32 `json:"uploads_size,omitempty"`

				// WikiSize Wiki size in bytes.
				WikiSize *int32 `json:"wiki_size,omitempty"`
			} `json:"root_storage_statistics,omitempty"`
			SamlGroupLinks *struct {
				AccessLevel  *int32  `json:"access_level,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"saml_group_links,omitempty"`
			ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
			SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
			Statistics           *struct {
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
			TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
			Visibility                   *string `json:"visibility,omitempty"`
			WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
			WebUrl                       *string `json:"web_url,omitempty"`
			WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsImportResponse(rsp *http.Response) (*PostApiV4GroupsImportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParsePostApiV4GroupsImportAuthorizeResponse(rsp *http.Response) (*PostApiV4GroupsImportAuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsImportAuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdResponse(rsp *http.Response) (*DeleteApiV4GroupsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdResponse(rsp *http.Response) (*GetApiV4GroupsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AllowedEmailDomainsList                *string `json:"allowed_email_domains_list,omitempty"`
			Archived                               *bool   `json:"archived,omitempty"`
			AutoBanUserOnExcessiveProjectsDownload *string `json:"auto_ban_user_on_excessive_projects_download,omitempty"`
			AutoDevopsEnabled                      *string `json:"auto_devops_enabled,omitempty"`
			AvatarUrl                              *string `json:"avatar_url,omitempty"`
			CreatedAt                              *string `json:"created_at,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                   *string `json:"default_branch,omitempty"`
			DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
			DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
			Description                     *string `json:"description,omitempty"`

			// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
			DuoCoreFeaturesEnabled         *bool   `json:"duo_core_features_enabled,omitempty"`
			DuoFeaturesEnabled             *string `json:"duo_features_enabled,omitempty"`
			EmailsDisabled                 *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled                  *bool   `json:"emails_enabled,omitempty"`
			EnabledGitAccessProtocol       *string `json:"enabled_git_access_protocol,omitempty"`
			ExtraSharedRunnersMinutesLimit *string `json:"extra_shared_runners_minutes_limit,omitempty"`
			FileTemplateProjectId          *string `json:"file_template_project_id,omitempty"`
			FullName                       *string `json:"full_name,omitempty"`
			FullPath                       *string `json:"full_path,omitempty"`
			Id                             *string `json:"id,omitempty"`
			IpRestrictionRanges            *string `json:"ip_restriction_ranges,omitempty"`
			LdapAccess                     *string `json:"ldap_access,omitempty"`
			LdapCn                         *string `json:"ldap_cn,omitempty"`
			LdapGroupLinks                 *struct {
				Cn           *string `json:"cn,omitempty"`
				Filter       *string `json:"filter,omitempty"`
				GroupAccess  *int32  `json:"group_access,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Provider     *string `json:"provider,omitempty"`
			} `json:"ldap_group_links,omitempty"`
			LfsEnabled                           *string `json:"lfs_enabled,omitempty"`
			LockDuoFeaturesEnabled               *string `json:"lock_duo_features_enabled,omitempty"`
			LockMathRenderingLimitsEnabled       *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
			MarkedForDeletionOn                  *string `json:"marked_for_deletion_on,omitempty"`
			MathRenderingLimitsEnabled           *bool   `json:"math_rendering_limits_enabled,omitempty"`
			MaxArtifactsSize                     *int32  `json:"max_artifacts_size,omitempty"`
			MembershipLock                       *string `json:"membership_lock,omitempty"`
			MentionsDisabled                     *string `json:"mentions_disabled,omitempty"`
			Name                                 *string `json:"name,omitempty"`
			OrganizationId                       *string `json:"organization_id,omitempty"`
			ParentId                             *string `json:"parent_id,omitempty"`
			Path                                 *string `json:"path,omitempty"`
			PreventForkingOutsideGroup           *string `json:"prevent_forking_outside_group,omitempty"`
			PreventSharingGroupsOutsideHierarchy *string `json:"prevent_sharing_groups_outside_hierarchy,omitempty"`
			ProjectCreationLevel                 *string `json:"project_creation_level,omitempty"`

			// Projects API_Entities_Project model
			Projects *struct {
				Links *struct {
					ClusterAgents *string `json:"cluster_agents,omitempty"`
					Events        *string `json:"events,omitempty"`
					Issues        *string `json:"issues,omitempty"`
					Labels        *string `json:"labels,omitempty"`
					Members       *string `json:"members,omitempty"`
					MergeRequests *string `json:"merge_requests,omitempty"`
					RepoBranches  *string `json:"repo_branches,omitempty"`
					Self          *string `json:"self,omitempty"`
				} `json:"_links,omitempty"`
				AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
				AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
				AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
				ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
				Archived                                 *bool     `json:"archived,omitempty"`
				AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
				AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
				AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
				AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
				AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
				AvatarUrl                                *string   `json:"avatar_url,omitempty"`
				BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
				BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
				BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
				CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
				CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
				CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
				CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
				CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
				CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
				CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
				CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
				CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
				CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
				CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
				CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
				CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
				ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
				ContainerExpirationPolicy                *struct {
					Cadence       *string `json:"cadence,omitempty"`
					Enabled       *string `json:"enabled,omitempty"`
					KeepN         *string `json:"keep_n,omitempty"`
					NameRegex     *string `json:"name_regex,omitempty"`
					NameRegexKeep *string `json:"name_regex_keep,omitempty"`
					NextRunAt     *string `json:"next_run_at,omitempty"`
					OlderThan     *string `json:"older_than,omitempty"`
				} `json:"container_expiration_policy,omitempty"`
				ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
				ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
				ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
				CreatedAt                    *time.Time `json:"created_at,omitempty"`
				CreatorId                    *int32     `json:"creator_id,omitempty"`

				// CustomAttributes API_Entities_CustomAttribute model
				CustomAttributes *struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				DefaultBranch                            *string `json:"default_branch,omitempty"`
				Description                              *string `json:"description,omitempty"`
				DescriptionHtml                          *string `json:"description_html,omitempty"`
				EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
				EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
				EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
				EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
				EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
				ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
				FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

				// ForkedFromProject API_Entities_BasicProjectDetails model
				ForkedFromProject *struct {
					AvatarUrl *string    `json:"avatar_url,omitempty"`
					CreatedAt *time.Time `json:"created_at,omitempty"`

					// CustomAttributes API_Entities_CustomAttribute model
					CustomAttributes *struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"custom_attributes,omitempty"`
					DefaultBranch  *string    `json:"default_branch,omitempty"`
					Description    *string    `json:"description,omitempty"`
					ForksCount     *int32     `json:"forks_count,omitempty"`
					HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
					Id             *int32     `json:"id,omitempty"`
					LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
					License        *struct {
						HtmlUrl   *string `json:"html_url,omitempty"`
						Key       *string `json:"key,omitempty"`
						Name      *string `json:"name,omitempty"`
						Nickname  *string `json:"nickname,omitempty"`
						SourceUrl *string `json:"source_url,omitempty"`
					} `json:"license,omitempty"`
					LicenseUrl        *string `json:"license_url,omitempty"`
					Name              *string `json:"name,omitempty"`
					NameWithNamespace *string `json:"name_with_namespace,omitempty"`
					Namespace         *struct {
						AvatarUrl *string `json:"avatar_url,omitempty"`
						FullPath  *string `json:"full_path,omitempty"`
						Id        *int32  `json:"id,omitempty"`
						Kind      *string `json:"kind,omitempty"`
						Name      *string `json:"name,omitempty"`
						ParentId  *int32  `json:"parent_id,omitempty"`
						Path      *string `json:"path,omitempty"`
						WebUrl    *string `json:"web_url,omitempty"`
					} `json:"namespace,omitempty"`
					Path              *string   `json:"path,omitempty"`
					PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
					ReadmeUrl         *string   `json:"readme_url,omitempty"`
					RepositoryStorage *string   `json:"repository_storage,omitempty"`
					SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
					StarCount         *int32    `json:"star_count,omitempty"`
					TagList           *[]string `json:"tag_list,omitempty"`
					Topics            *[]string `json:"topics,omitempty"`
					WebUrl            *string   `json:"web_url,omitempty"`
				} `json:"forked_from_project,omitempty"`
				ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
				ForksCount                *int32     `json:"forks_count,omitempty"`
				GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
				HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
				Id                        *int32     `json:"id,omitempty"`
				ImportError               *string    `json:"import_error,omitempty"`
				ImportStatus              *string    `json:"import_status,omitempty"`
				ImportType                *string    `json:"import_type,omitempty"`
				ImportUrl                 *string    `json:"import_url,omitempty"`
				InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
				IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
				IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
				IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
				IssuesTemplate            *string    `json:"issues_template,omitempty"`
				JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
				KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
				LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
				LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
				License                   *struct {
					HtmlUrl   *string `json:"html_url,omitempty"`
					Key       *string `json:"key,omitempty"`
					Name      *string `json:"name,omitempty"`
					Nickname  *string `json:"nickname,omitempty"`
					SourceUrl *string `json:"source_url,omitempty"`
				} `json:"license,omitempty"`
				LicenseUrl                       *string `json:"license_url,omitempty"`
				MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
				MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
				MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
				MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
				MergeMethod                      *string `json:"merge_method,omitempty"`
				MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
				MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
				MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
				MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
				MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
				MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
				MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
				Mirror                           *string `json:"mirror,omitempty"`
				MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
				MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
				MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
				ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
				ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
				MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
				MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
				Name                             *string `json:"name,omitempty"`
				NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
				Namespace                        *struct {
					AvatarUrl *string `json:"avatar_url,omitempty"`
					FullPath  *string `json:"full_path,omitempty"`
					Id        *int32  `json:"id,omitempty"`
					Kind      *string `json:"kind,omitempty"`
					Name      *string `json:"name,omitempty"`
					ParentId  *int32  `json:"parent_id,omitempty"`
					Path      *string `json:"path,omitempty"`
					WebUrl    *string `json:"web_url,omitempty"`
				} `json:"namespace,omitempty"`
				OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
				OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
				OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
				OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
				OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

				// Owner API_Entities_UserBasic model
				Owner *struct {
					AvatarPath       *string `json:"avatar_path,omitempty"`
					AvatarUrl        *string `json:"avatar_url,omitempty"`
					CustomAttributes *[]struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"custom_attributes,omitempty"`
					Id          *int32  `json:"id,omitempty"`
					Locked      *bool   `json:"locked,omitempty"`
					Name        *string `json:"name,omitempty"`
					PublicEmail *string `json:"public_email,omitempty"`
					State       *string `json:"state,omitempty"`
					Username    *string `json:"username,omitempty"`
					WebUrl      *string `json:"web_url,omitempty"`
				} `json:"owner,omitempty"`
				PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
				PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
				Path                             *string   `json:"path,omitempty"`
				PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
				PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
				PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
				PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
				PublicJobs                       *bool     `json:"public_jobs,omitempty"`
				ReadmeUrl                        *string   `json:"readme_url,omitempty"`
				ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
				RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
				RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
				RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
				RepositoryStorage                *string   `json:"repository_storage,omitempty"`
				RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
				RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
				RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
				ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
				RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
				RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
				RunnersToken                     *string   `json:"runners_token,omitempty"`
				SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
				SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
				SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
				ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
				ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
				SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
				SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
				SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
				SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
				SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
				SquashOption                     *string   `json:"squash_option,omitempty"`
				SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
				StarCount                        *int32    `json:"star_count,omitempty"`
				Statistics                       *struct {
					CommitCount           *string `json:"commit_count,omitempty"`
					ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
					JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
					LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
					PackagesSize          *string `json:"packages_size,omitempty"`
					PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
					RepositorySize        *string `json:"repository_size,omitempty"`
					SnippetsSize          *string `json:"snippets_size,omitempty"`
					StorageSize           *string `json:"storage_size,omitempty"`
					UploadsSize           *string `json:"uploads_size,omitempty"`
					WikiSize              *string `json:"wiki_size,omitempty"`
				} `json:"statistics,omitempty"`
				SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
				TagList                                *[]string  `json:"tag_list,omitempty"`
				Topics                                 *[]string  `json:"topics,omitempty"`
				UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
				Visibility                             *string    `json:"visibility,omitempty"`
				WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
				WebUrl                                 *string    `json:"web_url,omitempty"`
				WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
				WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
			} `json:"projects,omitempty"`
			RepositoryStorage              *string `json:"repository_storage,omitempty"`
			RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
			RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
			RootStorageStatistics          *struct {
				// BuildArtifactsSize CI artifacts size in bytes.
				BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

				// ContainerRegistrySize container registry size in bytes.
				ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

				// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
				ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

				// DependencyProxySize Dependency Proxy sizes in bytes.
				DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

				// LfsObjectsSize LFS objects size in bytes.
				LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

				// PackagesSize Packages size in bytes.
				PackagesSize *int32 `json:"packages_size,omitempty"`

				// PipelineArtifactsSize CI pipeline artifacts size in bytes.
				PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

				// RepositorySize Git repository size in bytes.
				RepositorySize *int32 `json:"repository_size,omitempty"`

				// SnippetsSize Snippets size in bytes.
				SnippetsSize *int32 `json:"snippets_size,omitempty"`

				// StorageSize Total storage in bytes.
				StorageSize *int32 `json:"storage_size,omitempty"`

				// UploadsSize Uploads size in bytes.
				UploadsSize *int32 `json:"uploads_size,omitempty"`

				// WikiSize Wiki size in bytes.
				WikiSize *int32 `json:"wiki_size,omitempty"`
			} `json:"root_storage_statistics,omitempty"`
			RunnersToken   *string `json:"runners_token,omitempty"`
			SamlGroupLinks *struct {
				AccessLevel  *int32  `json:"access_level,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"saml_group_links,omitempty"`
			ServiceAccessTokensExpirationEnforced *string `json:"service_access_tokens_expiration_enforced,omitempty"`
			ShareWithGroupLock                    *string `json:"share_with_group_lock,omitempty"`

			// SharedProjects API_Entities_Project model
			SharedProjects *struct {
				Links *struct {
					ClusterAgents *string `json:"cluster_agents,omitempty"`
					Events        *string `json:"events,omitempty"`
					Issues        *string `json:"issues,omitempty"`
					Labels        *string `json:"labels,omitempty"`
					Members       *string `json:"members,omitempty"`
					MergeRequests *string `json:"merge_requests,omitempty"`
					RepoBranches  *string `json:"repo_branches,omitempty"`
					Self          *string `json:"self,omitempty"`
				} `json:"_links,omitempty"`
				AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
				AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
				AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
				ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
				Archived                                 *bool     `json:"archived,omitempty"`
				AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
				AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
				AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
				AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
				AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
				AvatarUrl                                *string   `json:"avatar_url,omitempty"`
				BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
				BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
				BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
				CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
				CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
				CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
				CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
				CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
				CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
				CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
				CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
				CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
				CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
				CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
				CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
				CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
				ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
				ContainerExpirationPolicy                *struct {
					Cadence       *string `json:"cadence,omitempty"`
					Enabled       *string `json:"enabled,omitempty"`
					KeepN         *string `json:"keep_n,omitempty"`
					NameRegex     *string `json:"name_regex,omitempty"`
					NameRegexKeep *string `json:"name_regex_keep,omitempty"`
					NextRunAt     *string `json:"next_run_at,omitempty"`
					OlderThan     *string `json:"older_than,omitempty"`
				} `json:"container_expiration_policy,omitempty"`
				ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
				ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
				ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
				CreatedAt                    *time.Time `json:"created_at,omitempty"`
				CreatorId                    *int32     `json:"creator_id,omitempty"`

				// CustomAttributes API_Entities_CustomAttribute model
				CustomAttributes *struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				DefaultBranch                            *string `json:"default_branch,omitempty"`
				Description                              *string `json:"description,omitempty"`
				DescriptionHtml                          *string `json:"description_html,omitempty"`
				EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
				EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
				EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
				EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
				EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
				ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
				FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

				// ForkedFromProject API_Entities_BasicProjectDetails model
				ForkedFromProject *struct {
					AvatarUrl *string    `json:"avatar_url,omitempty"`
					CreatedAt *time.Time `json:"created_at,omitempty"`

					// CustomAttributes API_Entities_CustomAttribute model
					CustomAttributes *struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"custom_attributes,omitempty"`
					DefaultBranch  *string    `json:"default_branch,omitempty"`
					Description    *string    `json:"description,omitempty"`
					ForksCount     *int32     `json:"forks_count,omitempty"`
					HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
					Id             *int32     `json:"id,omitempty"`
					LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
					License        *struct {
						HtmlUrl   *string `json:"html_url,omitempty"`
						Key       *string `json:"key,omitempty"`
						Name      *string `json:"name,omitempty"`
						Nickname  *string `json:"nickname,omitempty"`
						SourceUrl *string `json:"source_url,omitempty"`
					} `json:"license,omitempty"`
					LicenseUrl        *string `json:"license_url,omitempty"`
					Name              *string `json:"name,omitempty"`
					NameWithNamespace *string `json:"name_with_namespace,omitempty"`
					Namespace         *struct {
						AvatarUrl *string `json:"avatar_url,omitempty"`
						FullPath  *string `json:"full_path,omitempty"`
						Id        *int32  `json:"id,omitempty"`
						Kind      *string `json:"kind,omitempty"`
						Name      *string `json:"name,omitempty"`
						ParentId  *int32  `json:"parent_id,omitempty"`
						Path      *string `json:"path,omitempty"`
						WebUrl    *string `json:"web_url,omitempty"`
					} `json:"namespace,omitempty"`
					Path              *string   `json:"path,omitempty"`
					PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
					ReadmeUrl         *string   `json:"readme_url,omitempty"`
					RepositoryStorage *string   `json:"repository_storage,omitempty"`
					SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
					StarCount         *int32    `json:"star_count,omitempty"`
					TagList           *[]string `json:"tag_list,omitempty"`
					Topics            *[]string `json:"topics,omitempty"`
					WebUrl            *string   `json:"web_url,omitempty"`
				} `json:"forked_from_project,omitempty"`
				ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
				ForksCount                *int32     `json:"forks_count,omitempty"`
				GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
				HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
				Id                        *int32     `json:"id,omitempty"`
				ImportError               *string    `json:"import_error,omitempty"`
				ImportStatus              *string    `json:"import_status,omitempty"`
				ImportType                *string    `json:"import_type,omitempty"`
				ImportUrl                 *string    `json:"import_url,omitempty"`
				InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
				IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
				IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
				IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
				IssuesTemplate            *string    `json:"issues_template,omitempty"`
				JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
				KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
				LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
				LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
				License                   *struct {
					HtmlUrl   *string `json:"html_url,omitempty"`
					Key       *string `json:"key,omitempty"`
					Name      *string `json:"name,omitempty"`
					Nickname  *string `json:"nickname,omitempty"`
					SourceUrl *string `json:"source_url,omitempty"`
				} `json:"license,omitempty"`
				LicenseUrl                       *string `json:"license_url,omitempty"`
				MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
				MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
				MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
				MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
				MergeMethod                      *string `json:"merge_method,omitempty"`
				MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
				MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
				MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
				MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
				MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
				MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
				MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
				Mirror                           *string `json:"mirror,omitempty"`
				MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
				MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
				MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
				ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
				ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
				MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
				MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
				Name                             *string `json:"name,omitempty"`
				NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
				Namespace                        *struct {
					AvatarUrl *string `json:"avatar_url,omitempty"`
					FullPath  *string `json:"full_path,omitempty"`
					Id        *int32  `json:"id,omitempty"`
					Kind      *string `json:"kind,omitempty"`
					Name      *string `json:"name,omitempty"`
					ParentId  *int32  `json:"parent_id,omitempty"`
					Path      *string `json:"path,omitempty"`
					WebUrl    *string `json:"web_url,omitempty"`
				} `json:"namespace,omitempty"`
				OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
				OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
				OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
				OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
				OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

				// Owner API_Entities_UserBasic model
				Owner *struct {
					AvatarPath       *string `json:"avatar_path,omitempty"`
					AvatarUrl        *string `json:"avatar_url,omitempty"`
					CustomAttributes *[]struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"custom_attributes,omitempty"`
					Id          *int32  `json:"id,omitempty"`
					Locked      *bool   `json:"locked,omitempty"`
					Name        *string `json:"name,omitempty"`
					PublicEmail *string `json:"public_email,omitempty"`
					State       *string `json:"state,omitempty"`
					Username    *string `json:"username,omitempty"`
					WebUrl      *string `json:"web_url,omitempty"`
				} `json:"owner,omitempty"`
				PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
				PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
				Path                             *string   `json:"path,omitempty"`
				PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
				PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
				PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
				PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
				PublicJobs                       *bool     `json:"public_jobs,omitempty"`
				ReadmeUrl                        *string   `json:"readme_url,omitempty"`
				ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
				RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
				RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
				RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
				RepositoryStorage                *string   `json:"repository_storage,omitempty"`
				RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
				RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
				RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
				ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
				RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
				RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
				RunnersToken                     *string   `json:"runners_token,omitempty"`
				SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
				SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
				SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
				ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
				ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
				SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
				SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
				SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
				SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
				SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
				SquashOption                     *string   `json:"squash_option,omitempty"`
				SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
				StarCount                        *int32    `json:"star_count,omitempty"`
				Statistics                       *struct {
					CommitCount           *string `json:"commit_count,omitempty"`
					ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
					JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
					LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
					PackagesSize          *string `json:"packages_size,omitempty"`
					PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
					RepositorySize        *string `json:"repository_size,omitempty"`
					SnippetsSize          *string `json:"snippets_size,omitempty"`
					StorageSize           *string `json:"storage_size,omitempty"`
					UploadsSize           *string `json:"uploads_size,omitempty"`
					WikiSize              *string `json:"wiki_size,omitempty"`
				} `json:"statistics,omitempty"`
				SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
				TagList                                *[]string  `json:"tag_list,omitempty"`
				Topics                                 *[]string  `json:"topics,omitempty"`
				UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
				Visibility                             *string    `json:"visibility,omitempty"`
				WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
				WebUrl                                 *string    `json:"web_url,omitempty"`
				WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
				WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
			} `json:"shared_projects,omitempty"`
			SharedRunnersMinutesLimit *string `json:"shared_runners_minutes_limit,omitempty"`
			SharedRunnersSetting      *string `json:"shared_runners_setting,omitempty"`
			SharedWithGroups          *string `json:"shared_with_groups,omitempty"`
			Statistics                *struct {
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SubgroupCreationLevel                       *string `json:"subgroup_creation_level,omitempty"`
			TwoFactorGracePeriod                        *string `json:"two_factor_grace_period,omitempty"`
			UniqueProjectDownloadLimit                  *string `json:"unique_project_download_limit,omitempty"`
			UniqueProjectDownloadLimitAlertlist         *string `json:"unique_project_download_limit_alertlist,omitempty"`
			UniqueProjectDownloadLimitAllowlist         *string `json:"unique_project_download_limit_allowlist,omitempty"`
			UniqueProjectDownloadLimitIntervalInSeconds *string `json:"unique_project_download_limit_interval_in_seconds,omitempty"`
			Visibility                                  *string `json:"visibility,omitempty"`
			WebBasedCommitSigningEnabled                *string `json:"web_based_commit_signing_enabled,omitempty"`
			WebUrl                                      *string `json:"web_url,omitempty"`
			WikiAccessLevel                             *string `json:"wiki_access_level,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdResponse(rsp *http.Response) (*PutApiV4GroupsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Archived          *bool   `json:"archived,omitempty"`
			AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
			AvatarUrl         *string `json:"avatar_url,omitempty"`
			CreatedAt         *string `json:"created_at,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                   *string `json:"default_branch,omitempty"`
			DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
			DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
			Description                     *string `json:"description,omitempty"`

			// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
			DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
			DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
			EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
			FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
			FullName               *string `json:"full_name,omitempty"`
			FullPath               *string `json:"full_path,omitempty"`
			Id                     *string `json:"id,omitempty"`
			LdapAccess             *string `json:"ldap_access,omitempty"`
			LdapCn                 *string `json:"ldap_cn,omitempty"`
			LdapGroupLinks         *struct {
				Cn           *string `json:"cn,omitempty"`
				Filter       *string `json:"filter,omitempty"`
				GroupAccess  *int32  `json:"group_access,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Provider     *string `json:"provider,omitempty"`
			} `json:"ldap_group_links,omitempty"`
			LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
			LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
			LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
			MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
			MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
			MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
			MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
			Name                           *string `json:"name,omitempty"`
			OrganizationId                 *string `json:"organization_id,omitempty"`
			ParentId                       *string `json:"parent_id,omitempty"`
			Path                           *string `json:"path,omitempty"`
			ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
			RepositoryStorage              *string `json:"repository_storage,omitempty"`
			RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
			RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
			RootStorageStatistics          *struct {
				// BuildArtifactsSize CI artifacts size in bytes.
				BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

				// ContainerRegistrySize container registry size in bytes.
				ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

				// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
				ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

				// DependencyProxySize Dependency Proxy sizes in bytes.
				DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

				// LfsObjectsSize LFS objects size in bytes.
				LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

				// PackagesSize Packages size in bytes.
				PackagesSize *int32 `json:"packages_size,omitempty"`

				// PipelineArtifactsSize CI pipeline artifacts size in bytes.
				PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

				// RepositorySize Git repository size in bytes.
				RepositorySize *int32 `json:"repository_size,omitempty"`

				// SnippetsSize Snippets size in bytes.
				SnippetsSize *int32 `json:"snippets_size,omitempty"`

				// StorageSize Total storage in bytes.
				StorageSize *int32 `json:"storage_size,omitempty"`

				// UploadsSize Uploads size in bytes.
				UploadsSize *int32 `json:"uploads_size,omitempty"`

				// WikiSize Wiki size in bytes.
				WikiSize *int32 `json:"wiki_size,omitempty"`
			} `json:"root_storage_statistics,omitempty"`
			SamlGroupLinks *struct {
				AccessLevel  *int32  `json:"access_level,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"saml_group_links,omitempty"`
			ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
			SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
			Statistics           *struct {
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
			TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
			Visibility                   *string `json:"visibility,omitempty"`
			WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
			WebUrl                       *string `json:"web_url,omitempty"`
			WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdDebianDistributionsResponse(rsp *http.Response) (*GetApiV4GroupsIdDebianDistributionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdDebianDistributionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Architectures            *[]string `json:"architectures,omitempty"`
			Codename                 *string   `json:"codename,omitempty"`
			Components               *[]string `json:"components,omitempty"`
			Description              *string   `json:"description,omitempty"`
			Id                       *int32    `json:"id,omitempty"`
			Label                    *string   `json:"label,omitempty"`
			Origin                   *string   `json:"origin,omitempty"`
			Suite                    *string   `json:"suite,omitempty"`
			ValidTimeDurationSeconds *int32    `json:"valid_time_duration_seconds,omitempty"`
			Version                  *string   `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdDebianDistributionsResponse(rsp *http.Response) (*PostApiV4GroupsIdDebianDistributionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdDebianDistributionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Architectures            *[]string `json:"architectures,omitempty"`
			Codename                 *string   `json:"codename,omitempty"`
			Components               *[]string `json:"components,omitempty"`
			Description              *string   `json:"description,omitempty"`
			Id                       *int32    `json:"id,omitempty"`
			Label                    *string   `json:"label,omitempty"`
			Origin                   *string   `json:"origin,omitempty"`
			Suite                    *string   `json:"suite,omitempty"`
			ValidTimeDurationSeconds *int32    `json:"valid_time_duration_seconds,omitempty"`
			Version                  *string   `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdDebianDistributionsCodenameResponse(rsp *http.Response) (*DeleteApiV4GroupsIdDebianDistributionsCodenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdDebianDistributionsCodenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdDebianDistributionsCodenameResponse(rsp *http.Response) (*GetApiV4GroupsIdDebianDistributionsCodenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdDebianDistributionsCodenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Architectures            *[]string `json:"architectures,omitempty"`
			Codename                 *string   `json:"codename,omitempty"`
			Components               *[]string `json:"components,omitempty"`
			Description              *string   `json:"description,omitempty"`
			Id                       *int32    `json:"id,omitempty"`
			Label                    *string   `json:"label,omitempty"`
			Origin                   *string   `json:"origin,omitempty"`
			Suite                    *string   `json:"suite,omitempty"`
			ValidTimeDurationSeconds *int32    `json:"valid_time_duration_seconds,omitempty"`
			Version                  *string   `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdDebianDistributionsCodenameResponse(rsp *http.Response) (*PutApiV4GroupsIdDebianDistributionsCodenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdDebianDistributionsCodenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Architectures            *[]string `json:"architectures,omitempty"`
			Codename                 *string   `json:"codename,omitempty"`
			Components               *[]string `json:"components,omitempty"`
			Description              *string   `json:"description,omitempty"`
			Id                       *int32    `json:"id,omitempty"`
			Label                    *string   `json:"label,omitempty"`
			Origin                   *string   `json:"origin,omitempty"`
			Suite                    *string   `json:"suite,omitempty"`
			ValidTimeDurationSeconds *int32    `json:"valid_time_duration_seconds,omitempty"`
			Version                  *string   `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdDebianDistributionsCodenameKeyAscResponse(rsp *http.Response) (*GetApiV4GroupsIdDebianDistributionsCodenameKeyAscResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdDebianDistributionsCodenameKeyAscResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Architectures            *[]string `json:"architectures,omitempty"`
			Codename                 *string   `json:"codename,omitempty"`
			Components               *[]string `json:"components,omitempty"`
			Description              *string   `json:"description,omitempty"`
			Id                       *int32    `json:"id,omitempty"`
			Label                    *string   `json:"label,omitempty"`
			Origin                   *string   `json:"origin,omitempty"`
			Suite                    *string   `json:"suite,omitempty"`
			ValidTimeDurationSeconds *int32    `json:"valid_time_duration_seconds,omitempty"`
			Version                  *string   `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesDebianDistsdistributionInreleaseResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesDebianDistsdistributionInreleaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesDebianDistsdistributionInreleaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesDebianDistsdistributionReleaseResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpgResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesDebianDistsdistributionReleaseGpgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackagesResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitecturePackagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256Response(rsp *http.Response) (*GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesDebianDistsdistributionComponentBinaryArchitectureByHashSha256FileSha256Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackagesResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitecturePackagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256Response(rsp *http.Response) (*GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesDebianDistsdistributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSourcesResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256Response(rsp *http.Response) (*GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesDebianDistsdistributionComponentSourceByHashSha256FileSha256Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesDebianPoolDistributionProjectIdLetterPackageNamePackageVersionFileNameResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesDebianPoolDistributionProjectIdLetterPackageNamePackageVersionFileNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesDebianPoolDistributionProjectIdLetterPackageNamePackageVersionFileNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesMavenpathFileNameResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesMavenpathFileNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesMavenpathFileNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesNpmpackageNameResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesNpmpackageNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesNpmpackageNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DistTags *map[string]interface{} `json:"dist-tags,omitempty"`
			Name     *string                 `json:"name,omitempty"`
			Versions *map[string]interface{} `json:"versions,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdPackagesNpmNpmV1SecurityAdvisoriesBulkResponse(rsp *http.Response) (*PostApiV4GroupsIdPackagesNpmNpmV1SecurityAdvisoriesBulkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdPackagesNpmNpmV1SecurityAdvisoriesBulkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParsePostApiV4GroupsIdPackagesNpmNpmV1SecurityAuditsQuickResponse(rsp *http.Response) (*PostApiV4GroupsIdPackagesNpmNpmV1SecurityAuditsQuickResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdPackagesNpmNpmV1SecurityAuditsQuickResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DistTags *map[string]interface{} `json:"dist_tags,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse(rsp *http.Response) (*DeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParsePutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse(rsp *http.Response) (*PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdPackagesNpmPackagepackageNameDistTagsTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesNugetIndexResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesNugetIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesNugetIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Resources *[]map[string]interface{} `json:"resources,omitempty"`
			Version   *string                   `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesNugetQueryResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesNugetQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesNugetQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *[]struct {
				Type           *string `json:"@type,omitempty"`
				Authors        *string `json:"authors,omitempty"`
				Description    *string `json:"description,omitempty"`
				IconUrl        *string `json:"iconUrl,omitempty"`
				Id             *string `json:"id,omitempty"`
				LicenseUrl     *string `json:"licenseUrl,omitempty"`
				ProjectUrl     *string `json:"projectUrl,omitempty"`
				Summary        *string `json:"summary,omitempty"`
				Tags           *string `json:"tags,omitempty"`
				Title          *string `json:"title,omitempty"`
				TotalDownloads *int32  `json:"totalDownloads,omitempty"`
				Verified       *bool   `json:"verified,omitempty"`
				Version        *string `json:"version,omitempty"`
				Versions       *struct {
					Id        *string `json:"@id,omitempty"`
					Downloads *int32  `json:"downloads,omitempty"`
					Version   *string `json:"version,omitempty"`
				} `json:"versions,omitempty"`
			} `json:"data,omitempty"`
			TotalHits *int32 `json:"totalHits,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileNameResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesNugetSymbolfilesfileNamesignaturesameFileNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesNugetV2Response(rsp *http.Response) (*GetApiV4GroupsIdPackagesNugetV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesNugetV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesNugetV2MetadataResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesNugetV2MetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesNugetV2MetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifierResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesPypiFilesSha256fileIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesPypiSimpleResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesPypiSimpleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesPypiSimpleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesPypiSimplepackageNameResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesPypiSimplepackageNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesPypiSimplepackageNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdAccessRequestsResponse(rsp *http.Response) (*GetApiV4GroupsIdAccessRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdAccessRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			RequestedAt *string `json:"requested_at,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdAccessRequestsResponse(rsp *http.Response) (*PostApiV4GroupsIdAccessRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdAccessRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			RequestedAt *string `json:"requested_at,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (successfull_response) unsupported

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdAccessRequestsUserIdResponse(rsp *http.Response) (*DeleteApiV4GroupsIdAccessRequestsUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdAccessRequestsUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParsePutApiV4GroupsIdAccessRequestsUserIdApproveResponse(rsp *http.Response) (*PutApiV4GroupsIdAccessRequestsUserIdApproveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdAccessRequestsUserIdApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AvatarPath       *string `json:"avatar_path,omitempty"`
			AvatarUrl        *string `json:"avatar_url,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			Name        *string `json:"name,omitempty"`
			PublicEmail *string `json:"public_email,omitempty"`
			RequestedAt *string `json:"requested_at,omitempty"`
			State       *string `json:"state,omitempty"`
			Username    *string `json:"username,omitempty"`
			WebUrl      *string `json:"web_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (successfull_response) unsupported

	}

	return response, nil
}
func ParsePostApiV4GroupsIdAccessTokensSelfRotateResponse(rsp *http.Response) (*PostApiV4GroupsIdAccessTokensSelfRotateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdAccessTokensSelfRotateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessLevel  *PostApiV4GroupsIdAccessTokensSelfRotate200AccessLevel  `json:"access_level,omitempty"`
			Active       *bool                                                   `json:"active,omitempty"`
			CreatedAt    *time.Time                                              `json:"created_at,omitempty"`
			Description  *string                                                 `json:"description,omitempty"`
			ExpiresAt    *time.Time                                              `json:"expires_at,omitempty"`
			Id           *int32                                                  `json:"id,omitempty"`
			LastUsedAt   *time.Time                                              `json:"last_used_at,omitempty"`
			Name         *string                                                 `json:"name,omitempty"`
			ResourceId   *int32                                                  `json:"resource_id,omitempty"`
			ResourceType *PostApiV4GroupsIdAccessTokensSelfRotate200ResourceType `json:"resource_type,omitempty"`
			Revoked      *bool                                                   `json:"revoked,omitempty"`
			Scopes       *[]interface{}                                          `json:"scopes,omitempty"`
			Token        *string                                                 `json:"token,omitempty"`
			UserId       *int32                                                  `json:"user_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdArchiveResponse(rsp *http.Response) (*PostApiV4GroupsIdArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Archived          *bool   `json:"archived,omitempty"`
			AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
			AvatarUrl         *string `json:"avatar_url,omitempty"`
			CreatedAt         *string `json:"created_at,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                   *string `json:"default_branch,omitempty"`
			DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
			DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
			Description                     *string `json:"description,omitempty"`

			// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
			DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
			DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
			EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
			FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
			FullName               *string `json:"full_name,omitempty"`
			FullPath               *string `json:"full_path,omitempty"`
			Id                     *string `json:"id,omitempty"`
			LdapAccess             *string `json:"ldap_access,omitempty"`
			LdapCn                 *string `json:"ldap_cn,omitempty"`
			LdapGroupLinks         *struct {
				Cn           *string `json:"cn,omitempty"`
				Filter       *string `json:"filter,omitempty"`
				GroupAccess  *int32  `json:"group_access,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Provider     *string `json:"provider,omitempty"`
			} `json:"ldap_group_links,omitempty"`
			LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
			LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
			LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
			MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
			MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
			MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
			MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
			Name                           *string `json:"name,omitempty"`
			OrganizationId                 *string `json:"organization_id,omitempty"`
			ParentId                       *string `json:"parent_id,omitempty"`
			Path                           *string `json:"path,omitempty"`
			ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
			RepositoryStorage              *string `json:"repository_storage,omitempty"`
			RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
			RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
			RootStorageStatistics          *struct {
				// BuildArtifactsSize CI artifacts size in bytes.
				BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

				// ContainerRegistrySize container registry size in bytes.
				ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

				// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
				ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

				// DependencyProxySize Dependency Proxy sizes in bytes.
				DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

				// LfsObjectsSize LFS objects size in bytes.
				LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

				// PackagesSize Packages size in bytes.
				PackagesSize *int32 `json:"packages_size,omitempty"`

				// PipelineArtifactsSize CI pipeline artifacts size in bytes.
				PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

				// RepositorySize Git repository size in bytes.
				RepositorySize *int32 `json:"repository_size,omitempty"`

				// SnippetsSize Snippets size in bytes.
				SnippetsSize *int32 `json:"snippets_size,omitempty"`

				// StorageSize Total storage in bytes.
				StorageSize *int32 `json:"storage_size,omitempty"`

				// UploadsSize Uploads size in bytes.
				UploadsSize *int32 `json:"uploads_size,omitempty"`

				// WikiSize Wiki size in bytes.
				WikiSize *int32 `json:"wiki_size,omitempty"`
			} `json:"root_storage_statistics,omitempty"`
			SamlGroupLinks *struct {
				AccessLevel  *int32  `json:"access_level,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"saml_group_links,omitempty"`
			ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
			SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
			Statistics           *struct {
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
			TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
			Visibility                   *string `json:"visibility,omitempty"`
			WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
			WebUrl                       *string `json:"web_url,omitempty"`
			WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdAuditEventsResponse(rsp *http.Response) (*GetApiV4GroupsIdAuditEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdAuditEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AuthorId   *string `json:"author_id,omitempty"`
			CreatedAt  *string `json:"created_at,omitempty"`
			Details    *string `json:"details,omitempty"`
			EntityId   *string `json:"entity_id,omitempty"`
			EntityType *string `json:"entity_type,omitempty"`
			EventName  *string `json:"event_name,omitempty"`
			Id         *string `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdAuditEventsAuditEventIdResponse(rsp *http.Response) (*GetApiV4GroupsIdAuditEventsAuditEventIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdAuditEventsAuditEventIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AuthorId   *string `json:"author_id,omitempty"`
			CreatedAt  *string `json:"created_at,omitempty"`
			Details    *string `json:"details,omitempty"`
			EntityId   *string `json:"entity_id,omitempty"`
			EntityType *string `json:"entity_type,omitempty"`
			EventName  *string `json:"event_name,omitempty"`
			Id         *string `json:"id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdAvatarResponse(rsp *http.Response) (*GetApiV4GroupsIdAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdBadgesResponse(rsp *http.Response) (*GetApiV4GroupsIdBadgesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdBadgesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id               *string `json:"id,omitempty"`
			ImageUrl         *string `json:"image_url,omitempty"`
			Kind             *string `json:"kind,omitempty"`
			LinkUrl          *string `json:"link_url,omitempty"`
			Name             *string `json:"name,omitempty"`
			RenderedImageUrl *string `json:"rendered_image_url,omitempty"`
			RenderedLinkUrl  *string `json:"rendered_link_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdBadgesResponse(rsp *http.Response) (*PostApiV4GroupsIdBadgesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdBadgesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id               *string `json:"id,omitempty"`
			ImageUrl         *string `json:"image_url,omitempty"`
			Kind             *string `json:"kind,omitempty"`
			LinkUrl          *string `json:"link_url,omitempty"`
			Name             *string `json:"name,omitempty"`
			RenderedImageUrl *string `json:"rendered_image_url,omitempty"`
			RenderedLinkUrl  *string `json:"rendered_link_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdBadgesRenderResponse(rsp *http.Response) (*GetApiV4GroupsIdBadgesRenderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdBadgesRenderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ImageUrl         *string `json:"image_url,omitempty"`
			LinkUrl          *string `json:"link_url,omitempty"`
			Name             *string `json:"name,omitempty"`
			RenderedImageUrl *string `json:"rendered_image_url,omitempty"`
			RenderedLinkUrl  *string `json:"rendered_link_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdBadgesBadgeIdResponse(rsp *http.Response) (*DeleteApiV4GroupsIdBadgesBadgeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdBadgesBadgeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdBadgesBadgeIdResponse(rsp *http.Response) (*GetApiV4GroupsIdBadgesBadgeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdBadgesBadgeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id               *string `json:"id,omitempty"`
			ImageUrl         *string `json:"image_url,omitempty"`
			Kind             *string `json:"kind,omitempty"`
			LinkUrl          *string `json:"link_url,omitempty"`
			Name             *string `json:"name,omitempty"`
			RenderedImageUrl *string `json:"rendered_image_url,omitempty"`
			RenderedLinkUrl  *string `json:"rendered_link_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdBadgesBadgeIdResponse(rsp *http.Response) (*PutApiV4GroupsIdBadgesBadgeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdBadgesBadgeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id               *string `json:"id,omitempty"`
			ImageUrl         *string `json:"image_url,omitempty"`
			Kind             *string `json:"kind,omitempty"`
			LinkUrl          *string `json:"link_url,omitempty"`
			Name             *string `json:"name,omitempty"`
			RenderedImageUrl *string `json:"rendered_image_url,omitempty"`
			RenderedLinkUrl  *string `json:"rendered_link_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdBillableMembersResponse(rsp *http.Response) (*GetApiV4GroupsIdBillableMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdBillableMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AccessLevel *string `json:"access_level,omitempty"`
			AvatarPath  *string `json:"avatar_path,omitempty"`
			AvatarUrl   *string `json:"avatar_url,omitempty"`
			CreatedAt   *string `json:"created_at,omitempty"`

			// CreatedBy API_Entities_UserBasic model
			CreatedBy *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"created_by,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Email             *string `json:"email,omitempty"`
			ExpiresAt         *string `json:"expires_at,omitempty"`
			GroupSamlIdentity *struct {
				ExternUid      *string `json:"extern_uid,omitempty"`
				Provider       *string `json:"provider,omitempty"`
				SamlProviderId *string `json:"saml_provider_id,omitempty"`
			} `json:"group_saml_identity,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			IsUsingSeat *string `json:"is_using_seat,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			MemberRole  *struct {
				AdminCicdVariables         *bool                                                        `json:"admin_cicd_variables,omitempty"`
				AdminComplianceFramework   *bool                                                        `json:"admin_compliance_framework,omitempty"`
				AdminGroupMember           *bool                                                        `json:"admin_group_member,omitempty"`
				AdminIntegrations          *bool                                                        `json:"admin_integrations,omitempty"`
				AdminMergeRequest          *bool                                                        `json:"admin_merge_request,omitempty"`
				AdminProtectedBranch       *bool                                                        `json:"admin_protected_branch,omitempty"`
				AdminProtectedEnvironments *bool                                                        `json:"admin_protected_environments,omitempty"`
				AdminPushRules             *bool                                                        `json:"admin_push_rules,omitempty"`
				AdminRunners               *bool                                                        `json:"admin_runners,omitempty"`
				AdminSecurityTesting       *bool                                                        `json:"admin_security_testing,omitempty"`
				AdminTerraformState        *bool                                                        `json:"admin_terraform_state,omitempty"`
				AdminVulnerability         *bool                                                        `json:"admin_vulnerability,omitempty"`
				AdminWebHook               *bool                                                        `json:"admin_web_hook,omitempty"`
				ArchiveProject             *bool                                                        `json:"archive_project,omitempty"`
				BaseAccessLevel            *GetApiV4GroupsIdBillableMembers200MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
				Description                *string                                                      `json:"description,omitempty"`
				GroupId                    *int32                                                       `json:"group_id,omitempty"`
				Id                         *int32                                                       `json:"id,omitempty"`
				ManageDeployTokens         *bool                                                        `json:"manage_deploy_tokens,omitempty"`
				ManageGroupAccessTokens    *bool                                                        `json:"manage_group_access_tokens,omitempty"`
				ManageMergeRequestSettings *bool                                                        `json:"manage_merge_request_settings,omitempty"`
				ManageProjectAccessTokens  *bool                                                        `json:"manage_project_access_tokens,omitempty"`
				ManageProtectedTags        *bool                                                        `json:"manage_protected_tags,omitempty"`
				ManageSecurityPolicyLink   *bool                                                        `json:"manage_security_policy_link,omitempty"`
				Name                       *string                                                      `json:"name,omitempty"`
				ReadAdminCicd              *bool                                                        `json:"read_admin_cicd,omitempty"`
				ReadAdminMonitoring        *bool                                                        `json:"read_admin_monitoring,omitempty"`
				ReadAdminSubscription      *bool                                                        `json:"read_admin_subscription,omitempty"`
				ReadAdminUsers             *bool                                                        `json:"read_admin_users,omitempty"`
				ReadCode                   *bool                                                        `json:"read_code,omitempty"`
				ReadComplianceDashboard    *bool                                                        `json:"read_compliance_dashboard,omitempty"`
				ReadCrmContact             *bool                                                        `json:"read_crm_contact,omitempty"`
				ReadDependency             *bool                                                        `json:"read_dependency,omitempty"`
				ReadRunners                *bool                                                        `json:"read_runners,omitempty"`
				ReadVulnerability          *bool                                                        `json:"read_vulnerability,omitempty"`
				RemoveGroup                *bool                                                        `json:"remove_group,omitempty"`
				RemoveProject              *bool                                                        `json:"remove_project,omitempty"`
			} `json:"member_role,omitempty"`
			MembershipState *string `json:"membership_state,omitempty"`
			Name            *string `json:"name,omitempty"`
			Override        *string `json:"override,omitempty"`
			PublicEmail     *string `json:"public_email,omitempty"`
			State           *string `json:"state,omitempty"`
			Username        *string `json:"username,omitempty"`
			WebUrl          *string `json:"web_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdBillableMembersUserIdResponse(rsp *http.Response) (*DeleteApiV4GroupsIdBillableMembersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdBillableMembersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdBillableMembersUserIdIndirectResponse(rsp *http.Response) (*GetApiV4GroupsIdBillableMembersUserIdIndirectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdBillableMembersUserIdIndirectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessLevel *struct {
				CustomRole   *string `json:"custom_role,omitempty"`
				IntegerValue *string `json:"integer_value,omitempty"`
				StringValue  *string `json:"string_value,omitempty"`
			} `json:"access_level,omitempty"`
			CreatedAt        *string `json:"created_at,omitempty"`
			ExpiresAt        *string `json:"expires_at,omitempty"`
			Id               *string `json:"id,omitempty"`
			SourceFullName   *string `json:"source_full_name,omitempty"`
			SourceId         *string `json:"source_id,omitempty"`
			SourceMembersUrl *string `json:"source_members_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdBillableMembersUserIdMembershipsResponse(rsp *http.Response) (*GetApiV4GroupsIdBillableMembersUserIdMembershipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdBillableMembersUserIdMembershipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessLevel *struct {
				CustomRole   *string `json:"custom_role,omitempty"`
				IntegerValue *string `json:"integer_value,omitempty"`
				StringValue  *string `json:"string_value,omitempty"`
			} `json:"access_level,omitempty"`
			CreatedAt        *string `json:"created_at,omitempty"`
			ExpiresAt        *string `json:"expires_at,omitempty"`
			Id               *string `json:"id,omitempty"`
			SourceFullName   *string `json:"source_full_name,omitempty"`
			SourceId         *string `json:"source_id,omitempty"`
			SourceMembersUrl *string `json:"source_members_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdClustersResponse(rsp *http.Response) (*GetApiV4GroupsIdClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			ClusterType       *string `json:"cluster_type,omitempty"`
			CreatedAt         *string `json:"created_at,omitempty"`
			Domain            *string `json:"domain,omitempty"`
			Enabled           *string `json:"enabled,omitempty"`
			EnvironmentScope  *string `json:"environment_scope,omitempty"`
			Id                *string `json:"id,omitempty"`
			Managed           *string `json:"managed,omitempty"`
			ManagementProject *struct {
				CreatedAt         *time.Time `json:"created_at,omitempty"`
				Description       *string    `json:"description,omitempty"`
				Id                *int32     `json:"id,omitempty"`
				Name              *string    `json:"name,omitempty"`
				NameWithNamespace *string    `json:"name_with_namespace,omitempty"`
				Path              *string    `json:"path,omitempty"`
				PathWithNamespace *string    `json:"path_with_namespace,omitempty"`
			} `json:"management_project,omitempty"`
			Name                    *string `json:"name,omitempty"`
			NamespacePerEnvironment *string `json:"namespace_per_environment,omitempty"`
			PlatformKubernetes      *struct {
				ApiUrl            *string `json:"api_url,omitempty"`
				AuthorizationType *string `json:"authorization_type,omitempty"`
				CaCert            *string `json:"ca_cert,omitempty"`
				Namespace         *string `json:"namespace,omitempty"`
			} `json:"platform_kubernetes,omitempty"`
			PlatformType *string `json:"platform_type,omitempty"`
			ProviderGcp  *struct {
				ClusterId    *string `json:"cluster_id,omitempty"`
				Endpoint     *string `json:"endpoint,omitempty"`
				GcpProjectId *string `json:"gcp_project_id,omitempty"`
				MachineType  *string `json:"machine_type,omitempty"`
				NumNodes     *string `json:"num_nodes,omitempty"`
				StatusName   *string `json:"status_name,omitempty"`
				Zone         *string `json:"zone,omitempty"`
			} `json:"provider_gcp,omitempty"`
			ProviderType *string `json:"provider_type,omitempty"`

			// User API_Entities_UserBasic model
			User *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdClustersUserResponse(rsp *http.Response) (*PostApiV4GroupsIdClustersUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdClustersUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			ClusterType      *string `json:"cluster_type,omitempty"`
			CreatedAt        *string `json:"created_at,omitempty"`
			Domain           *string `json:"domain,omitempty"`
			Enabled          *string `json:"enabled,omitempty"`
			EnvironmentScope *string `json:"environment_scope,omitempty"`

			// Group API_Entities_BasicGroupDetails model
			Group *struct {
				Id     *string `json:"id,omitempty"`
				Name   *string `json:"name,omitempty"`
				WebUrl *string `json:"web_url,omitempty"`
			} `json:"group,omitempty"`
			Id                *string `json:"id,omitempty"`
			Managed           *string `json:"managed,omitempty"`
			ManagementProject *struct {
				CreatedAt         *time.Time `json:"created_at,omitempty"`
				Description       *string    `json:"description,omitempty"`
				Id                *int32     `json:"id,omitempty"`
				Name              *string    `json:"name,omitempty"`
				NameWithNamespace *string    `json:"name_with_namespace,omitempty"`
				Path              *string    `json:"path,omitempty"`
				PathWithNamespace *string    `json:"path_with_namespace,omitempty"`
			} `json:"management_project,omitempty"`
			Name                    *string `json:"name,omitempty"`
			NamespacePerEnvironment *string `json:"namespace_per_environment,omitempty"`
			PlatformKubernetes      *struct {
				ApiUrl            *string `json:"api_url,omitempty"`
				AuthorizationType *string `json:"authorization_type,omitempty"`
				CaCert            *string `json:"ca_cert,omitempty"`
				Namespace         *string `json:"namespace,omitempty"`
			} `json:"platform_kubernetes,omitempty"`
			PlatformType *string `json:"platform_type,omitempty"`
			ProviderGcp  *struct {
				ClusterId    *string `json:"cluster_id,omitempty"`
				Endpoint     *string `json:"endpoint,omitempty"`
				GcpProjectId *string `json:"gcp_project_id,omitempty"`
				MachineType  *string `json:"machine_type,omitempty"`
				NumNodes     *string `json:"num_nodes,omitempty"`
				StatusName   *string `json:"status_name,omitempty"`
				Zone         *string `json:"zone,omitempty"`
			} `json:"provider_gcp,omitempty"`
			ProviderType *string `json:"provider_type,omitempty"`

			// User API_Entities_UserBasic model
			User *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdClustersClusterIdResponse(rsp *http.Response) (*DeleteApiV4GroupsIdClustersClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdClustersClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest struct {
			ClusterType      *string `json:"cluster_type,omitempty"`
			CreatedAt        *string `json:"created_at,omitempty"`
			Domain           *string `json:"domain,omitempty"`
			Enabled          *string `json:"enabled,omitempty"`
			EnvironmentScope *string `json:"environment_scope,omitempty"`

			// Group API_Entities_BasicGroupDetails model
			Group *struct {
				Id     *string `json:"id,omitempty"`
				Name   *string `json:"name,omitempty"`
				WebUrl *string `json:"web_url,omitempty"`
			} `json:"group,omitempty"`
			Id                *string `json:"id,omitempty"`
			Managed           *string `json:"managed,omitempty"`
			ManagementProject *struct {
				CreatedAt         *time.Time `json:"created_at,omitempty"`
				Description       *string    `json:"description,omitempty"`
				Id                *int32     `json:"id,omitempty"`
				Name              *string    `json:"name,omitempty"`
				NameWithNamespace *string    `json:"name_with_namespace,omitempty"`
				Path              *string    `json:"path,omitempty"`
				PathWithNamespace *string    `json:"path_with_namespace,omitempty"`
			} `json:"management_project,omitempty"`
			Name                    *string `json:"name,omitempty"`
			NamespacePerEnvironment *string `json:"namespace_per_environment,omitempty"`
			PlatformKubernetes      *struct {
				ApiUrl            *string `json:"api_url,omitempty"`
				AuthorizationType *string `json:"authorization_type,omitempty"`
				CaCert            *string `json:"ca_cert,omitempty"`
				Namespace         *string `json:"namespace,omitempty"`
			} `json:"platform_kubernetes,omitempty"`
			PlatformType *string `json:"platform_type,omitempty"`
			ProviderGcp  *struct {
				ClusterId    *string `json:"cluster_id,omitempty"`
				Endpoint     *string `json:"endpoint,omitempty"`
				GcpProjectId *string `json:"gcp_project_id,omitempty"`
				MachineType  *string `json:"machine_type,omitempty"`
				NumNodes     *string `json:"num_nodes,omitempty"`
				StatusName   *string `json:"status_name,omitempty"`
				Zone         *string `json:"zone,omitempty"`
			} `json:"provider_gcp,omitempty"`
			ProviderType *string `json:"provider_type,omitempty"`

			// User API_Entities_UserBasic model
			User *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdClustersClusterIdResponse(rsp *http.Response) (*GetApiV4GroupsIdClustersClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdClustersClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ClusterType      *string `json:"cluster_type,omitempty"`
			CreatedAt        *string `json:"created_at,omitempty"`
			Domain           *string `json:"domain,omitempty"`
			Enabled          *string `json:"enabled,omitempty"`
			EnvironmentScope *string `json:"environment_scope,omitempty"`

			// Group API_Entities_BasicGroupDetails model
			Group *struct {
				Id     *string `json:"id,omitempty"`
				Name   *string `json:"name,omitempty"`
				WebUrl *string `json:"web_url,omitempty"`
			} `json:"group,omitempty"`
			Id                *string `json:"id,omitempty"`
			Managed           *string `json:"managed,omitempty"`
			ManagementProject *struct {
				CreatedAt         *time.Time `json:"created_at,omitempty"`
				Description       *string    `json:"description,omitempty"`
				Id                *int32     `json:"id,omitempty"`
				Name              *string    `json:"name,omitempty"`
				NameWithNamespace *string    `json:"name_with_namespace,omitempty"`
				Path              *string    `json:"path,omitempty"`
				PathWithNamespace *string    `json:"path_with_namespace,omitempty"`
			} `json:"management_project,omitempty"`
			Name                    *string `json:"name,omitempty"`
			NamespacePerEnvironment *string `json:"namespace_per_environment,omitempty"`
			PlatformKubernetes      *struct {
				ApiUrl            *string `json:"api_url,omitempty"`
				AuthorizationType *string `json:"authorization_type,omitempty"`
				CaCert            *string `json:"ca_cert,omitempty"`
				Namespace         *string `json:"namespace,omitempty"`
			} `json:"platform_kubernetes,omitempty"`
			PlatformType *string `json:"platform_type,omitempty"`
			ProviderGcp  *struct {
				ClusterId    *string `json:"cluster_id,omitempty"`
				Endpoint     *string `json:"endpoint,omitempty"`
				GcpProjectId *string `json:"gcp_project_id,omitempty"`
				MachineType  *string `json:"machine_type,omitempty"`
				NumNodes     *string `json:"num_nodes,omitempty"`
				StatusName   *string `json:"status_name,omitempty"`
				Zone         *string `json:"zone,omitempty"`
			} `json:"provider_gcp,omitempty"`
			ProviderType *string `json:"provider_type,omitempty"`

			// User API_Entities_UserBasic model
			User *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdClustersClusterIdResponse(rsp *http.Response) (*PutApiV4GroupsIdClustersClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdClustersClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ClusterType      *string `json:"cluster_type,omitempty"`
			CreatedAt        *string `json:"created_at,omitempty"`
			Domain           *string `json:"domain,omitempty"`
			Enabled          *string `json:"enabled,omitempty"`
			EnvironmentScope *string `json:"environment_scope,omitempty"`

			// Group API_Entities_BasicGroupDetails model
			Group *struct {
				Id     *string `json:"id,omitempty"`
				Name   *string `json:"name,omitempty"`
				WebUrl *string `json:"web_url,omitempty"`
			} `json:"group,omitempty"`
			Id                *string `json:"id,omitempty"`
			Managed           *string `json:"managed,omitempty"`
			ManagementProject *struct {
				CreatedAt         *time.Time `json:"created_at,omitempty"`
				Description       *string    `json:"description,omitempty"`
				Id                *int32     `json:"id,omitempty"`
				Name              *string    `json:"name,omitempty"`
				NameWithNamespace *string    `json:"name_with_namespace,omitempty"`
				Path              *string    `json:"path,omitempty"`
				PathWithNamespace *string    `json:"path_with_namespace,omitempty"`
			} `json:"management_project,omitempty"`
			Name                    *string `json:"name,omitempty"`
			NamespacePerEnvironment *string `json:"namespace_per_environment,omitempty"`
			PlatformKubernetes      *struct {
				ApiUrl            *string `json:"api_url,omitempty"`
				AuthorizationType *string `json:"authorization_type,omitempty"`
				CaCert            *string `json:"ca_cert,omitempty"`
				Namespace         *string `json:"namespace,omitempty"`
			} `json:"platform_kubernetes,omitempty"`
			PlatformType *string `json:"platform_type,omitempty"`
			ProviderGcp  *struct {
				ClusterId    *string `json:"cluster_id,omitempty"`
				Endpoint     *string `json:"endpoint,omitempty"`
				GcpProjectId *string `json:"gcp_project_id,omitempty"`
				MachineType  *string `json:"machine_type,omitempty"`
				NumNodes     *string `json:"num_nodes,omitempty"`
				StatusName   *string `json:"status_name,omitempty"`
				Zone         *string `json:"zone,omitempty"`
			} `json:"provider_gcp,omitempty"`
			ProviderType *string `json:"provider_type,omitempty"`

			// User API_Entities_UserBasic model
			User *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdCustomAttributesResponse(rsp *http.Response) (*GetApiV4GroupsIdCustomAttributesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdCustomAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdCustomAttributesKeyResponse(rsp *http.Response) (*DeleteApiV4GroupsIdCustomAttributesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdCustomAttributesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdCustomAttributesKeyResponse(rsp *http.Response) (*GetApiV4GroupsIdCustomAttributesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdCustomAttributesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Key   *string `json:"key,omitempty"`
			Value *string `json:"value,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdCustomAttributesKeyResponse(rsp *http.Response) (*PutApiV4GroupsIdCustomAttributesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdCustomAttributesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdDependencyProxyCacheResponse(rsp *http.Response) (*DeleteApiV4GroupsIdDependencyProxyCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdDependencyProxyCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdDeployTokensResponse(rsp *http.Response) (*GetApiV4GroupsIdDeployTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdDeployTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Expired   *bool          `json:"expired,omitempty"`
			ExpiresAt *time.Time     `json:"expires_at,omitempty"`
			Id        *int32         `json:"id,omitempty"`
			Name      *string        `json:"name,omitempty"`
			Revoked   *bool          `json:"revoked,omitempty"`
			Scopes    *[]interface{} `json:"scopes,omitempty"`
			Username  *string        `json:"username,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdDeployTokensResponse(rsp *http.Response) (*PostApiV4GroupsIdDeployTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdDeployTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Expired   *bool          `json:"expired,omitempty"`
			ExpiresAt *time.Time     `json:"expires_at,omitempty"`
			Id        *int32         `json:"id,omitempty"`
			Name      *string        `json:"name,omitempty"`
			Revoked   *bool          `json:"revoked,omitempty"`
			Scopes    *[]interface{} `json:"scopes,omitempty"`
			Token     *string        `json:"token,omitempty"`
			Username  *string        `json:"username,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdDeployTokensTokenIdResponse(rsp *http.Response) (*DeleteApiV4GroupsIdDeployTokensTokenIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdDeployTokensTokenIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdDeployTokensTokenIdResponse(rsp *http.Response) (*GetApiV4GroupsIdDeployTokensTokenIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdDeployTokensTokenIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Expired   *bool          `json:"expired,omitempty"`
			ExpiresAt *time.Time     `json:"expires_at,omitempty"`
			Id        *int32         `json:"id,omitempty"`
			Name      *string        `json:"name,omitempty"`
			Revoked   *bool          `json:"revoked,omitempty"`
			Scopes    *[]interface{} `json:"scopes,omitempty"`
			Username  *string        `json:"username,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdDescendantGroupsResponse(rsp *http.Response) (*GetApiV4GroupsIdDescendantGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdDescendantGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Archived          *bool   `json:"archived,omitempty"`
			AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
			AvatarUrl         *string `json:"avatar_url,omitempty"`
			CreatedAt         *string `json:"created_at,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                   *string `json:"default_branch,omitempty"`
			DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
			DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
			Description                     *string `json:"description,omitempty"`

			// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
			DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
			DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
			EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
			FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
			FullName               *string `json:"full_name,omitempty"`
			FullPath               *string `json:"full_path,omitempty"`
			Id                     *string `json:"id,omitempty"`
			LdapAccess             *string `json:"ldap_access,omitempty"`
			LdapCn                 *string `json:"ldap_cn,omitempty"`
			LdapGroupLinks         *struct {
				Cn           *string `json:"cn,omitempty"`
				Filter       *string `json:"filter,omitempty"`
				GroupAccess  *int32  `json:"group_access,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Provider     *string `json:"provider,omitempty"`
			} `json:"ldap_group_links,omitempty"`
			LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
			LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
			LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
			MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
			MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
			MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
			MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
			Name                           *string `json:"name,omitempty"`
			OrganizationId                 *string `json:"organization_id,omitempty"`
			ParentId                       *string `json:"parent_id,omitempty"`
			Path                           *string `json:"path,omitempty"`
			ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
			RepositoryStorage              *string `json:"repository_storage,omitempty"`
			RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
			RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
			RootStorageStatistics          *struct {
				// BuildArtifactsSize CI artifacts size in bytes.
				BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

				// ContainerRegistrySize container registry size in bytes.
				ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

				// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
				ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

				// DependencyProxySize Dependency Proxy sizes in bytes.
				DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

				// LfsObjectsSize LFS objects size in bytes.
				LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

				// PackagesSize Packages size in bytes.
				PackagesSize *int32 `json:"packages_size,omitempty"`

				// PipelineArtifactsSize CI pipeline artifacts size in bytes.
				PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

				// RepositorySize Git repository size in bytes.
				RepositorySize *int32 `json:"repository_size,omitempty"`

				// SnippetsSize Snippets size in bytes.
				SnippetsSize *int32 `json:"snippets_size,omitempty"`

				// StorageSize Total storage in bytes.
				StorageSize *int32 `json:"storage_size,omitempty"`

				// UploadsSize Uploads size in bytes.
				UploadsSize *int32 `json:"uploads_size,omitempty"`

				// WikiSize Wiki size in bytes.
				WikiSize *int32 `json:"wiki_size,omitempty"`
			} `json:"root_storage_statistics,omitempty"`
			SamlGroupLinks *struct {
				AccessLevel  *int32  `json:"access_level,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"saml_group_links,omitempty"`
			ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
			SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
			Statistics           *struct {
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
			TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
			Visibility                   *string `json:"visibility,omitempty"`
			WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
			WebUrl                       *string `json:"web_url,omitempty"`
			WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdEpicsEpicIidAwardEmojiResponse(rsp *http.Response) (*GetApiV4GroupsIdEpicsEpicIidAwardEmojiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdEpicsEpicIidAwardEmojiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AwardableId   *int32     `json:"awardable_id,omitempty"`
			AwardableType *string    `json:"awardable_type,omitempty"`
			CreatedAt     *time.Time `json:"created_at,omitempty"`
			Id            *int32     `json:"id,omitempty"`
			Name          *string    `json:"name,omitempty"`
			UpdatedAt     *time.Time `json:"updated_at,omitempty"`
			Url           *string    `json:"url,omitempty"`

			// User API_Entities_UserBasic model
			User *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdEpicsEpicIidAwardEmojiResponse(rsp *http.Response) (*PostApiV4GroupsIdEpicsEpicIidAwardEmojiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdEpicsEpicIidAwardEmojiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			AwardableId   *int32     `json:"awardable_id,omitempty"`
			AwardableType *string    `json:"awardable_type,omitempty"`
			CreatedAt     *time.Time `json:"created_at,omitempty"`
			Id            *int32     `json:"id,omitempty"`
			Name          *string    `json:"name,omitempty"`
			UpdatedAt     *time.Time `json:"updated_at,omitempty"`
			Url           *string    `json:"url,omitempty"`

			// User API_Entities_UserBasic model
			User *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse(rsp *http.Response) (*DeleteApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse(rsp *http.Response) (*GetApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdEpicsEpicIidAwardEmojiAwardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AwardableId   *int32     `json:"awardable_id,omitempty"`
			AwardableType *string    `json:"awardable_type,omitempty"`
			CreatedAt     *time.Time `json:"created_at,omitempty"`
			Id            *int32     `json:"id,omitempty"`
			Name          *string    `json:"name,omitempty"`
			UpdatedAt     *time.Time `json:"updated_at,omitempty"`
			Url           *string    `json:"url,omitempty"`

			// User API_Entities_UserBasic model
			User *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse(rsp *http.Response) (*GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AwardableId   *int32     `json:"awardable_id,omitempty"`
			AwardableType *string    `json:"awardable_type,omitempty"`
			CreatedAt     *time.Time `json:"created_at,omitempty"`
			Id            *int32     `json:"id,omitempty"`
			Name          *string    `json:"name,omitempty"`
			UpdatedAt     *time.Time `json:"updated_at,omitempty"`
			Url           *string    `json:"url,omitempty"`

			// User API_Entities_UserBasic model
			User *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse(rsp *http.Response) (*PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			AwardableId   *int32     `json:"awardable_id,omitempty"`
			AwardableType *string    `json:"awardable_type,omitempty"`
			CreatedAt     *time.Time `json:"created_at,omitempty"`
			Id            *int32     `json:"id,omitempty"`
			Name          *string    `json:"name,omitempty"`
			UpdatedAt     *time.Time `json:"updated_at,omitempty"`
			Url           *string    `json:"url,omitempty"`

			// User API_Entities_UserBasic model
			User *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse(rsp *http.Response) (*DeleteApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse(rsp *http.Response) (*GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AwardableId   *int32     `json:"awardable_id,omitempty"`
			AwardableType *string    `json:"awardable_type,omitempty"`
			CreatedAt     *time.Time `json:"created_at,omitempty"`
			Id            *int32     `json:"id,omitempty"`
			Name          *string    `json:"name,omitempty"`
			UpdatedAt     *time.Time `json:"updated_at,omitempty"`
			Url           *string    `json:"url,omitempty"`

			// User API_Entities_UserBasic model
			User *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdExportResponse(rsp *http.Response) (*PostApiV4GroupsIdExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdExportDownloadResponse(rsp *http.Response) (*GetApiV4GroupsIdExportDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdExportDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParsePostApiV4GroupsIdExportRelationsResponse(rsp *http.Response) (*PostApiV4GroupsIdExportRelationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdExportRelationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdExportRelationsDownloadResponse(rsp *http.Response) (*GetApiV4GroupsIdExportRelationsDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdExportRelationsDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdExportRelationsStatusResponse(rsp *http.Response) (*GetApiV4GroupsIdExportRelationsStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdExportRelationsStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Batched *bool `json:"batched,omitempty"`
			Batches *struct {
				BatchNumber  *int32                                                 `json:"batch_number,omitempty"`
				Error        *string                                                `json:"error,omitempty"`
				ObjectsCount *int32                                                 `json:"objects_count,omitempty"`
				Status       *GetApiV4GroupsIdExportRelationsStatus200BatchesStatus `json:"status,omitempty"`
				UpdatedAt    *time.Time                                             `json:"updated_at,omitempty"`
			} `json:"batches,omitempty"`
			BatchesCount      *int32                                          `json:"batches_count,omitempty"`
			Error             *string                                         `json:"error,omitempty"`
			Relation          *string                                         `json:"relation,omitempty"`
			Status            *GetApiV4GroupsIdExportRelationsStatus200Status `json:"status,omitempty"`
			TotalObjectsCount *int32                                          `json:"total_objects_count,omitempty"`
			UpdatedAt         *time.Time                                      `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdGroupsSharedResponse(rsp *http.Response) (*GetApiV4GroupsIdGroupsSharedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdGroupsSharedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Archived          *bool   `json:"archived,omitempty"`
			AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
			AvatarUrl         *string `json:"avatar_url,omitempty"`
			CreatedAt         *string `json:"created_at,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                   *string `json:"default_branch,omitempty"`
			DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
			DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
			Description                     *string `json:"description,omitempty"`

			// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
			DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
			DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
			EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
			FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
			FullName               *string `json:"full_name,omitempty"`
			FullPath               *string `json:"full_path,omitempty"`
			Id                     *string `json:"id,omitempty"`
			LdapAccess             *string `json:"ldap_access,omitempty"`
			LdapCn                 *string `json:"ldap_cn,omitempty"`
			LdapGroupLinks         *struct {
				Cn           *string `json:"cn,omitempty"`
				Filter       *string `json:"filter,omitempty"`
				GroupAccess  *int32  `json:"group_access,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Provider     *string `json:"provider,omitempty"`
			} `json:"ldap_group_links,omitempty"`
			LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
			LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
			LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
			MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
			MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
			MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
			MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
			Name                           *string `json:"name,omitempty"`
			OrganizationId                 *string `json:"organization_id,omitempty"`
			ParentId                       *string `json:"parent_id,omitempty"`
			Path                           *string `json:"path,omitempty"`
			ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
			RepositoryStorage              *string `json:"repository_storage,omitempty"`
			RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
			RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
			RootStorageStatistics          *struct {
				// BuildArtifactsSize CI artifacts size in bytes.
				BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

				// ContainerRegistrySize container registry size in bytes.
				ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

				// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
				ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

				// DependencyProxySize Dependency Proxy sizes in bytes.
				DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

				// LfsObjectsSize LFS objects size in bytes.
				LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

				// PackagesSize Packages size in bytes.
				PackagesSize *int32 `json:"packages_size,omitempty"`

				// PipelineArtifactsSize CI pipeline artifacts size in bytes.
				PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

				// RepositorySize Git repository size in bytes.
				RepositorySize *int32 `json:"repository_size,omitempty"`

				// SnippetsSize Snippets size in bytes.
				SnippetsSize *int32 `json:"snippets_size,omitempty"`

				// StorageSize Total storage in bytes.
				StorageSize *int32 `json:"storage_size,omitempty"`

				// UploadsSize Uploads size in bytes.
				UploadsSize *int32 `json:"uploads_size,omitempty"`

				// WikiSize Wiki size in bytes.
				WikiSize *int32 `json:"wiki_size,omitempty"`
			} `json:"root_storage_statistics,omitempty"`
			SamlGroupLinks *struct {
				AccessLevel  *int32  `json:"access_level,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"saml_group_links,omitempty"`
			ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
			SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
			Statistics           *struct {
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
			TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
			Visibility                   *string `json:"visibility,omitempty"`
			WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
			WebUrl                       *string `json:"web_url,omitempty"`
			WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdIntegrationsResponse(rsp *http.Response) (*GetApiV4GroupsIdIntegrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdIntegrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsAppleAppStoreResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsAppleAppStoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsAppleAppStoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsAsanaResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsAsanaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsAsanaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsAssemblaResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsAssemblaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsAssemblaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsBambooResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsBambooResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsBambooResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsBugzillaResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsBugzillaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsBugzillaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsBuildkiteResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsBuildkiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsBuildkiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsCampfireResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsCampfireResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsCampfireResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsClickupResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsClickupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsClickupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsConfluenceResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsConfluenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsConfluenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsCustomIssueTrackerResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsCustomIssueTrackerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsCustomIssueTrackerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsDatadogResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsDatadogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsDatadogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsDiffblueCoverResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsDiffblueCoverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsDiffblueCoverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsDiscordResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsDiscordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsDiscordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsDroneCiResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsDroneCiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsDroneCiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsEmailsOnPushResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsEmailsOnPushResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsEmailsOnPushResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsEwmResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsEwmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsEwmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsExternalWikiResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsExternalWikiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsExternalWikiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsGitGuardianResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsGitGuardianResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsGitGuardianResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsGithubResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsGithubResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsGithubResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsGitlabSlackApplicationResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsGitlabSlackApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsGitlabSlackApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsGooglePlayResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsGooglePlayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsGooglePlayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsHangoutsChatResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsHangoutsChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsHangoutsChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsHarborResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsHarborResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsHarborResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsIrkerResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsIrkerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsIrkerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsJenkinsResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsJenkinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsJenkinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsJiraResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsJiraResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsJiraResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsJiraCloudAppResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsJiraCloudAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsJiraCloudAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsMatrixResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsMatrixResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsMatrixResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsMattermostResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsMattermostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsMattermostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsMattermostSlashCommandsResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsMattermostSlashCommandsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsMattermostSlashCommandsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsMicrosoftTeamsResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsMicrosoftTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsMicrosoftTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsMockCiResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsMockCiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsMockCiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsMockMonitoringResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsMockMonitoringResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsMockMonitoringResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsPackagistResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsPackagistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsPackagistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsPhorgeResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsPhorgeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsPhorgeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsPipelinesEmailResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsPipelinesEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsPipelinesEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsPivotaltrackerResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsPivotaltrackerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsPivotaltrackerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsPumbleResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsPumbleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsPumbleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsPushoverResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsPushoverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsPushoverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsRedmineResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsRedmineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsRedmineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsSlackResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsSlackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsSlackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsSlackSlashCommandsResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsSlackSlashCommandsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsSlackSlashCommandsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsSquashTmResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsSquashTmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsSquashTmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsTeamcityResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsTeamcityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsTeamcityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsTelegramResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsTelegramResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsTelegramResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsUnifyCircuitResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsUnifyCircuitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsUnifyCircuitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsWebexTeamsResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsWebexTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsWebexTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsYoutrackResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsYoutrackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsYoutrackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdIntegrationsZentaoResponse(rsp *http.Response) (*PutApiV4GroupsIdIntegrationsZentaoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdIntegrationsZentaoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool      `json:"active,omitempty"`
			AlertEvents              *bool      `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool      `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool      `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool      `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool      `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time `json:"created_at,omitempty"`
			DeploymentEvents         *bool      `json:"deployment_events,omitempty"`
			Id                       *int32     `json:"id,omitempty"`
			IncidentEvents           *bool      `json:"incident_events,omitempty"`
			Inherited                *bool      `json:"inherited,omitempty"`
			IssuesEvents             *bool      `json:"issues_events,omitempty"`
			JobEvents                *bool      `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool      `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool      `json:"note_events,omitempty"`
			PipelineEvents           *bool      `json:"pipeline_events,omitempty"`
			PushEvents               *bool      `json:"push_events,omitempty"`
			Slug                     *int32     `json:"slug,omitempty"`
			TagPushEvents            *bool      `json:"tag_push_events,omitempty"`
			Title                    *string    `json:"title,omitempty"`
			UpdatedAt                *time.Time `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool      `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool      `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdIntegrationsSlugResponse(rsp *http.Response) (*DeleteApiV4GroupsIdIntegrationsSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdIntegrationsSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdIntegrationsSlugResponse(rsp *http.Response) (*GetApiV4GroupsIdIntegrationsSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdIntegrationsSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active                   *bool                   `json:"active,omitempty"`
			AlertEvents              *bool                   `json:"alert_events,omitempty"`
			CommentOnEventEnabled    *bool                   `json:"comment_on_event_enabled,omitempty"`
			CommitEvents             *bool                   `json:"commit_events,omitempty"`
			ConfidentialIssuesEvents *bool                   `json:"confidential_issues_events,omitempty"`
			ConfidentialNoteEvents   *bool                   `json:"confidential_note_events,omitempty"`
			CreatedAt                *time.Time              `json:"created_at,omitempty"`
			DeploymentEvents         *bool                   `json:"deployment_events,omitempty"`
			Id                       *int32                  `json:"id,omitempty"`
			IncidentEvents           *bool                   `json:"incident_events,omitempty"`
			Inherited                *bool                   `json:"inherited,omitempty"`
			IssuesEvents             *bool                   `json:"issues_events,omitempty"`
			JobEvents                *bool                   `json:"job_events,omitempty"`
			MergeRequestsEvents      *bool                   `json:"merge_requests_events,omitempty"`
			NoteEvents               *bool                   `json:"note_events,omitempty"`
			PipelineEvents           *bool                   `json:"pipeline_events,omitempty"`
			Properties               *map[string]interface{} `json:"properties,omitempty"`
			PushEvents               *bool                   `json:"push_events,omitempty"`
			Slug                     *int32                  `json:"slug,omitempty"`
			TagPushEvents            *bool                   `json:"tag_push_events,omitempty"`
			Title                    *string                 `json:"title,omitempty"`
			UpdatedAt                *time.Time              `json:"updated_at,omitempty"`
			VulnerabilityEvents      *bool                   `json:"vulnerability_events,omitempty"`
			WikiPageEvents           *bool                   `json:"wiki_page_events,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdInvitationsResponse(rsp *http.Response) (*GetApiV4GroupsIdInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AccessLevel   *string `json:"access_level,omitempty"`
			CreatedAt     *string `json:"created_at,omitempty"`
			CreatedByName *string `json:"created_by_name,omitempty"`
			ExpiresAt     *string `json:"expires_at,omitempty"`
			InviteEmail   *string `json:"invite_email,omitempty"`
			InviteToken   *string `json:"invite_token,omitempty"`
			UserName      *string `json:"user_name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdInvitationsResponse(rsp *http.Response) (*PostApiV4GroupsIdInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			AccessLevel   *string `json:"access_level,omitempty"`
			CreatedAt     *string `json:"created_at,omitempty"`
			CreatedByName *string `json:"created_by_name,omitempty"`
			ExpiresAt     *string `json:"expires_at,omitempty"`
			InviteEmail   *string `json:"invite_email,omitempty"`
			InviteToken   *string `json:"invite_token,omitempty"`
			UserName      *string `json:"user_name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdInvitationsEmailResponse(rsp *http.Response) (*DeleteApiV4GroupsIdInvitationsEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdInvitationsEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParsePutApiV4GroupsIdInvitationsEmailResponse(rsp *http.Response) (*PutApiV4GroupsIdInvitationsEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdInvitationsEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessLevel   *string `json:"access_level,omitempty"`
			CreatedAt     *string `json:"created_at,omitempty"`
			CreatedByName *string `json:"created_by_name,omitempty"`
			ExpiresAt     *string `json:"expires_at,omitempty"`
			InviteEmail   *string `json:"invite_email,omitempty"`
			InviteToken   *string `json:"invite_token,omitempty"`
			UserName      *string `json:"user_name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdInvitedGroupsResponse(rsp *http.Response) (*GetApiV4GroupsIdInvitedGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdInvitedGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Archived          *bool   `json:"archived,omitempty"`
			AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
			AvatarUrl         *string `json:"avatar_url,omitempty"`
			CreatedAt         *string `json:"created_at,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                   *string `json:"default_branch,omitempty"`
			DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
			DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
			Description                     *string `json:"description,omitempty"`

			// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
			DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
			DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
			EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
			FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
			FullName               *string `json:"full_name,omitempty"`
			FullPath               *string `json:"full_path,omitempty"`
			Id                     *string `json:"id,omitempty"`
			LdapAccess             *string `json:"ldap_access,omitempty"`
			LdapCn                 *string `json:"ldap_cn,omitempty"`
			LdapGroupLinks         *struct {
				Cn           *string `json:"cn,omitempty"`
				Filter       *string `json:"filter,omitempty"`
				GroupAccess  *int32  `json:"group_access,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Provider     *string `json:"provider,omitempty"`
			} `json:"ldap_group_links,omitempty"`
			LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
			LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
			LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
			MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
			MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
			MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
			MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
			Name                           *string `json:"name,omitempty"`
			OrganizationId                 *string `json:"organization_id,omitempty"`
			ParentId                       *string `json:"parent_id,omitempty"`
			Path                           *string `json:"path,omitempty"`
			ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
			RepositoryStorage              *string `json:"repository_storage,omitempty"`
			RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
			RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
			RootStorageStatistics          *struct {
				// BuildArtifactsSize CI artifacts size in bytes.
				BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

				// ContainerRegistrySize container registry size in bytes.
				ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

				// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
				ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

				// DependencyProxySize Dependency Proxy sizes in bytes.
				DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

				// LfsObjectsSize LFS objects size in bytes.
				LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

				// PackagesSize Packages size in bytes.
				PackagesSize *int32 `json:"packages_size,omitempty"`

				// PipelineArtifactsSize CI pipeline artifacts size in bytes.
				PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

				// RepositorySize Git repository size in bytes.
				RepositorySize *int32 `json:"repository_size,omitempty"`

				// SnippetsSize Snippets size in bytes.
				SnippetsSize *int32 `json:"snippets_size,omitempty"`

				// StorageSize Total storage in bytes.
				StorageSize *int32 `json:"storage_size,omitempty"`

				// UploadsSize Uploads size in bytes.
				UploadsSize *int32 `json:"uploads_size,omitempty"`

				// WikiSize Wiki size in bytes.
				WikiSize *int32 `json:"wiki_size,omitempty"`
			} `json:"root_storage_statistics,omitempty"`
			SamlGroupLinks *struct {
				AccessLevel  *int32  `json:"access_level,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"saml_group_links,omitempty"`
			ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
			SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
			Statistics           *struct {
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
			TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
			Visibility                   *string `json:"visibility,omitempty"`
			WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
			WebUrl                       *string `json:"web_url,omitempty"`
			WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdIssuesResponse(rsp *http.Response) (*GetApiV4GroupsIdIssuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdIssuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest []struct {
			Links *struct {
				AwardEmoji          *string `json:"award_emoji,omitempty"`
				ClosedAsDuplicateOf *string `json:"closed_as_duplicate_of,omitempty"`
				Notes               *string `json:"notes,omitempty"`
				Project             *string `json:"project,omitempty"`
				Self                *string `json:"self,omitempty"`
			} `json:"_links,omitempty"`
			Assignee *struct {
				AvatarUrl *string `json:"avatar_url,omitempty"`
				Id        *int    `json:"id,omitempty"`
				Name      *string `json:"name,omitempty"`
				State     *string `json:"state,omitempty"`
				Username  *string `json:"username,omitempty"`
				WebUrl    *string `json:"web_url,omitempty"`
			} `json:"assignee,omitempty"`
			Assignees *[]struct {
				AvatarUrl *string `json:"avatar_url,omitempty"`
				Id        *int    `json:"id,omitempty"`
				Name      *string `json:"name,omitempty"`
				State     *string `json:"state,omitempty"`
				Username  *string `json:"username,omitempty"`
				WebUrl    *string `json:"web_url,omitempty"`
			} `json:"assignees,omitempty"`
			Author *struct {
				AvatarUrl *string `json:"avatar_url,omitempty"`
				Id        *int    `json:"id,omitempty"`
				Name      *string `json:"name,omitempty"`
				State     *string `json:"state,omitempty"`
				Username  *string `json:"username,omitempty"`
				WebUrl    *string `json:"web_url,omitempty"`
			} `json:"author,omitempty"`
			ClosedAt           *string   `json:"closed_at,omitempty"`
			ClosedBy           *string   `json:"closed_by,omitempty"`
			Confidential       *bool     `json:"confidential,omitempty"`
			CreatedAt          *string   `json:"created_at,omitempty"`
			Description        *string   `json:"description,omitempty"`
			DiscussionLocked   *bool     `json:"discussion_locked,omitempty"`
			Downvotes          *int      `json:"downvotes,omitempty"`
			DueDate            *string   `json:"due_date,omitempty"`
			HasTasks           *bool     `json:"has_tasks,omitempty"`
			Id                 *int      `json:"id,omitempty"`
			Iid                *int      `json:"iid,omitempty"`
			Imported           *bool     `json:"imported,omitempty"`
			ImportedFrom       *string   `json:"imported_from,omitempty"`
			IssueType          *string   `json:"issue_type,omitempty"`
			Labels             *[]string `json:"labels,omitempty"`
			MergeRequestsCount *int      `json:"merge_requests_count,omitempty"`
			Milestone          *struct {
				CreatedAt   *string `json:"created_at,omitempty"`
				Description *string `json:"description,omitempty"`
				DueDate     *string `json:"due_date,omitempty"`
				Id          *int    `json:"id,omitempty"`
				Iid         *int    `json:"iid,omitempty"`
				ProjectId   *int    `json:"project_id,omitempty"`
				State       *string `json:"state,omitempty"`
				Title       *string `json:"title,omitempty"`
				UpdatedAt   *string `json:"updated_at,omitempty"`
			} `json:"milestone,omitempty"`
			ProjectId  *int `json:"project_id,omitempty"`
			References *struct {
				Full     *string `json:"full,omitempty"`
				Relative *string `json:"relative,omitempty"`
				Short    *string `json:"short,omitempty"`
			} `json:"references,omitempty"`
			Severity             *string `json:"severity,omitempty"`
			State                *string `json:"state,omitempty"`
			TaskCompletionStatus *struct {
				CompletedCount *int `json:"completed_count,omitempty"`
				Count          *int `json:"count,omitempty"`
			} `json:"task_completion_status,omitempty"`
			TaskStatus *string `json:"task_status,omitempty"`
			TimeStats  *struct {
				HumanTimeEstimate   *string `json:"human_time_estimate,omitempty"`
				HumanTotalTimeSpent *string `json:"human_total_time_spent,omitempty"`
				TimeEstimate        *int    `json:"time_estimate,omitempty"`
				TotalTimeSpent      *int    `json:"total_time_spent,omitempty"`
			} `json:"time_stats,omitempty"`
			Title          *string `json:"title,omitempty"`
			Type           *string `json:"type,omitempty"`
			UpdatedAt      *string `json:"updated_at,omitempty"`
			Upvotes        *int    `json:"upvotes,omitempty"`
			UserNotesCount *int    `json:"user_notes_count,omitempty"`
			WebUrl         *string `json:"web_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdLdapSyncResponse(rsp *http.Response) (*PostApiV4GroupsIdLdapSyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdLdapSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdMembersResponse(rsp *http.Response) (*GetApiV4GroupsIdMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AccessLevel *string `json:"access_level,omitempty"`
			AvatarPath  *string `json:"avatar_path,omitempty"`
			AvatarUrl   *string `json:"avatar_url,omitempty"`
			CreatedAt   *string `json:"created_at,omitempty"`

			// CreatedBy API_Entities_UserBasic model
			CreatedBy *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"created_by,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Email             *string `json:"email,omitempty"`
			ExpiresAt         *string `json:"expires_at,omitempty"`
			GroupSamlIdentity *struct {
				ExternUid      *string `json:"extern_uid,omitempty"`
				Provider       *string `json:"provider,omitempty"`
				SamlProviderId *string `json:"saml_provider_id,omitempty"`
			} `json:"group_saml_identity,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			IsUsingSeat *string `json:"is_using_seat,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			MemberRole  *struct {
				AdminCicdVariables         *bool                                                `json:"admin_cicd_variables,omitempty"`
				AdminComplianceFramework   *bool                                                `json:"admin_compliance_framework,omitempty"`
				AdminGroupMember           *bool                                                `json:"admin_group_member,omitempty"`
				AdminIntegrations          *bool                                                `json:"admin_integrations,omitempty"`
				AdminMergeRequest          *bool                                                `json:"admin_merge_request,omitempty"`
				AdminProtectedBranch       *bool                                                `json:"admin_protected_branch,omitempty"`
				AdminProtectedEnvironments *bool                                                `json:"admin_protected_environments,omitempty"`
				AdminPushRules             *bool                                                `json:"admin_push_rules,omitempty"`
				AdminRunners               *bool                                                `json:"admin_runners,omitempty"`
				AdminSecurityTesting       *bool                                                `json:"admin_security_testing,omitempty"`
				AdminTerraformState        *bool                                                `json:"admin_terraform_state,omitempty"`
				AdminVulnerability         *bool                                                `json:"admin_vulnerability,omitempty"`
				AdminWebHook               *bool                                                `json:"admin_web_hook,omitempty"`
				ArchiveProject             *bool                                                `json:"archive_project,omitempty"`
				BaseAccessLevel            *GetApiV4GroupsIdMembers200MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
				Description                *string                                              `json:"description,omitempty"`
				GroupId                    *int32                                               `json:"group_id,omitempty"`
				Id                         *int32                                               `json:"id,omitempty"`
				ManageDeployTokens         *bool                                                `json:"manage_deploy_tokens,omitempty"`
				ManageGroupAccessTokens    *bool                                                `json:"manage_group_access_tokens,omitempty"`
				ManageMergeRequestSettings *bool                                                `json:"manage_merge_request_settings,omitempty"`
				ManageProjectAccessTokens  *bool                                                `json:"manage_project_access_tokens,omitempty"`
				ManageProtectedTags        *bool                                                `json:"manage_protected_tags,omitempty"`
				ManageSecurityPolicyLink   *bool                                                `json:"manage_security_policy_link,omitempty"`
				Name                       *string                                              `json:"name,omitempty"`
				ReadAdminCicd              *bool                                                `json:"read_admin_cicd,omitempty"`
				ReadAdminMonitoring        *bool                                                `json:"read_admin_monitoring,omitempty"`
				ReadAdminSubscription      *bool                                                `json:"read_admin_subscription,omitempty"`
				ReadAdminUsers             *bool                                                `json:"read_admin_users,omitempty"`
				ReadCode                   *bool                                                `json:"read_code,omitempty"`
				ReadComplianceDashboard    *bool                                                `json:"read_compliance_dashboard,omitempty"`
				ReadCrmContact             *bool                                                `json:"read_crm_contact,omitempty"`
				ReadDependency             *bool                                                `json:"read_dependency,omitempty"`
				ReadRunners                *bool                                                `json:"read_runners,omitempty"`
				ReadVulnerability          *bool                                                `json:"read_vulnerability,omitempty"`
				RemoveGroup                *bool                                                `json:"remove_group,omitempty"`
				RemoveProject              *bool                                                `json:"remove_project,omitempty"`
			} `json:"member_role,omitempty"`
			MembershipState *string `json:"membership_state,omitempty"`
			Name            *string `json:"name,omitempty"`
			Override        *string `json:"override,omitempty"`
			PublicEmail     *string `json:"public_email,omitempty"`
			State           *string `json:"state,omitempty"`
			Username        *string `json:"username,omitempty"`
			WebUrl          *string `json:"web_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdMembersResponse(rsp *http.Response) (*PostApiV4GroupsIdMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			AccessLevel *string `json:"access_level,omitempty"`
			AvatarPath  *string `json:"avatar_path,omitempty"`
			AvatarUrl   *string `json:"avatar_url,omitempty"`
			CreatedAt   *string `json:"created_at,omitempty"`

			// CreatedBy API_Entities_UserBasic model
			CreatedBy *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"created_by,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Email             *string `json:"email,omitempty"`
			ExpiresAt         *string `json:"expires_at,omitempty"`
			GroupSamlIdentity *struct {
				ExternUid      *string `json:"extern_uid,omitempty"`
				Provider       *string `json:"provider,omitempty"`
				SamlProviderId *string `json:"saml_provider_id,omitempty"`
			} `json:"group_saml_identity,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			IsUsingSeat *string `json:"is_using_seat,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			MemberRole  *struct {
				AdminCicdVariables         *bool                                                 `json:"admin_cicd_variables,omitempty"`
				AdminComplianceFramework   *bool                                                 `json:"admin_compliance_framework,omitempty"`
				AdminGroupMember           *bool                                                 `json:"admin_group_member,omitempty"`
				AdminIntegrations          *bool                                                 `json:"admin_integrations,omitempty"`
				AdminMergeRequest          *bool                                                 `json:"admin_merge_request,omitempty"`
				AdminProtectedBranch       *bool                                                 `json:"admin_protected_branch,omitempty"`
				AdminProtectedEnvironments *bool                                                 `json:"admin_protected_environments,omitempty"`
				AdminPushRules             *bool                                                 `json:"admin_push_rules,omitempty"`
				AdminRunners               *bool                                                 `json:"admin_runners,omitempty"`
				AdminSecurityTesting       *bool                                                 `json:"admin_security_testing,omitempty"`
				AdminTerraformState        *bool                                                 `json:"admin_terraform_state,omitempty"`
				AdminVulnerability         *bool                                                 `json:"admin_vulnerability,omitempty"`
				AdminWebHook               *bool                                                 `json:"admin_web_hook,omitempty"`
				ArchiveProject             *bool                                                 `json:"archive_project,omitempty"`
				BaseAccessLevel            *PostApiV4GroupsIdMembers201MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
				Description                *string                                               `json:"description,omitempty"`
				GroupId                    *int32                                                `json:"group_id,omitempty"`
				Id                         *int32                                                `json:"id,omitempty"`
				ManageDeployTokens         *bool                                                 `json:"manage_deploy_tokens,omitempty"`
				ManageGroupAccessTokens    *bool                                                 `json:"manage_group_access_tokens,omitempty"`
				ManageMergeRequestSettings *bool                                                 `json:"manage_merge_request_settings,omitempty"`
				ManageProjectAccessTokens  *bool                                                 `json:"manage_project_access_tokens,omitempty"`
				ManageProtectedTags        *bool                                                 `json:"manage_protected_tags,omitempty"`
				ManageSecurityPolicyLink   *bool                                                 `json:"manage_security_policy_link,omitempty"`
				Name                       *string                                               `json:"name,omitempty"`
				ReadAdminCicd              *bool                                                 `json:"read_admin_cicd,omitempty"`
				ReadAdminMonitoring        *bool                                                 `json:"read_admin_monitoring,omitempty"`
				ReadAdminSubscription      *bool                                                 `json:"read_admin_subscription,omitempty"`
				ReadAdminUsers             *bool                                                 `json:"read_admin_users,omitempty"`
				ReadCode                   *bool                                                 `json:"read_code,omitempty"`
				ReadComplianceDashboard    *bool                                                 `json:"read_compliance_dashboard,omitempty"`
				ReadCrmContact             *bool                                                 `json:"read_crm_contact,omitempty"`
				ReadDependency             *bool                                                 `json:"read_dependency,omitempty"`
				ReadRunners                *bool                                                 `json:"read_runners,omitempty"`
				ReadVulnerability          *bool                                                 `json:"read_vulnerability,omitempty"`
				RemoveGroup                *bool                                                 `json:"remove_group,omitempty"`
				RemoveProject              *bool                                                 `json:"remove_project,omitempty"`
			} `json:"member_role,omitempty"`
			MembershipState *string `json:"membership_state,omitempty"`
			Name            *string `json:"name,omitempty"`
			Override        *string `json:"override,omitempty"`
			PublicEmail     *string `json:"public_email,omitempty"`
			State           *string `json:"state,omitempty"`
			Username        *string `json:"username,omitempty"`
			WebUrl          *string `json:"web_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdMembersAllResponse(rsp *http.Response) (*GetApiV4GroupsIdMembersAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdMembersAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AccessLevel *string `json:"access_level,omitempty"`
			AvatarPath  *string `json:"avatar_path,omitempty"`
			AvatarUrl   *string `json:"avatar_url,omitempty"`
			CreatedAt   *string `json:"created_at,omitempty"`

			// CreatedBy API_Entities_UserBasic model
			CreatedBy *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"created_by,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Email             *string `json:"email,omitempty"`
			ExpiresAt         *string `json:"expires_at,omitempty"`
			GroupSamlIdentity *struct {
				ExternUid      *string `json:"extern_uid,omitempty"`
				Provider       *string `json:"provider,omitempty"`
				SamlProviderId *string `json:"saml_provider_id,omitempty"`
			} `json:"group_saml_identity,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			IsUsingSeat *string `json:"is_using_seat,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			MemberRole  *struct {
				AdminCicdVariables         *bool                                                   `json:"admin_cicd_variables,omitempty"`
				AdminComplianceFramework   *bool                                                   `json:"admin_compliance_framework,omitempty"`
				AdminGroupMember           *bool                                                   `json:"admin_group_member,omitempty"`
				AdminIntegrations          *bool                                                   `json:"admin_integrations,omitempty"`
				AdminMergeRequest          *bool                                                   `json:"admin_merge_request,omitempty"`
				AdminProtectedBranch       *bool                                                   `json:"admin_protected_branch,omitempty"`
				AdminProtectedEnvironments *bool                                                   `json:"admin_protected_environments,omitempty"`
				AdminPushRules             *bool                                                   `json:"admin_push_rules,omitempty"`
				AdminRunners               *bool                                                   `json:"admin_runners,omitempty"`
				AdminSecurityTesting       *bool                                                   `json:"admin_security_testing,omitempty"`
				AdminTerraformState        *bool                                                   `json:"admin_terraform_state,omitempty"`
				AdminVulnerability         *bool                                                   `json:"admin_vulnerability,omitempty"`
				AdminWebHook               *bool                                                   `json:"admin_web_hook,omitempty"`
				ArchiveProject             *bool                                                   `json:"archive_project,omitempty"`
				BaseAccessLevel            *GetApiV4GroupsIdMembersAll200MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
				Description                *string                                                 `json:"description,omitempty"`
				GroupId                    *int32                                                  `json:"group_id,omitempty"`
				Id                         *int32                                                  `json:"id,omitempty"`
				ManageDeployTokens         *bool                                                   `json:"manage_deploy_tokens,omitempty"`
				ManageGroupAccessTokens    *bool                                                   `json:"manage_group_access_tokens,omitempty"`
				ManageMergeRequestSettings *bool                                                   `json:"manage_merge_request_settings,omitempty"`
				ManageProjectAccessTokens  *bool                                                   `json:"manage_project_access_tokens,omitempty"`
				ManageProtectedTags        *bool                                                   `json:"manage_protected_tags,omitempty"`
				ManageSecurityPolicyLink   *bool                                                   `json:"manage_security_policy_link,omitempty"`
				Name                       *string                                                 `json:"name,omitempty"`
				ReadAdminCicd              *bool                                                   `json:"read_admin_cicd,omitempty"`
				ReadAdminMonitoring        *bool                                                   `json:"read_admin_monitoring,omitempty"`
				ReadAdminSubscription      *bool                                                   `json:"read_admin_subscription,omitempty"`
				ReadAdminUsers             *bool                                                   `json:"read_admin_users,omitempty"`
				ReadCode                   *bool                                                   `json:"read_code,omitempty"`
				ReadComplianceDashboard    *bool                                                   `json:"read_compliance_dashboard,omitempty"`
				ReadCrmContact             *bool                                                   `json:"read_crm_contact,omitempty"`
				ReadDependency             *bool                                                   `json:"read_dependency,omitempty"`
				ReadRunners                *bool                                                   `json:"read_runners,omitempty"`
				ReadVulnerability          *bool                                                   `json:"read_vulnerability,omitempty"`
				RemoveGroup                *bool                                                   `json:"remove_group,omitempty"`
				RemoveProject              *bool                                                   `json:"remove_project,omitempty"`
			} `json:"member_role,omitempty"`
			MembershipState *string `json:"membership_state,omitempty"`
			Name            *string `json:"name,omitempty"`
			Override        *string `json:"override,omitempty"`
			PublicEmail     *string `json:"public_email,omitempty"`
			State           *string `json:"state,omitempty"`
			Username        *string `json:"username,omitempty"`
			WebUrl          *string `json:"web_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdMembersAllUserIdResponse(rsp *http.Response) (*GetApiV4GroupsIdMembersAllUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdMembersAllUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessLevel *string `json:"access_level,omitempty"`
			AvatarPath  *string `json:"avatar_path,omitempty"`
			AvatarUrl   *string `json:"avatar_url,omitempty"`
			CreatedAt   *string `json:"created_at,omitempty"`

			// CreatedBy API_Entities_UserBasic model
			CreatedBy *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"created_by,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Email             *string `json:"email,omitempty"`
			ExpiresAt         *string `json:"expires_at,omitempty"`
			GroupSamlIdentity *struct {
				ExternUid      *string `json:"extern_uid,omitempty"`
				Provider       *string `json:"provider,omitempty"`
				SamlProviderId *string `json:"saml_provider_id,omitempty"`
			} `json:"group_saml_identity,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			IsUsingSeat *string `json:"is_using_seat,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			MemberRole  *struct {
				AdminCicdVariables         *bool                                                         `json:"admin_cicd_variables,omitempty"`
				AdminComplianceFramework   *bool                                                         `json:"admin_compliance_framework,omitempty"`
				AdminGroupMember           *bool                                                         `json:"admin_group_member,omitempty"`
				AdminIntegrations          *bool                                                         `json:"admin_integrations,omitempty"`
				AdminMergeRequest          *bool                                                         `json:"admin_merge_request,omitempty"`
				AdminProtectedBranch       *bool                                                         `json:"admin_protected_branch,omitempty"`
				AdminProtectedEnvironments *bool                                                         `json:"admin_protected_environments,omitempty"`
				AdminPushRules             *bool                                                         `json:"admin_push_rules,omitempty"`
				AdminRunners               *bool                                                         `json:"admin_runners,omitempty"`
				AdminSecurityTesting       *bool                                                         `json:"admin_security_testing,omitempty"`
				AdminTerraformState        *bool                                                         `json:"admin_terraform_state,omitempty"`
				AdminVulnerability         *bool                                                         `json:"admin_vulnerability,omitempty"`
				AdminWebHook               *bool                                                         `json:"admin_web_hook,omitempty"`
				ArchiveProject             *bool                                                         `json:"archive_project,omitempty"`
				BaseAccessLevel            *GetApiV4GroupsIdMembersAllUserId200MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
				Description                *string                                                       `json:"description,omitempty"`
				GroupId                    *int32                                                        `json:"group_id,omitempty"`
				Id                         *int32                                                        `json:"id,omitempty"`
				ManageDeployTokens         *bool                                                         `json:"manage_deploy_tokens,omitempty"`
				ManageGroupAccessTokens    *bool                                                         `json:"manage_group_access_tokens,omitempty"`
				ManageMergeRequestSettings *bool                                                         `json:"manage_merge_request_settings,omitempty"`
				ManageProjectAccessTokens  *bool                                                         `json:"manage_project_access_tokens,omitempty"`
				ManageProtectedTags        *bool                                                         `json:"manage_protected_tags,omitempty"`
				ManageSecurityPolicyLink   *bool                                                         `json:"manage_security_policy_link,omitempty"`
				Name                       *string                                                       `json:"name,omitempty"`
				ReadAdminCicd              *bool                                                         `json:"read_admin_cicd,omitempty"`
				ReadAdminMonitoring        *bool                                                         `json:"read_admin_monitoring,omitempty"`
				ReadAdminSubscription      *bool                                                         `json:"read_admin_subscription,omitempty"`
				ReadAdminUsers             *bool                                                         `json:"read_admin_users,omitempty"`
				ReadCode                   *bool                                                         `json:"read_code,omitempty"`
				ReadComplianceDashboard    *bool                                                         `json:"read_compliance_dashboard,omitempty"`
				ReadCrmContact             *bool                                                         `json:"read_crm_contact,omitempty"`
				ReadDependency             *bool                                                         `json:"read_dependency,omitempty"`
				ReadRunners                *bool                                                         `json:"read_runners,omitempty"`
				ReadVulnerability          *bool                                                         `json:"read_vulnerability,omitempty"`
				RemoveGroup                *bool                                                         `json:"remove_group,omitempty"`
				RemoveProject              *bool                                                         `json:"remove_project,omitempty"`
			} `json:"member_role,omitempty"`
			MembershipState *string `json:"membership_state,omitempty"`
			Name            *string `json:"name,omitempty"`
			Override        *string `json:"override,omitempty"`
			PublicEmail     *string `json:"public_email,omitempty"`
			State           *string `json:"state,omitempty"`
			Username        *string `json:"username,omitempty"`
			WebUrl          *string `json:"web_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdMembersApproveAllResponse(rsp *http.Response) (*PostApiV4GroupsIdMembersApproveAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdMembersApproveAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParsePutApiV4GroupsIdMembersMemberIdApproveResponse(rsp *http.Response) (*PutApiV4GroupsIdMembersMemberIdApproveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdMembersMemberIdApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdMembersUserIdResponse(rsp *http.Response) (*DeleteApiV4GroupsIdMembersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdMembersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdMembersUserIdResponse(rsp *http.Response) (*GetApiV4GroupsIdMembersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdMembersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessLevel *string `json:"access_level,omitempty"`
			AvatarPath  *string `json:"avatar_path,omitempty"`
			AvatarUrl   *string `json:"avatar_url,omitempty"`
			CreatedAt   *string `json:"created_at,omitempty"`

			// CreatedBy API_Entities_UserBasic model
			CreatedBy *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"created_by,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Email             *string `json:"email,omitempty"`
			ExpiresAt         *string `json:"expires_at,omitempty"`
			GroupSamlIdentity *struct {
				ExternUid      *string `json:"extern_uid,omitempty"`
				Provider       *string `json:"provider,omitempty"`
				SamlProviderId *string `json:"saml_provider_id,omitempty"`
			} `json:"group_saml_identity,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			IsUsingSeat *string `json:"is_using_seat,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			MemberRole  *struct {
				AdminCicdVariables         *bool                                                      `json:"admin_cicd_variables,omitempty"`
				AdminComplianceFramework   *bool                                                      `json:"admin_compliance_framework,omitempty"`
				AdminGroupMember           *bool                                                      `json:"admin_group_member,omitempty"`
				AdminIntegrations          *bool                                                      `json:"admin_integrations,omitempty"`
				AdminMergeRequest          *bool                                                      `json:"admin_merge_request,omitempty"`
				AdminProtectedBranch       *bool                                                      `json:"admin_protected_branch,omitempty"`
				AdminProtectedEnvironments *bool                                                      `json:"admin_protected_environments,omitempty"`
				AdminPushRules             *bool                                                      `json:"admin_push_rules,omitempty"`
				AdminRunners               *bool                                                      `json:"admin_runners,omitempty"`
				AdminSecurityTesting       *bool                                                      `json:"admin_security_testing,omitempty"`
				AdminTerraformState        *bool                                                      `json:"admin_terraform_state,omitempty"`
				AdminVulnerability         *bool                                                      `json:"admin_vulnerability,omitempty"`
				AdminWebHook               *bool                                                      `json:"admin_web_hook,omitempty"`
				ArchiveProject             *bool                                                      `json:"archive_project,omitempty"`
				BaseAccessLevel            *GetApiV4GroupsIdMembersUserId200MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
				Description                *string                                                    `json:"description,omitempty"`
				GroupId                    *int32                                                     `json:"group_id,omitempty"`
				Id                         *int32                                                     `json:"id,omitempty"`
				ManageDeployTokens         *bool                                                      `json:"manage_deploy_tokens,omitempty"`
				ManageGroupAccessTokens    *bool                                                      `json:"manage_group_access_tokens,omitempty"`
				ManageMergeRequestSettings *bool                                                      `json:"manage_merge_request_settings,omitempty"`
				ManageProjectAccessTokens  *bool                                                      `json:"manage_project_access_tokens,omitempty"`
				ManageProtectedTags        *bool                                                      `json:"manage_protected_tags,omitempty"`
				ManageSecurityPolicyLink   *bool                                                      `json:"manage_security_policy_link,omitempty"`
				Name                       *string                                                    `json:"name,omitempty"`
				ReadAdminCicd              *bool                                                      `json:"read_admin_cicd,omitempty"`
				ReadAdminMonitoring        *bool                                                      `json:"read_admin_monitoring,omitempty"`
				ReadAdminSubscription      *bool                                                      `json:"read_admin_subscription,omitempty"`
				ReadAdminUsers             *bool                                                      `json:"read_admin_users,omitempty"`
				ReadCode                   *bool                                                      `json:"read_code,omitempty"`
				ReadComplianceDashboard    *bool                                                      `json:"read_compliance_dashboard,omitempty"`
				ReadCrmContact             *bool                                                      `json:"read_crm_contact,omitempty"`
				ReadDependency             *bool                                                      `json:"read_dependency,omitempty"`
				ReadRunners                *bool                                                      `json:"read_runners,omitempty"`
				ReadVulnerability          *bool                                                      `json:"read_vulnerability,omitempty"`
				RemoveGroup                *bool                                                      `json:"remove_group,omitempty"`
				RemoveProject              *bool                                                      `json:"remove_project,omitempty"`
			} `json:"member_role,omitempty"`
			MembershipState *string `json:"membership_state,omitempty"`
			Name            *string `json:"name,omitempty"`
			Override        *string `json:"override,omitempty"`
			PublicEmail     *string `json:"public_email,omitempty"`
			State           *string `json:"state,omitempty"`
			Username        *string `json:"username,omitempty"`
			WebUrl          *string `json:"web_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdMembersUserIdResponse(rsp *http.Response) (*PutApiV4GroupsIdMembersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdMembersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessLevel *string `json:"access_level,omitempty"`
			AvatarPath  *string `json:"avatar_path,omitempty"`
			AvatarUrl   *string `json:"avatar_url,omitempty"`
			CreatedAt   *string `json:"created_at,omitempty"`

			// CreatedBy API_Entities_UserBasic model
			CreatedBy *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"created_by,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Email             *string `json:"email,omitempty"`
			ExpiresAt         *string `json:"expires_at,omitempty"`
			GroupSamlIdentity *struct {
				ExternUid      *string `json:"extern_uid,omitempty"`
				Provider       *string `json:"provider,omitempty"`
				SamlProviderId *string `json:"saml_provider_id,omitempty"`
			} `json:"group_saml_identity,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			IsUsingSeat *string `json:"is_using_seat,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			MemberRole  *struct {
				AdminCicdVariables         *bool                                                      `json:"admin_cicd_variables,omitempty"`
				AdminComplianceFramework   *bool                                                      `json:"admin_compliance_framework,omitempty"`
				AdminGroupMember           *bool                                                      `json:"admin_group_member,omitempty"`
				AdminIntegrations          *bool                                                      `json:"admin_integrations,omitempty"`
				AdminMergeRequest          *bool                                                      `json:"admin_merge_request,omitempty"`
				AdminProtectedBranch       *bool                                                      `json:"admin_protected_branch,omitempty"`
				AdminProtectedEnvironments *bool                                                      `json:"admin_protected_environments,omitempty"`
				AdminPushRules             *bool                                                      `json:"admin_push_rules,omitempty"`
				AdminRunners               *bool                                                      `json:"admin_runners,omitempty"`
				AdminSecurityTesting       *bool                                                      `json:"admin_security_testing,omitempty"`
				AdminTerraformState        *bool                                                      `json:"admin_terraform_state,omitempty"`
				AdminVulnerability         *bool                                                      `json:"admin_vulnerability,omitempty"`
				AdminWebHook               *bool                                                      `json:"admin_web_hook,omitempty"`
				ArchiveProject             *bool                                                      `json:"archive_project,omitempty"`
				BaseAccessLevel            *PutApiV4GroupsIdMembersUserId200MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
				Description                *string                                                    `json:"description,omitempty"`
				GroupId                    *int32                                                     `json:"group_id,omitempty"`
				Id                         *int32                                                     `json:"id,omitempty"`
				ManageDeployTokens         *bool                                                      `json:"manage_deploy_tokens,omitempty"`
				ManageGroupAccessTokens    *bool                                                      `json:"manage_group_access_tokens,omitempty"`
				ManageMergeRequestSettings *bool                                                      `json:"manage_merge_request_settings,omitempty"`
				ManageProjectAccessTokens  *bool                                                      `json:"manage_project_access_tokens,omitempty"`
				ManageProtectedTags        *bool                                                      `json:"manage_protected_tags,omitempty"`
				ManageSecurityPolicyLink   *bool                                                      `json:"manage_security_policy_link,omitempty"`
				Name                       *string                                                    `json:"name,omitempty"`
				ReadAdminCicd              *bool                                                      `json:"read_admin_cicd,omitempty"`
				ReadAdminMonitoring        *bool                                                      `json:"read_admin_monitoring,omitempty"`
				ReadAdminSubscription      *bool                                                      `json:"read_admin_subscription,omitempty"`
				ReadAdminUsers             *bool                                                      `json:"read_admin_users,omitempty"`
				ReadCode                   *bool                                                      `json:"read_code,omitempty"`
				ReadComplianceDashboard    *bool                                                      `json:"read_compliance_dashboard,omitempty"`
				ReadCrmContact             *bool                                                      `json:"read_crm_contact,omitempty"`
				ReadDependency             *bool                                                      `json:"read_dependency,omitempty"`
				ReadRunners                *bool                                                      `json:"read_runners,omitempty"`
				ReadVulnerability          *bool                                                      `json:"read_vulnerability,omitempty"`
				RemoveGroup                *bool                                                      `json:"remove_group,omitempty"`
				RemoveProject              *bool                                                      `json:"remove_project,omitempty"`
			} `json:"member_role,omitempty"`
			MembershipState *string `json:"membership_state,omitempty"`
			Name            *string `json:"name,omitempty"`
			Override        *string `json:"override,omitempty"`
			PublicEmail     *string `json:"public_email,omitempty"`
			State           *string `json:"state,omitempty"`
			Username        *string `json:"username,omitempty"`
			WebUrl          *string `json:"web_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdMembersUserIdOverrideResponse(rsp *http.Response) (*DeleteApiV4GroupsIdMembersUserIdOverrideResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdMembersUserIdOverrideResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessLevel *string `json:"access_level,omitempty"`
			AvatarPath  *string `json:"avatar_path,omitempty"`
			AvatarUrl   *string `json:"avatar_url,omitempty"`
			CreatedAt   *string `json:"created_at,omitempty"`

			// CreatedBy API_Entities_UserBasic model
			CreatedBy *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"created_by,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Email             *string `json:"email,omitempty"`
			ExpiresAt         *string `json:"expires_at,omitempty"`
			GroupSamlIdentity *struct {
				ExternUid      *string `json:"extern_uid,omitempty"`
				Provider       *string `json:"provider,omitempty"`
				SamlProviderId *string `json:"saml_provider_id,omitempty"`
			} `json:"group_saml_identity,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			IsUsingSeat *string `json:"is_using_seat,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			MemberRole  *struct {
				AdminCicdVariables         *bool                                                                 `json:"admin_cicd_variables,omitempty"`
				AdminComplianceFramework   *bool                                                                 `json:"admin_compliance_framework,omitempty"`
				AdminGroupMember           *bool                                                                 `json:"admin_group_member,omitempty"`
				AdminIntegrations          *bool                                                                 `json:"admin_integrations,omitempty"`
				AdminMergeRequest          *bool                                                                 `json:"admin_merge_request,omitempty"`
				AdminProtectedBranch       *bool                                                                 `json:"admin_protected_branch,omitempty"`
				AdminProtectedEnvironments *bool                                                                 `json:"admin_protected_environments,omitempty"`
				AdminPushRules             *bool                                                                 `json:"admin_push_rules,omitempty"`
				AdminRunners               *bool                                                                 `json:"admin_runners,omitempty"`
				AdminSecurityTesting       *bool                                                                 `json:"admin_security_testing,omitempty"`
				AdminTerraformState        *bool                                                                 `json:"admin_terraform_state,omitempty"`
				AdminVulnerability         *bool                                                                 `json:"admin_vulnerability,omitempty"`
				AdminWebHook               *bool                                                                 `json:"admin_web_hook,omitempty"`
				ArchiveProject             *bool                                                                 `json:"archive_project,omitempty"`
				BaseAccessLevel            *DeleteApiV4GroupsIdMembersUserIdOverride200MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
				Description                *string                                                               `json:"description,omitempty"`
				GroupId                    *int32                                                                `json:"group_id,omitempty"`
				Id                         *int32                                                                `json:"id,omitempty"`
				ManageDeployTokens         *bool                                                                 `json:"manage_deploy_tokens,omitempty"`
				ManageGroupAccessTokens    *bool                                                                 `json:"manage_group_access_tokens,omitempty"`
				ManageMergeRequestSettings *bool                                                                 `json:"manage_merge_request_settings,omitempty"`
				ManageProjectAccessTokens  *bool                                                                 `json:"manage_project_access_tokens,omitempty"`
				ManageProtectedTags        *bool                                                                 `json:"manage_protected_tags,omitempty"`
				ManageSecurityPolicyLink   *bool                                                                 `json:"manage_security_policy_link,omitempty"`
				Name                       *string                                                               `json:"name,omitempty"`
				ReadAdminCicd              *bool                                                                 `json:"read_admin_cicd,omitempty"`
				ReadAdminMonitoring        *bool                                                                 `json:"read_admin_monitoring,omitempty"`
				ReadAdminSubscription      *bool                                                                 `json:"read_admin_subscription,omitempty"`
				ReadAdminUsers             *bool                                                                 `json:"read_admin_users,omitempty"`
				ReadCode                   *bool                                                                 `json:"read_code,omitempty"`
				ReadComplianceDashboard    *bool                                                                 `json:"read_compliance_dashboard,omitempty"`
				ReadCrmContact             *bool                                                                 `json:"read_crm_contact,omitempty"`
				ReadDependency             *bool                                                                 `json:"read_dependency,omitempty"`
				ReadRunners                *bool                                                                 `json:"read_runners,omitempty"`
				ReadVulnerability          *bool                                                                 `json:"read_vulnerability,omitempty"`
				RemoveGroup                *bool                                                                 `json:"remove_group,omitempty"`
				RemoveProject              *bool                                                                 `json:"remove_project,omitempty"`
			} `json:"member_role,omitempty"`
			MembershipState *string `json:"membership_state,omitempty"`
			Name            *string `json:"name,omitempty"`
			Override        *string `json:"override,omitempty"`
			PublicEmail     *string `json:"public_email,omitempty"`
			State           *string `json:"state,omitempty"`
			Username        *string `json:"username,omitempty"`
			WebUrl          *string `json:"web_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdMembersUserIdOverrideResponse(rsp *http.Response) (*PostApiV4GroupsIdMembersUserIdOverrideResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdMembersUserIdOverrideResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			AccessLevel *string `json:"access_level,omitempty"`
			AvatarPath  *string `json:"avatar_path,omitempty"`
			AvatarUrl   *string `json:"avatar_url,omitempty"`
			CreatedAt   *string `json:"created_at,omitempty"`

			// CreatedBy API_Entities_UserBasic model
			CreatedBy *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"created_by,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Email             *string `json:"email,omitempty"`
			ExpiresAt         *string `json:"expires_at,omitempty"`
			GroupSamlIdentity *struct {
				ExternUid      *string `json:"extern_uid,omitempty"`
				Provider       *string `json:"provider,omitempty"`
				SamlProviderId *string `json:"saml_provider_id,omitempty"`
			} `json:"group_saml_identity,omitempty"`
			Id          *int32  `json:"id,omitempty"`
			IsUsingSeat *string `json:"is_using_seat,omitempty"`
			Locked      *bool   `json:"locked,omitempty"`
			MemberRole  *struct {
				AdminCicdVariables         *bool                                                               `json:"admin_cicd_variables,omitempty"`
				AdminComplianceFramework   *bool                                                               `json:"admin_compliance_framework,omitempty"`
				AdminGroupMember           *bool                                                               `json:"admin_group_member,omitempty"`
				AdminIntegrations          *bool                                                               `json:"admin_integrations,omitempty"`
				AdminMergeRequest          *bool                                                               `json:"admin_merge_request,omitempty"`
				AdminProtectedBranch       *bool                                                               `json:"admin_protected_branch,omitempty"`
				AdminProtectedEnvironments *bool                                                               `json:"admin_protected_environments,omitempty"`
				AdminPushRules             *bool                                                               `json:"admin_push_rules,omitempty"`
				AdminRunners               *bool                                                               `json:"admin_runners,omitempty"`
				AdminSecurityTesting       *bool                                                               `json:"admin_security_testing,omitempty"`
				AdminTerraformState        *bool                                                               `json:"admin_terraform_state,omitempty"`
				AdminVulnerability         *bool                                                               `json:"admin_vulnerability,omitempty"`
				AdminWebHook               *bool                                                               `json:"admin_web_hook,omitempty"`
				ArchiveProject             *bool                                                               `json:"archive_project,omitempty"`
				BaseAccessLevel            *PostApiV4GroupsIdMembersUserIdOverride201MemberRoleBaseAccessLevel `json:"base_access_level,omitempty"`
				Description                *string                                                             `json:"description,omitempty"`
				GroupId                    *int32                                                              `json:"group_id,omitempty"`
				Id                         *int32                                                              `json:"id,omitempty"`
				ManageDeployTokens         *bool                                                               `json:"manage_deploy_tokens,omitempty"`
				ManageGroupAccessTokens    *bool                                                               `json:"manage_group_access_tokens,omitempty"`
				ManageMergeRequestSettings *bool                                                               `json:"manage_merge_request_settings,omitempty"`
				ManageProjectAccessTokens  *bool                                                               `json:"manage_project_access_tokens,omitempty"`
				ManageProtectedTags        *bool                                                               `json:"manage_protected_tags,omitempty"`
				ManageSecurityPolicyLink   *bool                                                               `json:"manage_security_policy_link,omitempty"`
				Name                       *string                                                             `json:"name,omitempty"`
				ReadAdminCicd              *bool                                                               `json:"read_admin_cicd,omitempty"`
				ReadAdminMonitoring        *bool                                                               `json:"read_admin_monitoring,omitempty"`
				ReadAdminSubscription      *bool                                                               `json:"read_admin_subscription,omitempty"`
				ReadAdminUsers             *bool                                                               `json:"read_admin_users,omitempty"`
				ReadCode                   *bool                                                               `json:"read_code,omitempty"`
				ReadComplianceDashboard    *bool                                                               `json:"read_compliance_dashboard,omitempty"`
				ReadCrmContact             *bool                                                               `json:"read_crm_contact,omitempty"`
				ReadDependency             *bool                                                               `json:"read_dependency,omitempty"`
				ReadRunners                *bool                                                               `json:"read_runners,omitempty"`
				ReadVulnerability          *bool                                                               `json:"read_vulnerability,omitempty"`
				RemoveGroup                *bool                                                               `json:"remove_group,omitempty"`
				RemoveProject              *bool                                                               `json:"remove_project,omitempty"`
			} `json:"member_role,omitempty"`
			MembershipState *string `json:"membership_state,omitempty"`
			Name            *string `json:"name,omitempty"`
			Override        *string `json:"override,omitempty"`
			PublicEmail     *string `json:"public_email,omitempty"`
			State           *string `json:"state,omitempty"`
			Username        *string `json:"username,omitempty"`
			WebUrl          *string `json:"web_url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdMembersUserIdStateResponse(rsp *http.Response) (*PutApiV4GroupsIdMembersUserIdStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdMembersUserIdStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdMergeRequestsResponse(rsp *http.Response) (*GetApiV4GroupsIdMergeRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdMergeRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AllowCollaboration    *string `json:"allow_collaboration,omitempty"`
			AllowMaintainerToPush *string `json:"allow_maintainer_to_push,omitempty"`
			ApprovalsBeforeMerge  *string `json:"approvals_before_merge,omitempty"`

			// Assignee API_Entities_UserBasic model
			Assignee *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"assignee,omitempty"`

			// Assignees API_Entities_UserBasic model
			Assignees *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"assignees,omitempty"`

			// Author API_Entities_UserBasic model
			Author *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"author,omitempty"`
			BlockingDiscussionsResolved *string `json:"blocking_discussions_resolved,omitempty"`
			ClosedAt                    *string `json:"closed_at,omitempty"`

			// ClosedBy API_Entities_UserBasic model
			ClosedBy *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"closed_by,omitempty"`
			CreatedAt               *time.Time `json:"created_at,omitempty"`
			Description             *string    `json:"description,omitempty"`
			DescriptionHtml         *string    `json:"description_html,omitempty"`
			DetailedMergeStatus     *string    `json:"detailed_merge_status,omitempty"`
			DiscussionLocked        *string    `json:"discussion_locked,omitempty"`
			Downvotes               *string    `json:"downvotes,omitempty"`
			Draft                   *string    `json:"draft,omitempty"`
			ForceRemoveSourceBranch *string    `json:"force_remove_source_branch,omitempty"`
			HasConflicts            *string    `json:"has_conflicts,omitempty"`
			Id                      *int32     `json:"id,omitempty"`
			Iid                     *int32     `json:"iid,omitempty"`
			Imported                *string    `json:"imported,omitempty"`
			ImportedFrom            *string    `json:"imported_from,omitempty"`
			Labels                  *string    `json:"labels,omitempty"`
			MergeAfter              *string    `json:"merge_after,omitempty"`
			MergeCommitSha          *string    `json:"merge_commit_sha,omitempty"`
			MergeStatus             *string    `json:"merge_status,omitempty"`

			// MergeUser API_Entities_UserBasic model
			MergeUser *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"merge_user,omitempty"`
			MergeWhenPipelineSucceeds *string `json:"merge_when_pipeline_succeeds,omitempty"`
			MergedAt                  *string `json:"merged_at,omitempty"`

			// MergedBy API_Entities_UserBasic model
			MergedBy *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"merged_by,omitempty"`
			Milestone *struct {
				CreatedAt   *string `json:"created_at,omitempty"`
				Description *string `json:"description,omitempty"`
				DueDate     *string `json:"due_date,omitempty"`
				Expired     *string `json:"expired,omitempty"`
				GroupId     *string `json:"group_id,omitempty"`
				Id          *string `json:"id,omitempty"`
				Iid         *string `json:"iid,omitempty"`
				ProjectId   *string `json:"project_id,omitempty"`
				StartDate   *string `json:"start_date,omitempty"`
				State       *string `json:"state,omitempty"`
				Title       *string `json:"title,omitempty"`
				UpdatedAt   *string `json:"updated_at,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"milestone,omitempty"`
			PreparedAt *string `json:"prepared_at,omitempty"`
			ProjectId  *int32  `json:"project_id,omitempty"`
			Reference  *string `json:"reference,omitempty"`
			References *struct {
				Full     *string `json:"full,omitempty"`
				Relative *string `json:"relative,omitempty"`
				Short    *string `json:"short,omitempty"`
			} `json:"references,omitempty"`

			// Reviewers API_Entities_UserBasic model
			Reviewers *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"reviewers,omitempty"`
			Sha                      *string `json:"sha,omitempty"`
			ShouldRemoveSourceBranch *string `json:"should_remove_source_branch,omitempty"`
			SourceBranch             *string `json:"source_branch,omitempty"`
			SourceProjectId          *string `json:"source_project_id,omitempty"`
			Squash                   *string `json:"squash,omitempty"`
			SquashCommitSha          *string `json:"squash_commit_sha,omitempty"`
			SquashOnMerge            *string `json:"squash_on_merge,omitempty"`
			State                    *string `json:"state,omitempty"`
			TargetBranch             *string `json:"target_branch,omitempty"`
			TargetProjectId          *string `json:"target_project_id,omitempty"`
			TaskCompletionStatus     *string `json:"task_completion_status,omitempty"`

			// TimeStats API_Entities_IssuableTimeStats model
			TimeStats *struct {
				HumanTimeEstimate   *string `json:"human_time_estimate,omitempty"`
				HumanTotalTimeSpent *string `json:"human_total_time_spent,omitempty"`
				TimeEstimate        *int32  `json:"time_estimate,omitempty"`
				TotalTimeSpent      *int32  `json:"total_time_spent,omitempty"`
			} `json:"time_stats,omitempty"`
			Title          *string    `json:"title,omitempty"`
			TitleHtml      *string    `json:"title_html,omitempty"`
			UpdatedAt      *time.Time `json:"updated_at,omitempty"`
			Upvotes        *string    `json:"upvotes,omitempty"`
			UserNotesCount *string    `json:"user_notes_count,omitempty"`
			WebUrl         *string    `json:"web_url,omitempty"`
			WorkInProgress *string    `json:"work_in_progress,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdPackagesResponse(rsp *http.Response) (*GetApiV4GroupsIdPackagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPackagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Links *struct {
				DeleteApiPath *string `json:"delete_api_path,omitempty"`
				WebPath       *string `json:"web_path,omitempty"`
			} `json:"_links,omitempty"`
			ConanPackageName *string    `json:"conan_package_name,omitempty"`
			CreatedAt        *time.Time `json:"created_at,omitempty"`
			Id               *int32     `json:"id,omitempty"`
			LastDownloadedAt *time.Time `json:"last_downloaded_at,omitempty"`
			Name             *string    `json:"name,omitempty"`
			PackageType      *string    `json:"package_type,omitempty"`

			// Pipeline API_Entities_Package_Pipeline model
			Pipeline *struct {
				CreatedAt *time.Time `json:"created_at,omitempty"`
				Id        *int32     `json:"id,omitempty"`
				Iid       *int32     `json:"iid,omitempty"`
				ProjectId *int32     `json:"project_id,omitempty"`
				Ref       *string    `json:"ref,omitempty"`
				Sha       *string    `json:"sha,omitempty"`
				Source    *string    `json:"source,omitempty"`
				Status    *string    `json:"status,omitempty"`
				UpdatedAt *time.Time `json:"updated_at,omitempty"`

				// User API_Entities_UserBasic model
				User *struct {
					AvatarPath       *string `json:"avatar_path,omitempty"`
					AvatarUrl        *string `json:"avatar_url,omitempty"`
					CustomAttributes *[]struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"custom_attributes,omitempty"`
					Id          *int32  `json:"id,omitempty"`
					Locked      *bool   `json:"locked,omitempty"`
					Name        *string `json:"name,omitempty"`
					PublicEmail *string `json:"public_email,omitempty"`
					State       *string `json:"state,omitempty"`
					Username    *string `json:"username,omitempty"`
					WebUrl      *string `json:"web_url,omitempty"`
				} `json:"user,omitempty"`
				WebUrl *string `json:"web_url,omitempty"`
			} `json:"pipeline,omitempty"`

			// Pipelines API_Entities_Package_Pipeline model
			Pipelines *struct {
				CreatedAt *time.Time `json:"created_at,omitempty"`
				Id        *int32     `json:"id,omitempty"`
				Iid       *int32     `json:"iid,omitempty"`
				ProjectId *int32     `json:"project_id,omitempty"`
				Ref       *string    `json:"ref,omitempty"`
				Sha       *string    `json:"sha,omitempty"`
				Source    *string    `json:"source,omitempty"`
				Status    *string    `json:"status,omitempty"`
				UpdatedAt *time.Time `json:"updated_at,omitempty"`

				// User API_Entities_UserBasic model
				User *struct {
					AvatarPath       *string `json:"avatar_path,omitempty"`
					AvatarUrl        *string `json:"avatar_url,omitempty"`
					CustomAttributes *[]struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"custom_attributes,omitempty"`
					Id          *int32  `json:"id,omitempty"`
					Locked      *bool   `json:"locked,omitempty"`
					Name        *string `json:"name,omitempty"`
					PublicEmail *string `json:"public_email,omitempty"`
					State       *string `json:"state,omitempty"`
					Username    *string `json:"username,omitempty"`
					WebUrl      *string `json:"web_url,omitempty"`
				} `json:"user,omitempty"`
				WebUrl *string `json:"web_url,omitempty"`
			} `json:"pipelines,omitempty"`
			ProjectId   *int32  `json:"project_id,omitempty"`
			ProjectPath *string `json:"project_path,omitempty"`
			Status      *string `json:"status,omitempty"`
			Tags        *string `json:"tags,omitempty"`
			Version     *string `json:"version,omitempty"`
			Versions    *struct {
				CreatedAt *string `json:"created_at,omitempty"`
				Id        *string `json:"id,omitempty"`

				// Pipeline API_Entities_Package_Pipeline model
				Pipeline *struct {
					CreatedAt *time.Time `json:"created_at,omitempty"`
					Id        *int32     `json:"id,omitempty"`
					Iid       *int32     `json:"iid,omitempty"`
					ProjectId *int32     `json:"project_id,omitempty"`
					Ref       *string    `json:"ref,omitempty"`
					Sha       *string    `json:"sha,omitempty"`
					Source    *string    `json:"source,omitempty"`
					Status    *string    `json:"status,omitempty"`
					UpdatedAt *time.Time `json:"updated_at,omitempty"`

					// User API_Entities_UserBasic model
					User *struct {
						AvatarPath       *string `json:"avatar_path,omitempty"`
						AvatarUrl        *string `json:"avatar_url,omitempty"`
						CustomAttributes *[]struct {
							Key   *string `json:"key,omitempty"`
							Value *string `json:"value,omitempty"`
						} `json:"custom_attributes,omitempty"`
						Id          *int32  `json:"id,omitempty"`
						Locked      *bool   `json:"locked,omitempty"`
						Name        *string `json:"name,omitempty"`
						PublicEmail *string `json:"public_email,omitempty"`
						State       *string `json:"state,omitempty"`
						Username    *string `json:"username,omitempty"`
						WebUrl      *string `json:"web_url,omitempty"`
					} `json:"user,omitempty"`
					WebUrl *string `json:"web_url,omitempty"`
				} `json:"pipeline,omitempty"`
				Tags    *string `json:"tags,omitempty"`
				Version *string `json:"version,omitempty"`
			} `json:"versions,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdPendingMembersResponse(rsp *http.Response) (*GetApiV4GroupsIdPendingMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPendingMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdPlaceholderReassignmentsResponse(rsp *http.Response) (*GetApiV4GroupsIdPlaceholderReassignmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdPlaceholderReassignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParsePostApiV4GroupsIdPlaceholderReassignmentsResponse(rsp *http.Response) (*PostApiV4GroupsIdPlaceholderReassignmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdPlaceholderReassignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParsePostApiV4GroupsIdPlaceholderReassignmentsAuthorizeResponse(rsp *http.Response) (*PostApiV4GroupsIdPlaceholderReassignmentsAuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdPlaceholderReassignmentsAuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdProjectsResponse(rsp *http.Response) (*GetApiV4GroupsIdProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Links *struct {
				ClusterAgents *string `json:"cluster_agents,omitempty"`
				Events        *string `json:"events,omitempty"`
				Issues        *string `json:"issues,omitempty"`
				Labels        *string `json:"labels,omitempty"`
				Members       *string `json:"members,omitempty"`
				MergeRequests *string `json:"merge_requests,omitempty"`
				RepoBranches  *string `json:"repo_branches,omitempty"`
				Self          *string `json:"self,omitempty"`
			} `json:"_links,omitempty"`
			AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
			AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
			AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
			ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
			Archived                                 *bool     `json:"archived,omitempty"`
			AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
			AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
			AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
			AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
			AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
			AvatarUrl                                *string   `json:"avatar_url,omitempty"`
			BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
			BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
			BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
			CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
			CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
			CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
			CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
			CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
			CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
			CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
			CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
			CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
			CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
			CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
			CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
			CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
			ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
			ContainerExpirationPolicy                *struct {
				Cadence       *string `json:"cadence,omitempty"`
				Enabled       *string `json:"enabled,omitempty"`
				KeepN         *string `json:"keep_n,omitempty"`
				NameRegex     *string `json:"name_regex,omitempty"`
				NameRegexKeep *string `json:"name_regex_keep,omitempty"`
				NextRunAt     *string `json:"next_run_at,omitempty"`
				OlderThan     *string `json:"older_than,omitempty"`
			} `json:"container_expiration_policy,omitempty"`
			ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
			ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
			ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
			CreatedAt                    *time.Time `json:"created_at,omitempty"`
			CreatorId                    *int32     `json:"creator_id,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                            *string `json:"default_branch,omitempty"`
			Description                              *string `json:"description,omitempty"`
			DescriptionHtml                          *string `json:"description_html,omitempty"`
			EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
			EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
			EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
			EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
			ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
			FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

			// ForkedFromProject API_Entities_BasicProjectDetails model
			ForkedFromProject *struct {
				AvatarUrl *string    `json:"avatar_url,omitempty"`
				CreatedAt *time.Time `json:"created_at,omitempty"`

				// CustomAttributes API_Entities_CustomAttribute model
				CustomAttributes *struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				DefaultBranch  *string    `json:"default_branch,omitempty"`
				Description    *string    `json:"description,omitempty"`
				ForksCount     *int32     `json:"forks_count,omitempty"`
				HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
				Id             *int32     `json:"id,omitempty"`
				LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
				License        *struct {
					HtmlUrl   *string `json:"html_url,omitempty"`
					Key       *string `json:"key,omitempty"`
					Name      *string `json:"name,omitempty"`
					Nickname  *string `json:"nickname,omitempty"`
					SourceUrl *string `json:"source_url,omitempty"`
				} `json:"license,omitempty"`
				LicenseUrl        *string `json:"license_url,omitempty"`
				Name              *string `json:"name,omitempty"`
				NameWithNamespace *string `json:"name_with_namespace,omitempty"`
				Namespace         *struct {
					AvatarUrl *string `json:"avatar_url,omitempty"`
					FullPath  *string `json:"full_path,omitempty"`
					Id        *int32  `json:"id,omitempty"`
					Kind      *string `json:"kind,omitempty"`
					Name      *string `json:"name,omitempty"`
					ParentId  *int32  `json:"parent_id,omitempty"`
					Path      *string `json:"path,omitempty"`
					WebUrl    *string `json:"web_url,omitempty"`
				} `json:"namespace,omitempty"`
				Path              *string   `json:"path,omitempty"`
				PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
				ReadmeUrl         *string   `json:"readme_url,omitempty"`
				RepositoryStorage *string   `json:"repository_storage,omitempty"`
				SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
				StarCount         *int32    `json:"star_count,omitempty"`
				TagList           *[]string `json:"tag_list,omitempty"`
				Topics            *[]string `json:"topics,omitempty"`
				WebUrl            *string   `json:"web_url,omitempty"`
			} `json:"forked_from_project,omitempty"`
			ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
			ForksCount                *int32     `json:"forks_count,omitempty"`
			GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
			HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
			Id                        *int32     `json:"id,omitempty"`
			ImportError               *string    `json:"import_error,omitempty"`
			ImportStatus              *string    `json:"import_status,omitempty"`
			ImportType                *string    `json:"import_type,omitempty"`
			ImportUrl                 *string    `json:"import_url,omitempty"`
			InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
			IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
			IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
			IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
			IssuesTemplate            *string    `json:"issues_template,omitempty"`
			JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
			KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
			LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
			LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
			License                   *struct {
				HtmlUrl   *string `json:"html_url,omitempty"`
				Key       *string `json:"key,omitempty"`
				Name      *string `json:"name,omitempty"`
				Nickname  *string `json:"nickname,omitempty"`
				SourceUrl *string `json:"source_url,omitempty"`
			} `json:"license,omitempty"`
			LicenseUrl                       *string `json:"license_url,omitempty"`
			MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
			MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
			MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
			MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
			MergeMethod                      *string `json:"merge_method,omitempty"`
			MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
			MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
			MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
			MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
			MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
			MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
			MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
			Mirror                           *string `json:"mirror,omitempty"`
			MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
			MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
			MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
			ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
			ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
			MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
			MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
			Name                             *string `json:"name,omitempty"`
			NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
			Namespace                        *struct {
				AvatarUrl *string `json:"avatar_url,omitempty"`
				FullPath  *string `json:"full_path,omitempty"`
				Id        *int32  `json:"id,omitempty"`
				Kind      *string `json:"kind,omitempty"`
				Name      *string `json:"name,omitempty"`
				ParentId  *int32  `json:"parent_id,omitempty"`
				Path      *string `json:"path,omitempty"`
				WebUrl    *string `json:"web_url,omitempty"`
			} `json:"namespace,omitempty"`
			OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
			OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
			OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
			OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
			OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

			// Owner API_Entities_UserBasic model
			Owner *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"owner,omitempty"`
			PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
			PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
			Path                             *string   `json:"path,omitempty"`
			PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
			PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
			PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
			PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
			PublicJobs                       *bool     `json:"public_jobs,omitempty"`
			ReadmeUrl                        *string   `json:"readme_url,omitempty"`
			ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
			RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
			RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
			RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
			RepositoryStorage                *string   `json:"repository_storage,omitempty"`
			RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
			RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
			RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
			ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
			RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
			RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
			RunnersToken                     *string   `json:"runners_token,omitempty"`
			SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
			SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
			SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
			ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
			ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
			SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
			SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
			SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
			SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
			SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
			SquashOption                     *string   `json:"squash_option,omitempty"`
			SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
			StarCount                        *int32    `json:"star_count,omitempty"`
			Statistics                       *struct {
				CommitCount           *string `json:"commit_count,omitempty"`
				ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
			TagList                                *[]string  `json:"tag_list,omitempty"`
			Topics                                 *[]string  `json:"topics,omitempty"`
			UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
			Visibility                             *string    `json:"visibility,omitempty"`
			WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
			WebUrl                                 *string    `json:"web_url,omitempty"`
			WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
			WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdProjectsSharedResponse(rsp *http.Response) (*GetApiV4GroupsIdProjectsSharedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdProjectsSharedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Links *struct {
				ClusterAgents *string `json:"cluster_agents,omitempty"`
				Events        *string `json:"events,omitempty"`
				Issues        *string `json:"issues,omitempty"`
				Labels        *string `json:"labels,omitempty"`
				Members       *string `json:"members,omitempty"`
				MergeRequests *string `json:"merge_requests,omitempty"`
				RepoBranches  *string `json:"repo_branches,omitempty"`
				Self          *string `json:"self,omitempty"`
			} `json:"_links,omitempty"`
			AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
			AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
			AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
			ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
			Archived                                 *bool     `json:"archived,omitempty"`
			AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
			AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
			AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
			AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
			AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
			AvatarUrl                                *string   `json:"avatar_url,omitempty"`
			BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
			BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
			BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
			CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
			CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
			CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
			CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
			CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
			CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
			CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
			CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
			CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
			CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
			CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
			CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
			CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
			ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
			ContainerExpirationPolicy                *struct {
				Cadence       *string `json:"cadence,omitempty"`
				Enabled       *string `json:"enabled,omitempty"`
				KeepN         *string `json:"keep_n,omitempty"`
				NameRegex     *string `json:"name_regex,omitempty"`
				NameRegexKeep *string `json:"name_regex_keep,omitempty"`
				NextRunAt     *string `json:"next_run_at,omitempty"`
				OlderThan     *string `json:"older_than,omitempty"`
			} `json:"container_expiration_policy,omitempty"`
			ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
			ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
			ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
			CreatedAt                    *time.Time `json:"created_at,omitempty"`
			CreatorId                    *int32     `json:"creator_id,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                            *string `json:"default_branch,omitempty"`
			Description                              *string `json:"description,omitempty"`
			DescriptionHtml                          *string `json:"description_html,omitempty"`
			EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
			EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
			EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
			EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
			ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
			FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

			// ForkedFromProject API_Entities_BasicProjectDetails model
			ForkedFromProject *struct {
				AvatarUrl *string    `json:"avatar_url,omitempty"`
				CreatedAt *time.Time `json:"created_at,omitempty"`

				// CustomAttributes API_Entities_CustomAttribute model
				CustomAttributes *struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				DefaultBranch  *string    `json:"default_branch,omitempty"`
				Description    *string    `json:"description,omitempty"`
				ForksCount     *int32     `json:"forks_count,omitempty"`
				HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
				Id             *int32     `json:"id,omitempty"`
				LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
				License        *struct {
					HtmlUrl   *string `json:"html_url,omitempty"`
					Key       *string `json:"key,omitempty"`
					Name      *string `json:"name,omitempty"`
					Nickname  *string `json:"nickname,omitempty"`
					SourceUrl *string `json:"source_url,omitempty"`
				} `json:"license,omitempty"`
				LicenseUrl        *string `json:"license_url,omitempty"`
				Name              *string `json:"name,omitempty"`
				NameWithNamespace *string `json:"name_with_namespace,omitempty"`
				Namespace         *struct {
					AvatarUrl *string `json:"avatar_url,omitempty"`
					FullPath  *string `json:"full_path,omitempty"`
					Id        *int32  `json:"id,omitempty"`
					Kind      *string `json:"kind,omitempty"`
					Name      *string `json:"name,omitempty"`
					ParentId  *int32  `json:"parent_id,omitempty"`
					Path      *string `json:"path,omitempty"`
					WebUrl    *string `json:"web_url,omitempty"`
				} `json:"namespace,omitempty"`
				Path              *string   `json:"path,omitempty"`
				PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
				ReadmeUrl         *string   `json:"readme_url,omitempty"`
				RepositoryStorage *string   `json:"repository_storage,omitempty"`
				SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
				StarCount         *int32    `json:"star_count,omitempty"`
				TagList           *[]string `json:"tag_list,omitempty"`
				Topics            *[]string `json:"topics,omitempty"`
				WebUrl            *string   `json:"web_url,omitempty"`
			} `json:"forked_from_project,omitempty"`
			ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
			ForksCount                *int32     `json:"forks_count,omitempty"`
			GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
			HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
			Id                        *int32     `json:"id,omitempty"`
			ImportError               *string    `json:"import_error,omitempty"`
			ImportStatus              *string    `json:"import_status,omitempty"`
			ImportType                *string    `json:"import_type,omitempty"`
			ImportUrl                 *string    `json:"import_url,omitempty"`
			InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
			IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
			IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
			IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
			IssuesTemplate            *string    `json:"issues_template,omitempty"`
			JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
			KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
			LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
			LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
			License                   *struct {
				HtmlUrl   *string `json:"html_url,omitempty"`
				Key       *string `json:"key,omitempty"`
				Name      *string `json:"name,omitempty"`
				Nickname  *string `json:"nickname,omitempty"`
				SourceUrl *string `json:"source_url,omitempty"`
			} `json:"license,omitempty"`
			LicenseUrl                       *string `json:"license_url,omitempty"`
			MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
			MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
			MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
			MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
			MergeMethod                      *string `json:"merge_method,omitempty"`
			MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
			MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
			MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
			MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
			MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
			MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
			MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
			Mirror                           *string `json:"mirror,omitempty"`
			MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
			MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
			MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
			ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
			ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
			MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
			MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
			Name                             *string `json:"name,omitempty"`
			NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
			Namespace                        *struct {
				AvatarUrl *string `json:"avatar_url,omitempty"`
				FullPath  *string `json:"full_path,omitempty"`
				Id        *int32  `json:"id,omitempty"`
				Kind      *string `json:"kind,omitempty"`
				Name      *string `json:"name,omitempty"`
				ParentId  *int32  `json:"parent_id,omitempty"`
				Path      *string `json:"path,omitempty"`
				WebUrl    *string `json:"web_url,omitempty"`
			} `json:"namespace,omitempty"`
			OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
			OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
			OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
			OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
			OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

			// Owner API_Entities_UserBasic model
			Owner *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"owner,omitempty"`
			PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
			PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
			Path                             *string   `json:"path,omitempty"`
			PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
			PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
			PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
			PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
			PublicJobs                       *bool     `json:"public_jobs,omitempty"`
			ReadmeUrl                        *string   `json:"readme_url,omitempty"`
			ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
			RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
			RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
			RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
			RepositoryStorage                *string   `json:"repository_storage,omitempty"`
			RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
			RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
			RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
			ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
			RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
			RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
			RunnersToken                     *string   `json:"runners_token,omitempty"`
			SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
			SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
			SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
			ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
			ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
			SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
			SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
			SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
			SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
			SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
			SquashOption                     *string   `json:"squash_option,omitempty"`
			SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
			StarCount                        *int32    `json:"star_count,omitempty"`
			Statistics                       *struct {
				CommitCount           *string `json:"commit_count,omitempty"`
				ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
			TagList                                *[]string  `json:"tag_list,omitempty"`
			Topics                                 *[]string  `json:"topics,omitempty"`
			UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
			Visibility                             *string    `json:"visibility,omitempty"`
			WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
			WebUrl                                 *string    `json:"web_url,omitempty"`
			WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
			WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdProjectsProjectIdResponse(rsp *http.Response) (*PostApiV4GroupsIdProjectsProjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdProjectsProjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			AllowedEmailDomainsList                *string `json:"allowed_email_domains_list,omitempty"`
			Archived                               *bool   `json:"archived,omitempty"`
			AutoBanUserOnExcessiveProjectsDownload *string `json:"auto_ban_user_on_excessive_projects_download,omitempty"`
			AutoDevopsEnabled                      *string `json:"auto_devops_enabled,omitempty"`
			AvatarUrl                              *string `json:"avatar_url,omitempty"`
			CreatedAt                              *string `json:"created_at,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                   *string `json:"default_branch,omitempty"`
			DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
			DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
			Description                     *string `json:"description,omitempty"`

			// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
			DuoCoreFeaturesEnabled         *bool   `json:"duo_core_features_enabled,omitempty"`
			DuoFeaturesEnabled             *string `json:"duo_features_enabled,omitempty"`
			EmailsDisabled                 *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled                  *bool   `json:"emails_enabled,omitempty"`
			EnabledGitAccessProtocol       *string `json:"enabled_git_access_protocol,omitempty"`
			ExtraSharedRunnersMinutesLimit *string `json:"extra_shared_runners_minutes_limit,omitempty"`
			FileTemplateProjectId          *string `json:"file_template_project_id,omitempty"`
			FullName                       *string `json:"full_name,omitempty"`
			FullPath                       *string `json:"full_path,omitempty"`
			Id                             *string `json:"id,omitempty"`
			IpRestrictionRanges            *string `json:"ip_restriction_ranges,omitempty"`
			LdapAccess                     *string `json:"ldap_access,omitempty"`
			LdapCn                         *string `json:"ldap_cn,omitempty"`
			LdapGroupLinks                 *struct {
				Cn           *string `json:"cn,omitempty"`
				Filter       *string `json:"filter,omitempty"`
				GroupAccess  *int32  `json:"group_access,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Provider     *string `json:"provider,omitempty"`
			} `json:"ldap_group_links,omitempty"`
			LfsEnabled                           *string `json:"lfs_enabled,omitempty"`
			LockDuoFeaturesEnabled               *string `json:"lock_duo_features_enabled,omitempty"`
			LockMathRenderingLimitsEnabled       *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
			MarkedForDeletionOn                  *string `json:"marked_for_deletion_on,omitempty"`
			MathRenderingLimitsEnabled           *bool   `json:"math_rendering_limits_enabled,omitempty"`
			MaxArtifactsSize                     *int32  `json:"max_artifacts_size,omitempty"`
			MembershipLock                       *string `json:"membership_lock,omitempty"`
			MentionsDisabled                     *string `json:"mentions_disabled,omitempty"`
			Name                                 *string `json:"name,omitempty"`
			OrganizationId                       *string `json:"organization_id,omitempty"`
			ParentId                             *string `json:"parent_id,omitempty"`
			Path                                 *string `json:"path,omitempty"`
			PreventForkingOutsideGroup           *string `json:"prevent_forking_outside_group,omitempty"`
			PreventSharingGroupsOutsideHierarchy *string `json:"prevent_sharing_groups_outside_hierarchy,omitempty"`
			ProjectCreationLevel                 *string `json:"project_creation_level,omitempty"`

			// Projects API_Entities_Project model
			Projects *struct {
				Links *struct {
					ClusterAgents *string `json:"cluster_agents,omitempty"`
					Events        *string `json:"events,omitempty"`
					Issues        *string `json:"issues,omitempty"`
					Labels        *string `json:"labels,omitempty"`
					Members       *string `json:"members,omitempty"`
					MergeRequests *string `json:"merge_requests,omitempty"`
					RepoBranches  *string `json:"repo_branches,omitempty"`
					Self          *string `json:"self,omitempty"`
				} `json:"_links,omitempty"`
				AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
				AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
				AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
				ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
				Archived                                 *bool     `json:"archived,omitempty"`
				AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
				AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
				AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
				AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
				AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
				AvatarUrl                                *string   `json:"avatar_url,omitempty"`
				BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
				BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
				BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
				CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
				CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
				CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
				CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
				CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
				CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
				CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
				CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
				CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
				CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
				CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
				CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
				CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
				ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
				ContainerExpirationPolicy                *struct {
					Cadence       *string `json:"cadence,omitempty"`
					Enabled       *string `json:"enabled,omitempty"`
					KeepN         *string `json:"keep_n,omitempty"`
					NameRegex     *string `json:"name_regex,omitempty"`
					NameRegexKeep *string `json:"name_regex_keep,omitempty"`
					NextRunAt     *string `json:"next_run_at,omitempty"`
					OlderThan     *string `json:"older_than,omitempty"`
				} `json:"container_expiration_policy,omitempty"`
				ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
				ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
				ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
				CreatedAt                    *time.Time `json:"created_at,omitempty"`
				CreatorId                    *int32     `json:"creator_id,omitempty"`

				// CustomAttributes API_Entities_CustomAttribute model
				CustomAttributes *struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				DefaultBranch                            *string `json:"default_branch,omitempty"`
				Description                              *string `json:"description,omitempty"`
				DescriptionHtml                          *string `json:"description_html,omitempty"`
				EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
				EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
				EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
				EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
				EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
				ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
				FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

				// ForkedFromProject API_Entities_BasicProjectDetails model
				ForkedFromProject *struct {
					AvatarUrl *string    `json:"avatar_url,omitempty"`
					CreatedAt *time.Time `json:"created_at,omitempty"`

					// CustomAttributes API_Entities_CustomAttribute model
					CustomAttributes *struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"custom_attributes,omitempty"`
					DefaultBranch  *string    `json:"default_branch,omitempty"`
					Description    *string    `json:"description,omitempty"`
					ForksCount     *int32     `json:"forks_count,omitempty"`
					HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
					Id             *int32     `json:"id,omitempty"`
					LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
					License        *struct {
						HtmlUrl   *string `json:"html_url,omitempty"`
						Key       *string `json:"key,omitempty"`
						Name      *string `json:"name,omitempty"`
						Nickname  *string `json:"nickname,omitempty"`
						SourceUrl *string `json:"source_url,omitempty"`
					} `json:"license,omitempty"`
					LicenseUrl        *string `json:"license_url,omitempty"`
					Name              *string `json:"name,omitempty"`
					NameWithNamespace *string `json:"name_with_namespace,omitempty"`
					Namespace         *struct {
						AvatarUrl *string `json:"avatar_url,omitempty"`
						FullPath  *string `json:"full_path,omitempty"`
						Id        *int32  `json:"id,omitempty"`
						Kind      *string `json:"kind,omitempty"`
						Name      *string `json:"name,omitempty"`
						ParentId  *int32  `json:"parent_id,omitempty"`
						Path      *string `json:"path,omitempty"`
						WebUrl    *string `json:"web_url,omitempty"`
					} `json:"namespace,omitempty"`
					Path              *string   `json:"path,omitempty"`
					PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
					ReadmeUrl         *string   `json:"readme_url,omitempty"`
					RepositoryStorage *string   `json:"repository_storage,omitempty"`
					SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
					StarCount         *int32    `json:"star_count,omitempty"`
					TagList           *[]string `json:"tag_list,omitempty"`
					Topics            *[]string `json:"topics,omitempty"`
					WebUrl            *string   `json:"web_url,omitempty"`
				} `json:"forked_from_project,omitempty"`
				ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
				ForksCount                *int32     `json:"forks_count,omitempty"`
				GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
				HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
				Id                        *int32     `json:"id,omitempty"`
				ImportError               *string    `json:"import_error,omitempty"`
				ImportStatus              *string    `json:"import_status,omitempty"`
				ImportType                *string    `json:"import_type,omitempty"`
				ImportUrl                 *string    `json:"import_url,omitempty"`
				InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
				IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
				IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
				IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
				IssuesTemplate            *string    `json:"issues_template,omitempty"`
				JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
				KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
				LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
				LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
				License                   *struct {
					HtmlUrl   *string `json:"html_url,omitempty"`
					Key       *string `json:"key,omitempty"`
					Name      *string `json:"name,omitempty"`
					Nickname  *string `json:"nickname,omitempty"`
					SourceUrl *string `json:"source_url,omitempty"`
				} `json:"license,omitempty"`
				LicenseUrl                       *string `json:"license_url,omitempty"`
				MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
				MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
				MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
				MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
				MergeMethod                      *string `json:"merge_method,omitempty"`
				MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
				MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
				MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
				MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
				MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
				MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
				MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
				Mirror                           *string `json:"mirror,omitempty"`
				MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
				MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
				MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
				ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
				ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
				MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
				MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
				Name                             *string `json:"name,omitempty"`
				NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
				Namespace                        *struct {
					AvatarUrl *string `json:"avatar_url,omitempty"`
					FullPath  *string `json:"full_path,omitempty"`
					Id        *int32  `json:"id,omitempty"`
					Kind      *string `json:"kind,omitempty"`
					Name      *string `json:"name,omitempty"`
					ParentId  *int32  `json:"parent_id,omitempty"`
					Path      *string `json:"path,omitempty"`
					WebUrl    *string `json:"web_url,omitempty"`
				} `json:"namespace,omitempty"`
				OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
				OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
				OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
				OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
				OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

				// Owner API_Entities_UserBasic model
				Owner *struct {
					AvatarPath       *string `json:"avatar_path,omitempty"`
					AvatarUrl        *string `json:"avatar_url,omitempty"`
					CustomAttributes *[]struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"custom_attributes,omitempty"`
					Id          *int32  `json:"id,omitempty"`
					Locked      *bool   `json:"locked,omitempty"`
					Name        *string `json:"name,omitempty"`
					PublicEmail *string `json:"public_email,omitempty"`
					State       *string `json:"state,omitempty"`
					Username    *string `json:"username,omitempty"`
					WebUrl      *string `json:"web_url,omitempty"`
				} `json:"owner,omitempty"`
				PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
				PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
				Path                             *string   `json:"path,omitempty"`
				PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
				PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
				PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
				PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
				PublicJobs                       *bool     `json:"public_jobs,omitempty"`
				ReadmeUrl                        *string   `json:"readme_url,omitempty"`
				ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
				RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
				RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
				RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
				RepositoryStorage                *string   `json:"repository_storage,omitempty"`
				RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
				RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
				RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
				ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
				RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
				RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
				RunnersToken                     *string   `json:"runners_token,omitempty"`
				SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
				SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
				SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
				ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
				ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
				SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
				SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
				SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
				SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
				SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
				SquashOption                     *string   `json:"squash_option,omitempty"`
				SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
				StarCount                        *int32    `json:"star_count,omitempty"`
				Statistics                       *struct {
					CommitCount           *string `json:"commit_count,omitempty"`
					ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
					JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
					LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
					PackagesSize          *string `json:"packages_size,omitempty"`
					PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
					RepositorySize        *string `json:"repository_size,omitempty"`
					SnippetsSize          *string `json:"snippets_size,omitempty"`
					StorageSize           *string `json:"storage_size,omitempty"`
					UploadsSize           *string `json:"uploads_size,omitempty"`
					WikiSize              *string `json:"wiki_size,omitempty"`
				} `json:"statistics,omitempty"`
				SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
				TagList                                *[]string  `json:"tag_list,omitempty"`
				Topics                                 *[]string  `json:"topics,omitempty"`
				UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
				Visibility                             *string    `json:"visibility,omitempty"`
				WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
				WebUrl                                 *string    `json:"web_url,omitempty"`
				WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
				WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
			} `json:"projects,omitempty"`
			RepositoryStorage              *string `json:"repository_storage,omitempty"`
			RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
			RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
			RootStorageStatistics          *struct {
				// BuildArtifactsSize CI artifacts size in bytes.
				BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

				// ContainerRegistrySize container registry size in bytes.
				ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

				// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
				ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

				// DependencyProxySize Dependency Proxy sizes in bytes.
				DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

				// LfsObjectsSize LFS objects size in bytes.
				LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

				// PackagesSize Packages size in bytes.
				PackagesSize *int32 `json:"packages_size,omitempty"`

				// PipelineArtifactsSize CI pipeline artifacts size in bytes.
				PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

				// RepositorySize Git repository size in bytes.
				RepositorySize *int32 `json:"repository_size,omitempty"`

				// SnippetsSize Snippets size in bytes.
				SnippetsSize *int32 `json:"snippets_size,omitempty"`

				// StorageSize Total storage in bytes.
				StorageSize *int32 `json:"storage_size,omitempty"`

				// UploadsSize Uploads size in bytes.
				UploadsSize *int32 `json:"uploads_size,omitempty"`

				// WikiSize Wiki size in bytes.
				WikiSize *int32 `json:"wiki_size,omitempty"`
			} `json:"root_storage_statistics,omitempty"`
			RunnersToken   *string `json:"runners_token,omitempty"`
			SamlGroupLinks *struct {
				AccessLevel  *int32  `json:"access_level,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"saml_group_links,omitempty"`
			ServiceAccessTokensExpirationEnforced *string `json:"service_access_tokens_expiration_enforced,omitempty"`
			ShareWithGroupLock                    *string `json:"share_with_group_lock,omitempty"`

			// SharedProjects API_Entities_Project model
			SharedProjects *struct {
				Links *struct {
					ClusterAgents *string `json:"cluster_agents,omitempty"`
					Events        *string `json:"events,omitempty"`
					Issues        *string `json:"issues,omitempty"`
					Labels        *string `json:"labels,omitempty"`
					Members       *string `json:"members,omitempty"`
					MergeRequests *string `json:"merge_requests,omitempty"`
					RepoBranches  *string `json:"repo_branches,omitempty"`
					Self          *string `json:"self,omitempty"`
				} `json:"_links,omitempty"`
				AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
				AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
				AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
				ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
				Archived                                 *bool     `json:"archived,omitempty"`
				AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
				AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
				AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
				AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
				AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
				AvatarUrl                                *string   `json:"avatar_url,omitempty"`
				BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
				BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
				BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
				CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
				CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
				CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
				CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
				CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
				CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
				CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
				CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
				CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
				CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
				CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
				CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
				CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
				ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
				ContainerExpirationPolicy                *struct {
					Cadence       *string `json:"cadence,omitempty"`
					Enabled       *string `json:"enabled,omitempty"`
					KeepN         *string `json:"keep_n,omitempty"`
					NameRegex     *string `json:"name_regex,omitempty"`
					NameRegexKeep *string `json:"name_regex_keep,omitempty"`
					NextRunAt     *string `json:"next_run_at,omitempty"`
					OlderThan     *string `json:"older_than,omitempty"`
				} `json:"container_expiration_policy,omitempty"`
				ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
				ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
				ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
				CreatedAt                    *time.Time `json:"created_at,omitempty"`
				CreatorId                    *int32     `json:"creator_id,omitempty"`

				// CustomAttributes API_Entities_CustomAttribute model
				CustomAttributes *struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				DefaultBranch                            *string `json:"default_branch,omitempty"`
				Description                              *string `json:"description,omitempty"`
				DescriptionHtml                          *string `json:"description_html,omitempty"`
				EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
				EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
				EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
				EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
				EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
				ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
				FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

				// ForkedFromProject API_Entities_BasicProjectDetails model
				ForkedFromProject *struct {
					AvatarUrl *string    `json:"avatar_url,omitempty"`
					CreatedAt *time.Time `json:"created_at,omitempty"`

					// CustomAttributes API_Entities_CustomAttribute model
					CustomAttributes *struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"custom_attributes,omitempty"`
					DefaultBranch  *string    `json:"default_branch,omitempty"`
					Description    *string    `json:"description,omitempty"`
					ForksCount     *int32     `json:"forks_count,omitempty"`
					HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
					Id             *int32     `json:"id,omitempty"`
					LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
					License        *struct {
						HtmlUrl   *string `json:"html_url,omitempty"`
						Key       *string `json:"key,omitempty"`
						Name      *string `json:"name,omitempty"`
						Nickname  *string `json:"nickname,omitempty"`
						SourceUrl *string `json:"source_url,omitempty"`
					} `json:"license,omitempty"`
					LicenseUrl        *string `json:"license_url,omitempty"`
					Name              *string `json:"name,omitempty"`
					NameWithNamespace *string `json:"name_with_namespace,omitempty"`
					Namespace         *struct {
						AvatarUrl *string `json:"avatar_url,omitempty"`
						FullPath  *string `json:"full_path,omitempty"`
						Id        *int32  `json:"id,omitempty"`
						Kind      *string `json:"kind,omitempty"`
						Name      *string `json:"name,omitempty"`
						ParentId  *int32  `json:"parent_id,omitempty"`
						Path      *string `json:"path,omitempty"`
						WebUrl    *string `json:"web_url,omitempty"`
					} `json:"namespace,omitempty"`
					Path              *string   `json:"path,omitempty"`
					PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
					ReadmeUrl         *string   `json:"readme_url,omitempty"`
					RepositoryStorage *string   `json:"repository_storage,omitempty"`
					SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
					StarCount         *int32    `json:"star_count,omitempty"`
					TagList           *[]string `json:"tag_list,omitempty"`
					Topics            *[]string `json:"topics,omitempty"`
					WebUrl            *string   `json:"web_url,omitempty"`
				} `json:"forked_from_project,omitempty"`
				ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
				ForksCount                *int32     `json:"forks_count,omitempty"`
				GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
				HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
				Id                        *int32     `json:"id,omitempty"`
				ImportError               *string    `json:"import_error,omitempty"`
				ImportStatus              *string    `json:"import_status,omitempty"`
				ImportType                *string    `json:"import_type,omitempty"`
				ImportUrl                 *string    `json:"import_url,omitempty"`
				InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
				IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
				IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
				IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
				IssuesTemplate            *string    `json:"issues_template,omitempty"`
				JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
				KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
				LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
				LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
				License                   *struct {
					HtmlUrl   *string `json:"html_url,omitempty"`
					Key       *string `json:"key,omitempty"`
					Name      *string `json:"name,omitempty"`
					Nickname  *string `json:"nickname,omitempty"`
					SourceUrl *string `json:"source_url,omitempty"`
				} `json:"license,omitempty"`
				LicenseUrl                       *string `json:"license_url,omitempty"`
				MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
				MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
				MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
				MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
				MergeMethod                      *string `json:"merge_method,omitempty"`
				MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
				MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
				MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
				MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
				MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
				MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
				MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
				Mirror                           *string `json:"mirror,omitempty"`
				MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
				MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
				MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
				ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
				ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
				MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
				MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
				Name                             *string `json:"name,omitempty"`
				NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
				Namespace                        *struct {
					AvatarUrl *string `json:"avatar_url,omitempty"`
					FullPath  *string `json:"full_path,omitempty"`
					Id        *int32  `json:"id,omitempty"`
					Kind      *string `json:"kind,omitempty"`
					Name      *string `json:"name,omitempty"`
					ParentId  *int32  `json:"parent_id,omitempty"`
					Path      *string `json:"path,omitempty"`
					WebUrl    *string `json:"web_url,omitempty"`
				} `json:"namespace,omitempty"`
				OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
				OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
				OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
				OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
				OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

				// Owner API_Entities_UserBasic model
				Owner *struct {
					AvatarPath       *string `json:"avatar_path,omitempty"`
					AvatarUrl        *string `json:"avatar_url,omitempty"`
					CustomAttributes *[]struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"custom_attributes,omitempty"`
					Id          *int32  `json:"id,omitempty"`
					Locked      *bool   `json:"locked,omitempty"`
					Name        *string `json:"name,omitempty"`
					PublicEmail *string `json:"public_email,omitempty"`
					State       *string `json:"state,omitempty"`
					Username    *string `json:"username,omitempty"`
					WebUrl      *string `json:"web_url,omitempty"`
				} `json:"owner,omitempty"`
				PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
				PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
				Path                             *string   `json:"path,omitempty"`
				PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
				PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
				PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
				PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
				PublicJobs                       *bool     `json:"public_jobs,omitempty"`
				ReadmeUrl                        *string   `json:"readme_url,omitempty"`
				ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
				RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
				RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
				RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
				RepositoryStorage                *string   `json:"repository_storage,omitempty"`
				RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
				RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
				RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
				ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
				RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
				RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
				RunnersToken                     *string   `json:"runners_token,omitempty"`
				SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
				SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
				SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
				ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
				ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
				SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
				SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
				SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
				SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
				SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
				SquashOption                     *string   `json:"squash_option,omitempty"`
				SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
				StarCount                        *int32    `json:"star_count,omitempty"`
				Statistics                       *struct {
					CommitCount           *string `json:"commit_count,omitempty"`
					ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
					JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
					LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
					PackagesSize          *string `json:"packages_size,omitempty"`
					PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
					RepositorySize        *string `json:"repository_size,omitempty"`
					SnippetsSize          *string `json:"snippets_size,omitempty"`
					StorageSize           *string `json:"storage_size,omitempty"`
					UploadsSize           *string `json:"uploads_size,omitempty"`
					WikiSize              *string `json:"wiki_size,omitempty"`
				} `json:"statistics,omitempty"`
				SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
				TagList                                *[]string  `json:"tag_list,omitempty"`
				Topics                                 *[]string  `json:"topics,omitempty"`
				UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
				Visibility                             *string    `json:"visibility,omitempty"`
				WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
				WebUrl                                 *string    `json:"web_url,omitempty"`
				WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
				WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
			} `json:"shared_projects,omitempty"`
			SharedRunnersMinutesLimit *string `json:"shared_runners_minutes_limit,omitempty"`
			SharedRunnersSetting      *string `json:"shared_runners_setting,omitempty"`
			SharedWithGroups          *string `json:"shared_with_groups,omitempty"`
			Statistics                *struct {
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SubgroupCreationLevel                       *string `json:"subgroup_creation_level,omitempty"`
			TwoFactorGracePeriod                        *string `json:"two_factor_grace_period,omitempty"`
			UniqueProjectDownloadLimit                  *string `json:"unique_project_download_limit,omitempty"`
			UniqueProjectDownloadLimitAlertlist         *string `json:"unique_project_download_limit_alertlist,omitempty"`
			UniqueProjectDownloadLimitAllowlist         *string `json:"unique_project_download_limit_allowlist,omitempty"`
			UniqueProjectDownloadLimitIntervalInSeconds *string `json:"unique_project_download_limit_interval_in_seconds,omitempty"`
			Visibility                                  *string `json:"visibility,omitempty"`
			WebBasedCommitSigningEnabled                *string `json:"web_based_commit_signing_enabled,omitempty"`
			WebUrl                                      *string `json:"web_url,omitempty"`
			WikiAccessLevel                             *string `json:"wiki_access_level,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdProvisionedUsersResponse(rsp *http.Response) (*GetApiV4GroupsIdProvisionedUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdProvisionedUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AvatarPath       *string    `json:"avatar_path,omitempty"`
			AvatarUrl        *string    `json:"avatar_url,omitempty"`
			Bio              *string    `json:"bio,omitempty"`
			Bot              *string    `json:"bot,omitempty"`
			CanCreateGroup   *bool      `json:"can_create_group,omitempty"`
			CanCreateProject *bool      `json:"can_create_project,omitempty"`
			ColorSchemeId    *int32     `json:"color_scheme_id,omitempty"`
			CommitEmail      *string    `json:"commit_email,omitempty"`
			ConfirmedAt      *time.Time `json:"confirmed_at,omitempty"`
			CreatedAt        *string    `json:"created_at,omitempty"`
			CurrentSignInAt  *time.Time `json:"current_sign_in_at,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Discord                        *string `json:"discord,omitempty"`
			Email                          *string `json:"email,omitempty"`
			External                       *string `json:"external,omitempty"`
			ExtraSharedRunnersMinutesLimit *string `json:"extra_shared_runners_minutes_limit,omitempty"`
			Followers                      *string `json:"followers,omitempty"`
			Following                      *string `json:"following,omitempty"`
			Github                         *string `json:"github,omitempty"`
			Id                             *int32  `json:"id,omitempty"`
			Identities                     *struct {
				ExternUid      *string `json:"extern_uid,omitempty"`
				Provider       *string `json:"provider,omitempty"`
				SamlProviderId *string `json:"saml_provider_id,omitempty"`
			} `json:"identities,omitempty"`
			IsFollowed     *string    `json:"is_followed,omitempty"`
			JobTitle       *string    `json:"job_title,omitempty"`
			LastActivityOn *time.Time `json:"last_activity_on,omitempty"`
			LastSignInAt   *time.Time `json:"last_sign_in_at,omitempty"`
			Linkedin       *string    `json:"linkedin,omitempty"`
			LocalTime      *string    `json:"local_time,omitempty"`
			Location       *string    `json:"location,omitempty"`
			Locked         *bool      `json:"locked,omitempty"`
			Name           *string    `json:"name,omitempty"`
			Organization   *string    `json:"organization,omitempty"`
			PrivateProfile *bool      `json:"private_profile,omitempty"`
			ProjectsLimit  *int32     `json:"projects_limit,omitempty"`
			Pronouns       *string    `json:"pronouns,omitempty"`
			PublicEmail    *string    `json:"public_email,omitempty"`
			ScimIdentities *struct {
				Active    *string `json:"active,omitempty"`
				ExternUid *string `json:"extern_uid,omitempty"`
				GroupId   *string `json:"group_id,omitempty"`
			} `json:"scim_identities,omitempty"`
			SharedRunnersMinutesLimit *string `json:"shared_runners_minutes_limit,omitempty"`
			Skype                     *string `json:"skype,omitempty"`
			State                     *string `json:"state,omitempty"`
			ThemeId                   *int32  `json:"theme_id,omitempty"`
			Twitter                   *string `json:"twitter,omitempty"`
			TwoFactorEnabled          *bool   `json:"two_factor_enabled,omitempty"`
			Username                  *string `json:"username,omitempty"`
			WebUrl                    *string `json:"web_url,omitempty"`
			WebsiteUrl                *string `json:"website_url,omitempty"`
			WorkInformation           *string `json:"work_information,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdRegistryRepositoriesResponse(rsp *http.Response) (*GetApiV4GroupsIdRegistryRepositoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdRegistryRepositoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CleanupPolicyStartedAt *time.Time `json:"cleanup_policy_started_at,omitempty"`
			CreatedAt              *time.Time `json:"created_at,omitempty"`
			DeleteApiPath          *string    `json:"delete_api_path,omitempty"`
			Id                     *int32     `json:"id,omitempty"`
			Location               *string    `json:"location,omitempty"`
			Name                   *string    `json:"name,omitempty"`
			Path                   *string    `json:"path,omitempty"`
			ProjectId              *int32     `json:"project_id,omitempty"`
			Size                   *int32     `json:"size,omitempty"`
			Status                 *string    `json:"status,omitempty"`

			// Tags API_Entities_ContainerRegistry_Tag model
			Tags *struct {
				Location *string `json:"location,omitempty"`
				Name     *string `json:"name,omitempty"`
				Path     *string `json:"path,omitempty"`
			} `json:"tags,omitempty"`
			TagsCount *int32 `json:"tags_count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdReleasesResponse(rsp *http.Response) (*GetApiV4GroupsIdReleasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdReleasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Links *struct {
				ClosedIssuesUrl        *string `json:"closed_issues_url,omitempty"`
				ClosedMergeRequestsUrl *string `json:"closed_merge_requests_url,omitempty"`
				EditUrl                *string `json:"edit_url,omitempty"`
				MergedMergeRequestsUrl *string `json:"merged_merge_requests_url,omitempty"`
				OpenedIssuesUrl        *string `json:"opened_issues_url,omitempty"`
				OpenedMergeRequestsUrl *string `json:"opened_merge_requests_url,omitempty"`
				Self                   *string `json:"self,omitempty"`
			} `json:"_links,omitempty"`
			Assets *struct {
				Count *int32 `json:"count,omitempty"`

				// Links API_Entities_Releases_Link model
				Links *struct {
					DirectAssetUrl *string `json:"direct_asset_url,omitempty"`
					Id             *int32  `json:"id,omitempty"`
					LinkType       *string `json:"link_type,omitempty"`
					Name           *string `json:"name,omitempty"`
					Url            *string `json:"url,omitempty"`
				} `json:"links,omitempty"`
				Sources *struct {
					Format *string `json:"format,omitempty"`
					Url    *string `json:"url,omitempty"`
				} `json:"sources,omitempty"`
			} `json:"assets,omitempty"`

			// Author API_Entities_UserBasic model
			Author *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"author,omitempty"`

			// Commit API_Entities_Commit model
			Commit *struct {
				AuthorEmail      *string                 `json:"author_email,omitempty"`
				AuthorName       *string                 `json:"author_name,omitempty"`
				AuthoredDate     *time.Time              `json:"authored_date,omitempty"`
				CommittedDate    *time.Time              `json:"committed_date,omitempty"`
				CommitterEmail   *string                 `json:"committer_email,omitempty"`
				CommitterName    *string                 `json:"committer_name,omitempty"`
				CreatedAt        *time.Time              `json:"created_at,omitempty"`
				ExtendedTrailers *map[string]interface{} `json:"extended_trailers,omitempty"`
				Id               *string                 `json:"id,omitempty"`
				Message          *string                 `json:"message,omitempty"`
				ParentIds        *[]string               `json:"parent_ids,omitempty"`
				ShortId          *string                 `json:"short_id,omitempty"`
				Title            *string                 `json:"title,omitempty"`
				Trailers         *map[string]interface{} `json:"trailers,omitempty"`
				WebUrl           *string                 `json:"web_url,omitempty"`
			} `json:"commit,omitempty"`
			CommitPath      *string    `json:"commit_path,omitempty"`
			CreatedAt       *time.Time `json:"created_at,omitempty"`
			Description     *string    `json:"description,omitempty"`
			DescriptionHtml *string    `json:"description_html,omitempty"`
			Evidences       *struct {
				CollectedAt *time.Time `json:"collected_at,omitempty"`
				Filepath    *string    `json:"filepath,omitempty"`
				Sha         *string    `json:"sha,omitempty"`
			} `json:"evidences,omitempty"`
			Milestones *struct {
				CreatedAt   *string `json:"created_at,omitempty"`
				Description *string `json:"description,omitempty"`
				DueDate     *string `json:"due_date,omitempty"`
				Expired     *string `json:"expired,omitempty"`
				GroupId     *string `json:"group_id,omitempty"`
				Id          *string `json:"id,omitempty"`
				Iid         *string `json:"iid,omitempty"`
				IssueStats  *struct {
					Closed *string `json:"closed,omitempty"`
					Total  *string `json:"total,omitempty"`
				} `json:"issue_stats,omitempty"`
				ProjectId *string `json:"project_id,omitempty"`
				StartDate *string `json:"start_date,omitempty"`
				State     *string `json:"state,omitempty"`
				Title     *string `json:"title,omitempty"`
				UpdatedAt *string `json:"updated_at,omitempty"`
				WebUrl    *string `json:"web_url,omitempty"`
			} `json:"milestones,omitempty"`
			Name            *string    `json:"name,omitempty"`
			ReleasedAt      *time.Time `json:"released_at,omitempty"`
			TagName         *string    `json:"tag_name,omitempty"`
			TagPath         *string    `json:"tag_path,omitempty"`
			UpcomingRelease *bool      `json:"upcoming_release,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdRestoreResponse(rsp *http.Response) (*PostApiV4GroupsIdRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdRunnersResponse(rsp *http.Response) (*GetApiV4GroupsIdRunnersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdRunnersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active    *bool      `json:"active,omitempty"`
			CreatedAt *time.Time `json:"created_at,omitempty"`

			// CreatedBy API_Entities_UserBasic model
			CreatedBy *struct {
				AvatarPath       *string `json:"avatar_path,omitempty"`
				AvatarUrl        *string `json:"avatar_url,omitempty"`
				CustomAttributes *[]struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				Id          *int32  `json:"id,omitempty"`
				Locked      *bool   `json:"locked,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				State       *string `json:"state,omitempty"`
				Username    *string `json:"username,omitempty"`
				WebUrl      *string `json:"web_url,omitempty"`
			} `json:"created_by,omitempty"`
			Description *string                               `json:"description,omitempty"`
			Id          *int32                                `json:"id,omitempty"`
			IpAddress   *string                               `json:"ip_address,omitempty"`
			IsShared    *bool                                 `json:"is_shared,omitempty"`
			Name        *string                               `json:"name,omitempty"`
			Online      *bool                                 `json:"online,omitempty"`
			Paused      *bool                                 `json:"paused,omitempty"`
			RunnerType  *GetApiV4GroupsIdRunners200RunnerType `json:"runner_type,omitempty"`
			Status      *string                               `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdRunnersResetRegistrationTokenResponse(rsp *http.Response) (*PostApiV4GroupsIdRunnersResetRegistrationTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdRunnersResetRegistrationTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Token          *string `json:"token,omitempty"`
			TokenExpiresAt *string `json:"token_expires_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdSamlUsersResponse(rsp *http.Response) (*GetApiV4GroupsIdSamlUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdSamlUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AvatarPath       *string    `json:"avatar_path,omitempty"`
			AvatarUrl        *string    `json:"avatar_url,omitempty"`
			Bio              *string    `json:"bio,omitempty"`
			Bot              *string    `json:"bot,omitempty"`
			CanCreateGroup   *bool      `json:"can_create_group,omitempty"`
			CanCreateProject *bool      `json:"can_create_project,omitempty"`
			ColorSchemeId    *int32     `json:"color_scheme_id,omitempty"`
			CommitEmail      *string    `json:"commit_email,omitempty"`
			ConfirmedAt      *time.Time `json:"confirmed_at,omitempty"`
			CreatedAt        *string    `json:"created_at,omitempty"`
			CurrentSignInAt  *time.Time `json:"current_sign_in_at,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Discord                        *string `json:"discord,omitempty"`
			Email                          *string `json:"email,omitempty"`
			External                       *string `json:"external,omitempty"`
			ExtraSharedRunnersMinutesLimit *string `json:"extra_shared_runners_minutes_limit,omitempty"`
			Followers                      *string `json:"followers,omitempty"`
			Following                      *string `json:"following,omitempty"`
			Github                         *string `json:"github,omitempty"`
			Id                             *int32  `json:"id,omitempty"`
			Identities                     *struct {
				ExternUid      *string `json:"extern_uid,omitempty"`
				Provider       *string `json:"provider,omitempty"`
				SamlProviderId *string `json:"saml_provider_id,omitempty"`
			} `json:"identities,omitempty"`
			IsFollowed     *string    `json:"is_followed,omitempty"`
			JobTitle       *string    `json:"job_title,omitempty"`
			LastActivityOn *time.Time `json:"last_activity_on,omitempty"`
			LastSignInAt   *time.Time `json:"last_sign_in_at,omitempty"`
			Linkedin       *string    `json:"linkedin,omitempty"`
			LocalTime      *string    `json:"local_time,omitempty"`
			Location       *string    `json:"location,omitempty"`
			Locked         *bool      `json:"locked,omitempty"`
			Name           *string    `json:"name,omitempty"`
			Organization   *string    `json:"organization,omitempty"`
			PrivateProfile *bool      `json:"private_profile,omitempty"`
			ProjectsLimit  *int32     `json:"projects_limit,omitempty"`
			Pronouns       *string    `json:"pronouns,omitempty"`
			PublicEmail    *string    `json:"public_email,omitempty"`
			ScimIdentities *struct {
				Active    *string `json:"active,omitempty"`
				ExternUid *string `json:"extern_uid,omitempty"`
				GroupId   *string `json:"group_id,omitempty"`
			} `json:"scim_identities,omitempty"`
			SharedRunnersMinutesLimit *string `json:"shared_runners_minutes_limit,omitempty"`
			Skype                     *string `json:"skype,omitempty"`
			State                     *string `json:"state,omitempty"`
			ThemeId                   *int32  `json:"theme_id,omitempty"`
			Twitter                   *string `json:"twitter,omitempty"`
			TwoFactorEnabled          *bool   `json:"two_factor_enabled,omitempty"`
			Username                  *string `json:"username,omitempty"`
			WebUrl                    *string `json:"web_url,omitempty"`
			WebsiteUrl                *string `json:"website_url,omitempty"`
			WorkInformation           *string `json:"work_information,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdShareResponse(rsp *http.Response) (*PostApiV4GroupsIdShareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdShareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			AllowedEmailDomainsList                *string `json:"allowed_email_domains_list,omitempty"`
			Archived                               *bool   `json:"archived,omitempty"`
			AutoBanUserOnExcessiveProjectsDownload *string `json:"auto_ban_user_on_excessive_projects_download,omitempty"`
			AutoDevopsEnabled                      *string `json:"auto_devops_enabled,omitempty"`
			AvatarUrl                              *string `json:"avatar_url,omitempty"`
			CreatedAt                              *string `json:"created_at,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                   *string `json:"default_branch,omitempty"`
			DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
			DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
			Description                     *string `json:"description,omitempty"`

			// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
			DuoCoreFeaturesEnabled         *bool   `json:"duo_core_features_enabled,omitempty"`
			DuoFeaturesEnabled             *string `json:"duo_features_enabled,omitempty"`
			EmailsDisabled                 *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled                  *bool   `json:"emails_enabled,omitempty"`
			EnabledGitAccessProtocol       *string `json:"enabled_git_access_protocol,omitempty"`
			ExtraSharedRunnersMinutesLimit *string `json:"extra_shared_runners_minutes_limit,omitempty"`
			FileTemplateProjectId          *string `json:"file_template_project_id,omitempty"`
			FullName                       *string `json:"full_name,omitempty"`
			FullPath                       *string `json:"full_path,omitempty"`
			Id                             *string `json:"id,omitempty"`
			IpRestrictionRanges            *string `json:"ip_restriction_ranges,omitempty"`
			LdapAccess                     *string `json:"ldap_access,omitempty"`
			LdapCn                         *string `json:"ldap_cn,omitempty"`
			LdapGroupLinks                 *struct {
				Cn           *string `json:"cn,omitempty"`
				Filter       *string `json:"filter,omitempty"`
				GroupAccess  *int32  `json:"group_access,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Provider     *string `json:"provider,omitempty"`
			} `json:"ldap_group_links,omitempty"`
			LfsEnabled                           *string `json:"lfs_enabled,omitempty"`
			LockDuoFeaturesEnabled               *string `json:"lock_duo_features_enabled,omitempty"`
			LockMathRenderingLimitsEnabled       *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
			MarkedForDeletionOn                  *string `json:"marked_for_deletion_on,omitempty"`
			MathRenderingLimitsEnabled           *bool   `json:"math_rendering_limits_enabled,omitempty"`
			MaxArtifactsSize                     *int32  `json:"max_artifacts_size,omitempty"`
			MembershipLock                       *string `json:"membership_lock,omitempty"`
			MentionsDisabled                     *string `json:"mentions_disabled,omitempty"`
			Name                                 *string `json:"name,omitempty"`
			OrganizationId                       *string `json:"organization_id,omitempty"`
			ParentId                             *string `json:"parent_id,omitempty"`
			Path                                 *string `json:"path,omitempty"`
			PreventForkingOutsideGroup           *string `json:"prevent_forking_outside_group,omitempty"`
			PreventSharingGroupsOutsideHierarchy *string `json:"prevent_sharing_groups_outside_hierarchy,omitempty"`
			ProjectCreationLevel                 *string `json:"project_creation_level,omitempty"`

			// Projects API_Entities_Project model
			Projects *struct {
				Links *struct {
					ClusterAgents *string `json:"cluster_agents,omitempty"`
					Events        *string `json:"events,omitempty"`
					Issues        *string `json:"issues,omitempty"`
					Labels        *string `json:"labels,omitempty"`
					Members       *string `json:"members,omitempty"`
					MergeRequests *string `json:"merge_requests,omitempty"`
					RepoBranches  *string `json:"repo_branches,omitempty"`
					Self          *string `json:"self,omitempty"`
				} `json:"_links,omitempty"`
				AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
				AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
				AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
				ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
				Archived                                 *bool     `json:"archived,omitempty"`
				AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
				AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
				AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
				AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
				AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
				AvatarUrl                                *string   `json:"avatar_url,omitempty"`
				BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
				BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
				BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
				CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
				CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
				CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
				CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
				CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
				CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
				CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
				CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
				CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
				CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
				CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
				CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
				CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
				ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
				ContainerExpirationPolicy                *struct {
					Cadence       *string `json:"cadence,omitempty"`
					Enabled       *string `json:"enabled,omitempty"`
					KeepN         *string `json:"keep_n,omitempty"`
					NameRegex     *string `json:"name_regex,omitempty"`
					NameRegexKeep *string `json:"name_regex_keep,omitempty"`
					NextRunAt     *string `json:"next_run_at,omitempty"`
					OlderThan     *string `json:"older_than,omitempty"`
				} `json:"container_expiration_policy,omitempty"`
				ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
				ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
				ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
				CreatedAt                    *time.Time `json:"created_at,omitempty"`
				CreatorId                    *int32     `json:"creator_id,omitempty"`

				// CustomAttributes API_Entities_CustomAttribute model
				CustomAttributes *struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				DefaultBranch                            *string `json:"default_branch,omitempty"`
				Description                              *string `json:"description,omitempty"`
				DescriptionHtml                          *string `json:"description_html,omitempty"`
				EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
				EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
				EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
				EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
				EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
				ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
				FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

				// ForkedFromProject API_Entities_BasicProjectDetails model
				ForkedFromProject *struct {
					AvatarUrl *string    `json:"avatar_url,omitempty"`
					CreatedAt *time.Time `json:"created_at,omitempty"`

					// CustomAttributes API_Entities_CustomAttribute model
					CustomAttributes *struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"custom_attributes,omitempty"`
					DefaultBranch  *string    `json:"default_branch,omitempty"`
					Description    *string    `json:"description,omitempty"`
					ForksCount     *int32     `json:"forks_count,omitempty"`
					HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
					Id             *int32     `json:"id,omitempty"`
					LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
					License        *struct {
						HtmlUrl   *string `json:"html_url,omitempty"`
						Key       *string `json:"key,omitempty"`
						Name      *string `json:"name,omitempty"`
						Nickname  *string `json:"nickname,omitempty"`
						SourceUrl *string `json:"source_url,omitempty"`
					} `json:"license,omitempty"`
					LicenseUrl        *string `json:"license_url,omitempty"`
					Name              *string `json:"name,omitempty"`
					NameWithNamespace *string `json:"name_with_namespace,omitempty"`
					Namespace         *struct {
						AvatarUrl *string `json:"avatar_url,omitempty"`
						FullPath  *string `json:"full_path,omitempty"`
						Id        *int32  `json:"id,omitempty"`
						Kind      *string `json:"kind,omitempty"`
						Name      *string `json:"name,omitempty"`
						ParentId  *int32  `json:"parent_id,omitempty"`
						Path      *string `json:"path,omitempty"`
						WebUrl    *string `json:"web_url,omitempty"`
					} `json:"namespace,omitempty"`
					Path              *string   `json:"path,omitempty"`
					PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
					ReadmeUrl         *string   `json:"readme_url,omitempty"`
					RepositoryStorage *string   `json:"repository_storage,omitempty"`
					SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
					StarCount         *int32    `json:"star_count,omitempty"`
					TagList           *[]string `json:"tag_list,omitempty"`
					Topics            *[]string `json:"topics,omitempty"`
					WebUrl            *string   `json:"web_url,omitempty"`
				} `json:"forked_from_project,omitempty"`
				ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
				ForksCount                *int32     `json:"forks_count,omitempty"`
				GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
				HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
				Id                        *int32     `json:"id,omitempty"`
				ImportError               *string    `json:"import_error,omitempty"`
				ImportStatus              *string    `json:"import_status,omitempty"`
				ImportType                *string    `json:"import_type,omitempty"`
				ImportUrl                 *string    `json:"import_url,omitempty"`
				InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
				IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
				IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
				IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
				IssuesTemplate            *string    `json:"issues_template,omitempty"`
				JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
				KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
				LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
				LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
				License                   *struct {
					HtmlUrl   *string `json:"html_url,omitempty"`
					Key       *string `json:"key,omitempty"`
					Name      *string `json:"name,omitempty"`
					Nickname  *string `json:"nickname,omitempty"`
					SourceUrl *string `json:"source_url,omitempty"`
				} `json:"license,omitempty"`
				LicenseUrl                       *string `json:"license_url,omitempty"`
				MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
				MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
				MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
				MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
				MergeMethod                      *string `json:"merge_method,omitempty"`
				MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
				MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
				MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
				MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
				MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
				MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
				MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
				Mirror                           *string `json:"mirror,omitempty"`
				MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
				MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
				MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
				ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
				ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
				MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
				MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
				Name                             *string `json:"name,omitempty"`
				NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
				Namespace                        *struct {
					AvatarUrl *string `json:"avatar_url,omitempty"`
					FullPath  *string `json:"full_path,omitempty"`
					Id        *int32  `json:"id,omitempty"`
					Kind      *string `json:"kind,omitempty"`
					Name      *string `json:"name,omitempty"`
					ParentId  *int32  `json:"parent_id,omitempty"`
					Path      *string `json:"path,omitempty"`
					WebUrl    *string `json:"web_url,omitempty"`
				} `json:"namespace,omitempty"`
				OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
				OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
				OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
				OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
				OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

				// Owner API_Entities_UserBasic model
				Owner *struct {
					AvatarPath       *string `json:"avatar_path,omitempty"`
					AvatarUrl        *string `json:"avatar_url,omitempty"`
					CustomAttributes *[]struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"custom_attributes,omitempty"`
					Id          *int32  `json:"id,omitempty"`
					Locked      *bool   `json:"locked,omitempty"`
					Name        *string `json:"name,omitempty"`
					PublicEmail *string `json:"public_email,omitempty"`
					State       *string `json:"state,omitempty"`
					Username    *string `json:"username,omitempty"`
					WebUrl      *string `json:"web_url,omitempty"`
				} `json:"owner,omitempty"`
				PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
				PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
				Path                             *string   `json:"path,omitempty"`
				PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
				PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
				PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
				PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
				PublicJobs                       *bool     `json:"public_jobs,omitempty"`
				ReadmeUrl                        *string   `json:"readme_url,omitempty"`
				ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
				RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
				RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
				RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
				RepositoryStorage                *string   `json:"repository_storage,omitempty"`
				RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
				RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
				RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
				ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
				RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
				RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
				RunnersToken                     *string   `json:"runners_token,omitempty"`
				SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
				SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
				SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
				ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
				ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
				SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
				SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
				SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
				SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
				SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
				SquashOption                     *string   `json:"squash_option,omitempty"`
				SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
				StarCount                        *int32    `json:"star_count,omitempty"`
				Statistics                       *struct {
					CommitCount           *string `json:"commit_count,omitempty"`
					ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
					JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
					LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
					PackagesSize          *string `json:"packages_size,omitempty"`
					PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
					RepositorySize        *string `json:"repository_size,omitempty"`
					SnippetsSize          *string `json:"snippets_size,omitempty"`
					StorageSize           *string `json:"storage_size,omitempty"`
					UploadsSize           *string `json:"uploads_size,omitempty"`
					WikiSize              *string `json:"wiki_size,omitempty"`
				} `json:"statistics,omitempty"`
				SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
				TagList                                *[]string  `json:"tag_list,omitempty"`
				Topics                                 *[]string  `json:"topics,omitempty"`
				UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
				Visibility                             *string    `json:"visibility,omitempty"`
				WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
				WebUrl                                 *string    `json:"web_url,omitempty"`
				WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
				WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
			} `json:"projects,omitempty"`
			RepositoryStorage              *string `json:"repository_storage,omitempty"`
			RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
			RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
			RootStorageStatistics          *struct {
				// BuildArtifactsSize CI artifacts size in bytes.
				BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

				// ContainerRegistrySize container registry size in bytes.
				ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

				// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
				ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

				// DependencyProxySize Dependency Proxy sizes in bytes.
				DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

				// LfsObjectsSize LFS objects size in bytes.
				LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

				// PackagesSize Packages size in bytes.
				PackagesSize *int32 `json:"packages_size,omitempty"`

				// PipelineArtifactsSize CI pipeline artifacts size in bytes.
				PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

				// RepositorySize Git repository size in bytes.
				RepositorySize *int32 `json:"repository_size,omitempty"`

				// SnippetsSize Snippets size in bytes.
				SnippetsSize *int32 `json:"snippets_size,omitempty"`

				// StorageSize Total storage in bytes.
				StorageSize *int32 `json:"storage_size,omitempty"`

				// UploadsSize Uploads size in bytes.
				UploadsSize *int32 `json:"uploads_size,omitempty"`

				// WikiSize Wiki size in bytes.
				WikiSize *int32 `json:"wiki_size,omitempty"`
			} `json:"root_storage_statistics,omitempty"`
			RunnersToken   *string `json:"runners_token,omitempty"`
			SamlGroupLinks *struct {
				AccessLevel  *int32  `json:"access_level,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"saml_group_links,omitempty"`
			ServiceAccessTokensExpirationEnforced *string `json:"service_access_tokens_expiration_enforced,omitempty"`
			ShareWithGroupLock                    *string `json:"share_with_group_lock,omitempty"`

			// SharedProjects API_Entities_Project model
			SharedProjects *struct {
				Links *struct {
					ClusterAgents *string `json:"cluster_agents,omitempty"`
					Events        *string `json:"events,omitempty"`
					Issues        *string `json:"issues,omitempty"`
					Labels        *string `json:"labels,omitempty"`
					Members       *string `json:"members,omitempty"`
					MergeRequests *string `json:"merge_requests,omitempty"`
					RepoBranches  *string `json:"repo_branches,omitempty"`
					Self          *string `json:"self,omitempty"`
				} `json:"_links,omitempty"`
				AllowMergeOnSkippedPipeline              *bool     `json:"allow_merge_on_skipped_pipeline,omitempty"`
				AllowPipelineTriggerApproveDeployment    *bool     `json:"allow_pipeline_trigger_approve_deployment,omitempty"`
				AnalyticsAccessLevel                     *string   `json:"analytics_access_level,omitempty"`
				ApprovalsBeforeMerge                     *string   `json:"approvals_before_merge,omitempty"`
				Archived                                 *bool     `json:"archived,omitempty"`
				AutoCancelPendingPipelines               *string   `json:"auto_cancel_pending_pipelines,omitempty"`
				AutoDevopsDeployStrategy                 *string   `json:"auto_devops_deploy_strategy,omitempty"`
				AutoDevopsEnabled                        *bool     `json:"auto_devops_enabled,omitempty"`
				AutoDuoCodeReviewEnabled                 *string   `json:"auto_duo_code_review_enabled,omitempty"`
				AutocloseReferencedIssues                *bool     `json:"autoclose_referenced_issues,omitempty"`
				AvatarUrl                                *string   `json:"avatar_url,omitempty"`
				BuildGitStrategy                         *string   `json:"build_git_strategy,omitempty"`
				BuildTimeout                             *int32    `json:"build_timeout,omitempty"`
				BuildsAccessLevel                        *string   `json:"builds_access_level,omitempty"`
				CanCreateMergeRequestIn                  *bool     `json:"can_create_merge_request_in,omitempty"`
				CiAllowForkPipelinesToRunInParentProject *bool     `json:"ci_allow_fork_pipelines_to_run_in_parent_project,omitempty"`
				CiConfigPath                             *string   `json:"ci_config_path,omitempty"`
				CiDefaultGitDepth                        *int32    `json:"ci_default_git_depth,omitempty"`
				CiDeletePipelinesInSeconds               *int32    `json:"ci_delete_pipelines_in_seconds,omitempty"`
				CiForwardDeploymentEnabled               *bool     `json:"ci_forward_deployment_enabled,omitempty"`
				CiForwardDeploymentRollbackAllowed       *bool     `json:"ci_forward_deployment_rollback_allowed,omitempty"`
				CiIdTokenSubClaimComponents              *[]string `json:"ci_id_token_sub_claim_components,omitempty"`
				CiJobTokenScopeEnabled                   *bool     `json:"ci_job_token_scope_enabled,omitempty"`
				CiPipelineVariablesMinimumOverrideRole   *string   `json:"ci_pipeline_variables_minimum_override_role,omitempty"`
				CiPushRepositoryForJobTokenAllowed       *bool     `json:"ci_push_repository_for_job_token_allowed,omitempty"`
				CiRestrictPipelineCancellationRole       *string   `json:"ci_restrict_pipeline_cancellation_role,omitempty"`
				CiSeparatedCaches                        *bool     `json:"ci_separated_caches,omitempty"`
				ComplianceFrameworks                     *string   `json:"compliance_frameworks,omitempty"`
				ContainerExpirationPolicy                *struct {
					Cadence       *string `json:"cadence,omitempty"`
					Enabled       *string `json:"enabled,omitempty"`
					KeepN         *string `json:"keep_n,omitempty"`
					NameRegex     *string `json:"name_regex,omitempty"`
					NameRegexKeep *string `json:"name_regex_keep,omitempty"`
					NextRunAt     *string `json:"next_run_at,omitempty"`
					OlderThan     *string `json:"older_than,omitempty"`
				} `json:"container_expiration_policy,omitempty"`
				ContainerRegistryAccessLevel *string    `json:"container_registry_access_level,omitempty"`
				ContainerRegistryEnabled     *bool      `json:"container_registry_enabled,omitempty"`
				ContainerRegistryImagePrefix *string    `json:"container_registry_image_prefix,omitempty"`
				CreatedAt                    *time.Time `json:"created_at,omitempty"`
				CreatorId                    *int32     `json:"creator_id,omitempty"`

				// CustomAttributes API_Entities_CustomAttribute model
				CustomAttributes *struct {
					Key   *string `json:"key,omitempty"`
					Value *string `json:"value,omitempty"`
				} `json:"custom_attributes,omitempty"`
				DefaultBranch                            *string `json:"default_branch,omitempty"`
				Description                              *string `json:"description,omitempty"`
				DescriptionHtml                          *string `json:"description_html,omitempty"`
				EmailsDisabled                           *bool   `json:"emails_disabled,omitempty"`
				EmailsEnabled                            *bool   `json:"emails_enabled,omitempty"`
				EmptyRepo                                *bool   `json:"empty_repo,omitempty"`
				EnforceAuthChecksOnUploads               *bool   `json:"enforce_auth_checks_on_uploads,omitempty"`
				EnvironmentsAccessLevel                  *string `json:"environments_access_level,omitempty"`
				ExternalAuthorizationClassificationLabel *string `json:"external_authorization_classification_label,omitempty"`
				FeatureFlagsAccessLevel                  *string `json:"feature_flags_access_level,omitempty"`

				// ForkedFromProject API_Entities_BasicProjectDetails model
				ForkedFromProject *struct {
					AvatarUrl *string    `json:"avatar_url,omitempty"`
					CreatedAt *time.Time `json:"created_at,omitempty"`

					// CustomAttributes API_Entities_CustomAttribute model
					CustomAttributes *struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"custom_attributes,omitempty"`
					DefaultBranch  *string    `json:"default_branch,omitempty"`
					Description    *string    `json:"description,omitempty"`
					ForksCount     *int32     `json:"forks_count,omitempty"`
					HttpUrlToRepo  *string    `json:"http_url_to_repo,omitempty"`
					Id             *int32     `json:"id,omitempty"`
					LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
					License        *struct {
						HtmlUrl   *string `json:"html_url,omitempty"`
						Key       *string `json:"key,omitempty"`
						Name      *string `json:"name,omitempty"`
						Nickname  *string `json:"nickname,omitempty"`
						SourceUrl *string `json:"source_url,omitempty"`
					} `json:"license,omitempty"`
					LicenseUrl        *string `json:"license_url,omitempty"`
					Name              *string `json:"name,omitempty"`
					NameWithNamespace *string `json:"name_with_namespace,omitempty"`
					Namespace         *struct {
						AvatarUrl *string `json:"avatar_url,omitempty"`
						FullPath  *string `json:"full_path,omitempty"`
						Id        *int32  `json:"id,omitempty"`
						Kind      *string `json:"kind,omitempty"`
						Name      *string `json:"name,omitempty"`
						ParentId  *int32  `json:"parent_id,omitempty"`
						Path      *string `json:"path,omitempty"`
						WebUrl    *string `json:"web_url,omitempty"`
					} `json:"namespace,omitempty"`
					Path              *string   `json:"path,omitempty"`
					PathWithNamespace *string   `json:"path_with_namespace,omitempty"`
					ReadmeUrl         *string   `json:"readme_url,omitempty"`
					RepositoryStorage *string   `json:"repository_storage,omitempty"`
					SshUrlToRepo      *string   `json:"ssh_url_to_repo,omitempty"`
					StarCount         *int32    `json:"star_count,omitempty"`
					TagList           *[]string `json:"tag_list,omitempty"`
					Topics            *[]string `json:"topics,omitempty"`
					WebUrl            *string   `json:"web_url,omitempty"`
				} `json:"forked_from_project,omitempty"`
				ForkingAccessLevel        *string    `json:"forking_access_level,omitempty"`
				ForksCount                *int32     `json:"forks_count,omitempty"`
				GroupRunnersEnabled       *bool      `json:"group_runners_enabled,omitempty"`
				HttpUrlToRepo             *string    `json:"http_url_to_repo,omitempty"`
				Id                        *int32     `json:"id,omitempty"`
				ImportError               *string    `json:"import_error,omitempty"`
				ImportStatus              *string    `json:"import_status,omitempty"`
				ImportType                *string    `json:"import_type,omitempty"`
				ImportUrl                 *string    `json:"import_url,omitempty"`
				InfrastructureAccessLevel *string    `json:"infrastructure_access_level,omitempty"`
				IssueBranchTemplate       *string    `json:"issue_branch_template,omitempty"`
				IssuesAccessLevel         *string    `json:"issues_access_level,omitempty"`
				IssuesEnabled             *bool      `json:"issues_enabled,omitempty"`
				IssuesTemplate            *string    `json:"issues_template,omitempty"`
				JobsEnabled               *bool      `json:"jobs_enabled,omitempty"`
				KeepLatestArtifact        *bool      `json:"keep_latest_artifact,omitempty"`
				LastActivityAt            *time.Time `json:"last_activity_at,omitempty"`
				LfsEnabled                *bool      `json:"lfs_enabled,omitempty"`
				License                   *struct {
					HtmlUrl   *string `json:"html_url,omitempty"`
					Key       *string `json:"key,omitempty"`
					Name      *string `json:"name,omitempty"`
					Nickname  *string `json:"nickname,omitempty"`
					SourceUrl *string `json:"source_url,omitempty"`
				} `json:"license,omitempty"`
				LicenseUrl                       *string `json:"license_url,omitempty"`
				MarkedForDeletionAt              *string `json:"marked_for_deletion_at,omitempty"`
				MarkedForDeletionOn              *string `json:"marked_for_deletion_on,omitempty"`
				MaxArtifactsSize                 *int32  `json:"max_artifacts_size,omitempty"`
				MergeCommitTemplate              *string `json:"merge_commit_template,omitempty"`
				MergeMethod                      *string `json:"merge_method,omitempty"`
				MergePipelinesEnabled            *string `json:"merge_pipelines_enabled,omitempty"`
				MergeRequestTitleRegex           *string `json:"merge_request_title_regex,omitempty"`
				MergeRequestsAccessLevel         *string `json:"merge_requests_access_level,omitempty"`
				MergeRequestsEnabled             *bool   `json:"merge_requests_enabled,omitempty"`
				MergeRequestsTemplate            *string `json:"merge_requests_template,omitempty"`
				MergeTrainsEnabled               *string `json:"merge_trains_enabled,omitempty"`
				MergeTrainsSkipTrainAllowed      *string `json:"merge_trains_skip_train_allowed,omitempty"`
				Mirror                           *string `json:"mirror,omitempty"`
				MirrorOverwritesDivergedBranches *string `json:"mirror_overwrites_diverged_branches,omitempty"`
				MirrorTriggerBuilds              *string `json:"mirror_trigger_builds,omitempty"`
				MirrorUserId                     *string `json:"mirror_user_id,omitempty"`
				ModelExperimentsAccessLevel      *string `json:"model_experiments_access_level,omitempty"`
				ModelRegistryAccessLevel         *string `json:"model_registry_access_level,omitempty"`
				MonitorAccessLevel               *string `json:"monitor_access_level,omitempty"`
				MrDefaultTargetSelf              *bool   `json:"mr_default_target_self,omitempty"`
				Name                             *string `json:"name,omitempty"`
				NameWithNamespace                *string `json:"name_with_namespace,omitempty"`
				Namespace                        *struct {
					AvatarUrl *string `json:"avatar_url,omitempty"`
					FullPath  *string `json:"full_path,omitempty"`
					Id        *int32  `json:"id,omitempty"`
					Kind      *string `json:"kind,omitempty"`
					Name      *string `json:"name,omitempty"`
					ParentId  *int32  `json:"parent_id,omitempty"`
					Path      *string `json:"path,omitempty"`
					WebUrl    *string `json:"web_url,omitempty"`
				} `json:"namespace,omitempty"`
				OnlyAllowMergeIfAllDiscussionsAreResolved *bool   `json:"only_allow_merge_if_all_discussions_are_resolved,omitempty"`
				OnlyAllowMergeIfAllStatusChecksPassed     *string `json:"only_allow_merge_if_all_status_checks_passed,omitempty"`
				OnlyAllowMergeIfPipelineSucceeds          *bool   `json:"only_allow_merge_if_pipeline_succeeds,omitempty"`
				OnlyMirrorProtectedBranches               *string `json:"only_mirror_protected_branches,omitempty"`
				OpenIssuesCount                           *int32  `json:"open_issues_count,omitempty"`

				// Owner API_Entities_UserBasic model
				Owner *struct {
					AvatarPath       *string `json:"avatar_path,omitempty"`
					AvatarUrl        *string `json:"avatar_url,omitempty"`
					CustomAttributes *[]struct {
						Key   *string `json:"key,omitempty"`
						Value *string `json:"value,omitempty"`
					} `json:"custom_attributes,omitempty"`
					Id          *int32  `json:"id,omitempty"`
					Locked      *bool   `json:"locked,omitempty"`
					Name        *string `json:"name,omitempty"`
					PublicEmail *string `json:"public_email,omitempty"`
					State       *string `json:"state,omitempty"`
					Username    *string `json:"username,omitempty"`
					WebUrl      *string `json:"web_url,omitempty"`
				} `json:"owner,omitempty"`
				PackagesEnabled                  *bool     `json:"packages_enabled,omitempty"`
				PagesAccessLevel                 *string   `json:"pages_access_level,omitempty"`
				Path                             *string   `json:"path,omitempty"`
				PathWithNamespace                *string   `json:"path_with_namespace,omitempty"`
				PreReceiveSecretDetectionEnabled *bool     `json:"pre_receive_secret_detection_enabled,omitempty"`
				PreventMergeWithoutJiraIssue     *string   `json:"prevent_merge_without_jira_issue,omitempty"`
				PrintingMergeRequestLinkEnabled  *bool     `json:"printing_merge_request_link_enabled,omitempty"`
				PublicJobs                       *bool     `json:"public_jobs,omitempty"`
				ReadmeUrl                        *string   `json:"readme_url,omitempty"`
				ReleasesAccessLevel              *string   `json:"releases_access_level,omitempty"`
				RemoveSourceBranchAfterMerge     *bool     `json:"remove_source_branch_after_merge,omitempty"`
				RepositoryAccessLevel            *string   `json:"repository_access_level,omitempty"`
				RepositoryObjectFormat           *string   `json:"repository_object_format,omitempty"`
				RepositoryStorage                *string   `json:"repository_storage,omitempty"`
				RequestAccessEnabled             *bool     `json:"request_access_enabled,omitempty"`
				RequirementsAccessLevel          *string   `json:"requirements_access_level,omitempty"`
				RequirementsEnabled              *string   `json:"requirements_enabled,omitempty"`
				ResolveOutdatedDiffDiscussions   *bool     `json:"resolve_outdated_diff_discussions,omitempty"`
				RestrictUserDefinedVariables     *bool     `json:"restrict_user_defined_variables,omitempty"`
				RunnerTokenExpirationInterval    *int32    `json:"runner_token_expiration_interval,omitempty"`
				RunnersToken                     *string   `json:"runners_token,omitempty"`
				SecretPushProtectionEnabled      *bool     `json:"secret_push_protection_enabled,omitempty"`
				SecurityAndComplianceAccessLevel *string   `json:"security_and_compliance_access_level,omitempty"`
				SecurityAndComplianceEnabled     *string   `json:"security_and_compliance_enabled,omitempty"`
				ServiceDeskAddress               *string   `json:"service_desk_address,omitempty"`
				ServiceDeskEnabled               *bool     `json:"service_desk_enabled,omitempty"`
				SharedRunnersEnabled             *bool     `json:"shared_runners_enabled,omitempty"`
				SharedWithGroups                 *[]string `json:"shared_with_groups,omitempty"`
				SnippetsAccessLevel              *string   `json:"snippets_access_level,omitempty"`
				SnippetsEnabled                  *bool     `json:"snippets_enabled,omitempty"`
				SquashCommitTemplate             *string   `json:"squash_commit_template,omitempty"`
				SquashOption                     *string   `json:"squash_option,omitempty"`
				SshUrlToRepo                     *string   `json:"ssh_url_to_repo,omitempty"`
				StarCount                        *int32    `json:"star_count,omitempty"`
				Statistics                       *struct {
					CommitCount           *string `json:"commit_count,omitempty"`
					ContainerRegistrySize *string `json:"container_registry_size,omitempty"`
					JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
					LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
					PackagesSize          *string `json:"packages_size,omitempty"`
					PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
					RepositorySize        *string `json:"repository_size,omitempty"`
					SnippetsSize          *string `json:"snippets_size,omitempty"`
					StorageSize           *string `json:"storage_size,omitempty"`
					UploadsSize           *string `json:"uploads_size,omitempty"`
					WikiSize              *string `json:"wiki_size,omitempty"`
				} `json:"statistics,omitempty"`
				SuggestionCommitMessage                *string    `json:"suggestion_commit_message,omitempty"`
				TagList                                *[]string  `json:"tag_list,omitempty"`
				Topics                                 *[]string  `json:"topics,omitempty"`
				UpdatedAt                              *time.Time `json:"updated_at,omitempty"`
				Visibility                             *string    `json:"visibility,omitempty"`
				WarnAboutPotentiallyUnwantedCharacters *bool      `json:"warn_about_potentially_unwanted_characters,omitempty"`
				WebUrl                                 *string    `json:"web_url,omitempty"`
				WikiAccessLevel                        *string    `json:"wiki_access_level,omitempty"`
				WikiEnabled                            *bool      `json:"wiki_enabled,omitempty"`
			} `json:"shared_projects,omitempty"`
			SharedRunnersMinutesLimit *string `json:"shared_runners_minutes_limit,omitempty"`
			SharedRunnersSetting      *string `json:"shared_runners_setting,omitempty"`
			SharedWithGroups          *string `json:"shared_with_groups,omitempty"`
			Statistics                *struct {
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SubgroupCreationLevel                       *string `json:"subgroup_creation_level,omitempty"`
			TwoFactorGracePeriod                        *string `json:"two_factor_grace_period,omitempty"`
			UniqueProjectDownloadLimit                  *string `json:"unique_project_download_limit,omitempty"`
			UniqueProjectDownloadLimitAlertlist         *string `json:"unique_project_download_limit_alertlist,omitempty"`
			UniqueProjectDownloadLimitAllowlist         *string `json:"unique_project_download_limit_allowlist,omitempty"`
			UniqueProjectDownloadLimitIntervalInSeconds *string `json:"unique_project_download_limit_interval_in_seconds,omitempty"`
			Visibility                                  *string `json:"visibility,omitempty"`
			WebBasedCommitSigningEnabled                *string `json:"web_based_commit_signing_enabled,omitempty"`
			WebUrl                                      *string `json:"web_url,omitempty"`
			WikiAccessLevel                             *string `json:"wiki_access_level,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdShareGroupIdResponse(rsp *http.Response) (*DeleteApiV4GroupsIdShareGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdShareGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdSshCertificatesResponse(rsp *http.Response) (*GetApiV4GroupsIdSshCertificatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdSshCertificatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt *time.Time `json:"created_at,omitempty"`
			Id        *int32     `json:"id,omitempty"`
			Key       *string    `json:"key,omitempty"`
			Title     *string    `json:"title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdSshCertificatesResponse(rsp *http.Response) (*PostApiV4GroupsIdSshCertificatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdSshCertificatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt *time.Time `json:"created_at,omitempty"`
			Id        *int32     `json:"id,omitempty"`
			Key       *string    `json:"key,omitempty"`
			Title     *string    `json:"title,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdSshCertificatesSshCertificatesIdResponse(rsp *http.Response) (*DeleteApiV4GroupsIdSshCertificatesSshCertificatesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdSshCertificatesSshCertificatesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdSubgroupsResponse(rsp *http.Response) (*GetApiV4GroupsIdSubgroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdSubgroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Archived          *bool   `json:"archived,omitempty"`
			AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
			AvatarUrl         *string `json:"avatar_url,omitempty"`
			CreatedAt         *string `json:"created_at,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                   *string `json:"default_branch,omitempty"`
			DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
			DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
			Description                     *string `json:"description,omitempty"`

			// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
			DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
			DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
			EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
			FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
			FullName               *string `json:"full_name,omitempty"`
			FullPath               *string `json:"full_path,omitempty"`
			Id                     *string `json:"id,omitempty"`
			LdapAccess             *string `json:"ldap_access,omitempty"`
			LdapCn                 *string `json:"ldap_cn,omitempty"`
			LdapGroupLinks         *struct {
				Cn           *string `json:"cn,omitempty"`
				Filter       *string `json:"filter,omitempty"`
				GroupAccess  *int32  `json:"group_access,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Provider     *string `json:"provider,omitempty"`
			} `json:"ldap_group_links,omitempty"`
			LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
			LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
			LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
			MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
			MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
			MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
			MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
			Name                           *string `json:"name,omitempty"`
			OrganizationId                 *string `json:"organization_id,omitempty"`
			ParentId                       *string `json:"parent_id,omitempty"`
			Path                           *string `json:"path,omitempty"`
			ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
			RepositoryStorage              *string `json:"repository_storage,omitempty"`
			RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
			RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
			RootStorageStatistics          *struct {
				// BuildArtifactsSize CI artifacts size in bytes.
				BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

				// ContainerRegistrySize container registry size in bytes.
				ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

				// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
				ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

				// DependencyProxySize Dependency Proxy sizes in bytes.
				DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

				// LfsObjectsSize LFS objects size in bytes.
				LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

				// PackagesSize Packages size in bytes.
				PackagesSize *int32 `json:"packages_size,omitempty"`

				// PipelineArtifactsSize CI pipeline artifacts size in bytes.
				PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

				// RepositorySize Git repository size in bytes.
				RepositorySize *int32 `json:"repository_size,omitempty"`

				// SnippetsSize Snippets size in bytes.
				SnippetsSize *int32 `json:"snippets_size,omitempty"`

				// StorageSize Total storage in bytes.
				StorageSize *int32 `json:"storage_size,omitempty"`

				// UploadsSize Uploads size in bytes.
				UploadsSize *int32 `json:"uploads_size,omitempty"`

				// WikiSize Wiki size in bytes.
				WikiSize *int32 `json:"wiki_size,omitempty"`
			} `json:"root_storage_statistics,omitempty"`
			SamlGroupLinks *struct {
				AccessLevel  *int32  `json:"access_level,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"saml_group_links,omitempty"`
			ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
			SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
			Statistics           *struct {
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
			TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
			Visibility                   *string `json:"visibility,omitempty"`
			WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
			WebUrl                       *string `json:"web_url,omitempty"`
			WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdTokensRevokeResponse(rsp *http.Response) (*PostApiV4GroupsIdTokensRevokeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdTokensRevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParsePostApiV4GroupsIdTransferResponse(rsp *http.Response) (*PostApiV4GroupsIdTransferResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdTransferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdTransferLocationsResponse(rsp *http.Response) (*GetApiV4GroupsIdTransferLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdTransferLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Archived          *bool   `json:"archived,omitempty"`
			AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
			AvatarUrl         *string `json:"avatar_url,omitempty"`
			CreatedAt         *string `json:"created_at,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                   *string `json:"default_branch,omitempty"`
			DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
			DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
			Description                     *string `json:"description,omitempty"`

			// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
			DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
			DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
			EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
			FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
			FullName               *string `json:"full_name,omitempty"`
			FullPath               *string `json:"full_path,omitempty"`
			Id                     *string `json:"id,omitempty"`
			LdapAccess             *string `json:"ldap_access,omitempty"`
			LdapCn                 *string `json:"ldap_cn,omitempty"`
			LdapGroupLinks         *struct {
				Cn           *string `json:"cn,omitempty"`
				Filter       *string `json:"filter,omitempty"`
				GroupAccess  *int32  `json:"group_access,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Provider     *string `json:"provider,omitempty"`
			} `json:"ldap_group_links,omitempty"`
			LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
			LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
			LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
			MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
			MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
			MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
			MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
			Name                           *string `json:"name,omitempty"`
			OrganizationId                 *string `json:"organization_id,omitempty"`
			ParentId                       *string `json:"parent_id,omitempty"`
			Path                           *string `json:"path,omitempty"`
			ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
			RepositoryStorage              *string `json:"repository_storage,omitempty"`
			RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
			RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
			RootStorageStatistics          *struct {
				// BuildArtifactsSize CI artifacts size in bytes.
				BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

				// ContainerRegistrySize container registry size in bytes.
				ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

				// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
				ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

				// DependencyProxySize Dependency Proxy sizes in bytes.
				DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

				// LfsObjectsSize LFS objects size in bytes.
				LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

				// PackagesSize Packages size in bytes.
				PackagesSize *int32 `json:"packages_size,omitempty"`

				// PipelineArtifactsSize CI pipeline artifacts size in bytes.
				PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

				// RepositorySize Git repository size in bytes.
				RepositorySize *int32 `json:"repository_size,omitempty"`

				// SnippetsSize Snippets size in bytes.
				SnippetsSize *int32 `json:"snippets_size,omitempty"`

				// StorageSize Total storage in bytes.
				StorageSize *int32 `json:"storage_size,omitempty"`

				// UploadsSize Uploads size in bytes.
				UploadsSize *int32 `json:"uploads_size,omitempty"`

				// WikiSize Wiki size in bytes.
				WikiSize *int32 `json:"wiki_size,omitempty"`
			} `json:"root_storage_statistics,omitempty"`
			SamlGroupLinks *struct {
				AccessLevel  *int32  `json:"access_level,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"saml_group_links,omitempty"`
			ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
			SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
			Statistics           *struct {
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
			TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
			Visibility                   *string `json:"visibility,omitempty"`
			WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
			WebUrl                       *string `json:"web_url,omitempty"`
			WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdUnarchiveResponse(rsp *http.Response) (*PostApiV4GroupsIdUnarchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdUnarchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Archived          *bool   `json:"archived,omitempty"`
			AutoDevopsEnabled *string `json:"auto_devops_enabled,omitempty"`
			AvatarUrl         *string `json:"avatar_url,omitempty"`
			CreatedAt         *string `json:"created_at,omitempty"`

			// CustomAttributes API_Entities_CustomAttribute model
			CustomAttributes *struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			DefaultBranch                   *string `json:"default_branch,omitempty"`
			DefaultBranchProtection         *string `json:"default_branch_protection,omitempty"`
			DefaultBranchProtectionDefaults *string `json:"default_branch_protection_defaults,omitempty"`
			Description                     *string `json:"description,omitempty"`

			// DuoCoreFeaturesEnabled [Experimental] Indicates whether GitLab Duo Core features are enabled for the group
			DuoCoreFeaturesEnabled *bool   `json:"duo_core_features_enabled,omitempty"`
			DuoFeaturesEnabled     *string `json:"duo_features_enabled,omitempty"`
			EmailsDisabled         *bool   `json:"emails_disabled,omitempty"`
			EmailsEnabled          *bool   `json:"emails_enabled,omitempty"`
			FileTemplateProjectId  *string `json:"file_template_project_id,omitempty"`
			FullName               *string `json:"full_name,omitempty"`
			FullPath               *string `json:"full_path,omitempty"`
			Id                     *string `json:"id,omitempty"`
			LdapAccess             *string `json:"ldap_access,omitempty"`
			LdapCn                 *string `json:"ldap_cn,omitempty"`
			LdapGroupLinks         *struct {
				Cn           *string `json:"cn,omitempty"`
				Filter       *string `json:"filter,omitempty"`
				GroupAccess  *int32  `json:"group_access,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Provider     *string `json:"provider,omitempty"`
			} `json:"ldap_group_links,omitempty"`
			LfsEnabled                     *string `json:"lfs_enabled,omitempty"`
			LockDuoFeaturesEnabled         *string `json:"lock_duo_features_enabled,omitempty"`
			LockMathRenderingLimitsEnabled *bool   `json:"lock_math_rendering_limits_enabled,omitempty"`
			MarkedForDeletionOn            *string `json:"marked_for_deletion_on,omitempty"`
			MathRenderingLimitsEnabled     *bool   `json:"math_rendering_limits_enabled,omitempty"`
			MaxArtifactsSize               *int32  `json:"max_artifacts_size,omitempty"`
			MentionsDisabled               *string `json:"mentions_disabled,omitempty"`
			Name                           *string `json:"name,omitempty"`
			OrganizationId                 *string `json:"organization_id,omitempty"`
			ParentId                       *string `json:"parent_id,omitempty"`
			Path                           *string `json:"path,omitempty"`
			ProjectCreationLevel           *string `json:"project_creation_level,omitempty"`
			RepositoryStorage              *string `json:"repository_storage,omitempty"`
			RequestAccessEnabled           *string `json:"request_access_enabled,omitempty"`
			RequireTwoFactorAuthentication *string `json:"require_two_factor_authentication,omitempty"`
			RootStorageStatistics          *struct {
				// BuildArtifactsSize CI artifacts size in bytes.
				BuildArtifactsSize *int32 `json:"build_artifacts_size,omitempty"`

				// ContainerRegistrySize container registry size in bytes.
				ContainerRegistrySize *int32 `json:"container_registry_size,omitempty"`

				// ContainerRegistrySizeIsEstimated Indicates whether the deduplicated container registry size for the namespace is an estimated value or not.
				ContainerRegistrySizeIsEstimated *bool `json:"container_registry_size_is_estimated,omitempty"`

				// DependencyProxySize Dependency Proxy sizes in bytes.
				DependencyProxySize *int32 `json:"dependency_proxy_size,omitempty"`

				// LfsObjectsSize LFS objects size in bytes.
				LfsObjectsSize *int32 `json:"lfs_objects_size,omitempty"`

				// PackagesSize Packages size in bytes.
				PackagesSize *int32 `json:"packages_size,omitempty"`

				// PipelineArtifactsSize CI pipeline artifacts size in bytes.
				PipelineArtifactsSize *int32 `json:"pipeline_artifacts_size,omitempty"`

				// RepositorySize Git repository size in bytes.
				RepositorySize *int32 `json:"repository_size,omitempty"`

				// SnippetsSize Snippets size in bytes.
				SnippetsSize *int32 `json:"snippets_size,omitempty"`

				// StorageSize Total storage in bytes.
				StorageSize *int32 `json:"storage_size,omitempty"`

				// UploadsSize Uploads size in bytes.
				UploadsSize *int32 `json:"uploads_size,omitempty"`

				// WikiSize Wiki size in bytes.
				WikiSize *int32 `json:"wiki_size,omitempty"`
			} `json:"root_storage_statistics,omitempty"`
			SamlGroupLinks *struct {
				AccessLevel  *int32  `json:"access_level,omitempty"`
				MemberRoleId *int32  `json:"member_role_id,omitempty"`
				Name         *string `json:"name,omitempty"`
			} `json:"saml_group_links,omitempty"`
			ShareWithGroupLock   *string `json:"share_with_group_lock,omitempty"`
			SharedRunnersSetting *string `json:"shared_runners_setting,omitempty"`
			Statistics           *struct {
				JobArtifactsSize      *string `json:"job_artifacts_size,omitempty"`
				LfsObjectsSize        *string `json:"lfs_objects_size,omitempty"`
				PackagesSize          *string `json:"packages_size,omitempty"`
				PipelineArtifactsSize *string `json:"pipeline_artifacts_size,omitempty"`
				RepositorySize        *string `json:"repository_size,omitempty"`
				SnippetsSize          *string `json:"snippets_size,omitempty"`
				StorageSize           *string `json:"storage_size,omitempty"`
				UploadsSize           *string `json:"uploads_size,omitempty"`
				WikiSize              *string `json:"wiki_size,omitempty"`
			} `json:"statistics,omitempty"`
			SubgroupCreationLevel        *string `json:"subgroup_creation_level,omitempty"`
			TwoFactorGracePeriod         *string `json:"two_factor_grace_period,omitempty"`
			Visibility                   *string `json:"visibility,omitempty"`
			WebBasedCommitSigningEnabled *string `json:"web_based_commit_signing_enabled,omitempty"`
			WebUrl                       *string `json:"web_url,omitempty"`
			WikiAccessLevel              *string `json:"wiki_access_level,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdUploadsResponse(rsp *http.Response) (*GetApiV4GroupsIdUploadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdUploadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt  *string `json:"created_at,omitempty"`
			Filename   *string `json:"filename,omitempty"`
			Id         *string `json:"id,omitempty"`
			Size       *string `json:"size,omitempty"`
			UploadedBy *struct {
				Id          *int32  `json:"id,omitempty"`
				Name        *string `json:"name,omitempty"`
				PublicEmail *string `json:"public_email,omitempty"`
				Username    *string `json:"username,omitempty"`
			} `json:"uploaded_by,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdUploadsSecretFilenameResponse(rsp *http.Response) (*DeleteApiV4GroupsIdUploadsSecretFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdUploadsSecretFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdUploadsSecretFilenameResponse(rsp *http.Response) (*GetApiV4GroupsIdUploadsSecretFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdUploadsSecretFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdUploadsUploadIdResponse(rsp *http.Response) (*DeleteApiV4GroupsIdUploadsUploadIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdUploadsUploadIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdUploadsUploadIdResponse(rsp *http.Response) (*GetApiV4GroupsIdUploadsUploadIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdUploadsUploadIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdUsersResponse(rsp *http.Response) (*GetApiV4GroupsIdUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AvatarPath       *string    `json:"avatar_path,omitempty"`
			AvatarUrl        *string    `json:"avatar_url,omitempty"`
			Bio              *string    `json:"bio,omitempty"`
			Bot              *string    `json:"bot,omitempty"`
			CanCreateGroup   *bool      `json:"can_create_group,omitempty"`
			CanCreateProject *bool      `json:"can_create_project,omitempty"`
			ColorSchemeId    *int32     `json:"color_scheme_id,omitempty"`
			CommitEmail      *string    `json:"commit_email,omitempty"`
			ConfirmedAt      *time.Time `json:"confirmed_at,omitempty"`
			CreatedAt        *string    `json:"created_at,omitempty"`
			CurrentSignInAt  *time.Time `json:"current_sign_in_at,omitempty"`
			CustomAttributes *[]struct {
				Key   *string `json:"key,omitempty"`
				Value *string `json:"value,omitempty"`
			} `json:"custom_attributes,omitempty"`
			Discord                        *string `json:"discord,omitempty"`
			Email                          *string `json:"email,omitempty"`
			External                       *string `json:"external,omitempty"`
			ExtraSharedRunnersMinutesLimit *string `json:"extra_shared_runners_minutes_limit,omitempty"`
			Followers                      *string `json:"followers,omitempty"`
			Following                      *string `json:"following,omitempty"`
			Github                         *string `json:"github,omitempty"`
			Id                             *int32  `json:"id,omitempty"`
			Identities                     *struct {
				ExternUid      *string `json:"extern_uid,omitempty"`
				Provider       *string `json:"provider,omitempty"`
				SamlProviderId *string `json:"saml_provider_id,omitempty"`
			} `json:"identities,omitempty"`
			IsFollowed     *string    `json:"is_followed,omitempty"`
			JobTitle       *string    `json:"job_title,omitempty"`
			LastActivityOn *time.Time `json:"last_activity_on,omitempty"`
			LastSignInAt   *time.Time `json:"last_sign_in_at,omitempty"`
			Linkedin       *string    `json:"linkedin,omitempty"`
			LocalTime      *string    `json:"local_time,omitempty"`
			Location       *string    `json:"location,omitempty"`
			Locked         *bool      `json:"locked,omitempty"`
			Name           *string    `json:"name,omitempty"`
			Organization   *string    `json:"organization,omitempty"`
			PrivateProfile *bool      `json:"private_profile,omitempty"`
			ProjectsLimit  *int32     `json:"projects_limit,omitempty"`
			Pronouns       *string    `json:"pronouns,omitempty"`
			PublicEmail    *string    `json:"public_email,omitempty"`
			ScimIdentities *struct {
				Active    *string `json:"active,omitempty"`
				ExternUid *string `json:"extern_uid,omitempty"`
				GroupId   *string `json:"group_id,omitempty"`
			} `json:"scim_identities,omitempty"`
			SharedRunnersMinutesLimit *string `json:"shared_runners_minutes_limit,omitempty"`
			Skype                     *string `json:"skype,omitempty"`
			State                     *string `json:"state,omitempty"`
			ThemeId                   *int32  `json:"theme_id,omitempty"`
			Twitter                   *string `json:"twitter,omitempty"`
			TwoFactorEnabled          *bool   `json:"two_factor_enabled,omitempty"`
			Username                  *string `json:"username,omitempty"`
			WebUrl                    *string `json:"web_url,omitempty"`
			WebsiteUrl                *string `json:"website_url,omitempty"`
			WorkInformation           *string `json:"work_information,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdVariablesResponse(rsp *http.Response) (*GetApiV4GroupsIdVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Description      *string `json:"description,omitempty"`
			EnvironmentScope *string `json:"environment_scope,omitempty"`
			Hidden           *bool   `json:"hidden,omitempty"`
			Key              *string `json:"key,omitempty"`
			Masked           *bool   `json:"masked,omitempty"`
			Protected        *bool   `json:"protected,omitempty"`
			Raw              *bool   `json:"raw,omitempty"`
			Value            *string `json:"value,omitempty"`
			VariableType     *string `json:"variable_type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdVariablesResponse(rsp *http.Response) (*PostApiV4GroupsIdVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Description      *string `json:"description,omitempty"`
			EnvironmentScope *string `json:"environment_scope,omitempty"`
			Hidden           *bool   `json:"hidden,omitempty"`
			Key              *string `json:"key,omitempty"`
			Masked           *bool   `json:"masked,omitempty"`
			Protected        *bool   `json:"protected,omitempty"`
			Raw              *bool   `json:"raw,omitempty"`
			Value            *string `json:"value,omitempty"`
			VariableType     *string `json:"variable_type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdVariablesKeyResponse(rsp *http.Response) (*DeleteApiV4GroupsIdVariablesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdVariablesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest struct {
			Description      *string `json:"description,omitempty"`
			EnvironmentScope *string `json:"environment_scope,omitempty"`
			Hidden           *bool   `json:"hidden,omitempty"`
			Key              *string `json:"key,omitempty"`
			Masked           *bool   `json:"masked,omitempty"`
			Protected        *bool   `json:"protected,omitempty"`
			Raw              *bool   `json:"raw,omitempty"`
			Value            *string `json:"value,omitempty"`
			VariableType     *string `json:"variable_type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdVariablesKeyResponse(rsp *http.Response) (*GetApiV4GroupsIdVariablesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdVariablesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Description      *string `json:"description,omitempty"`
			EnvironmentScope *string `json:"environment_scope,omitempty"`
			Hidden           *bool   `json:"hidden,omitempty"`
			Key              *string `json:"key,omitempty"`
			Masked           *bool   `json:"masked,omitempty"`
			Protected        *bool   `json:"protected,omitempty"`
			Raw              *bool   `json:"raw,omitempty"`
			Value            *string `json:"value,omitempty"`
			VariableType     *string `json:"variable_type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdVariablesKeyResponse(rsp *http.Response) (*PutApiV4GroupsIdVariablesKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdVariablesKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Description      *string `json:"description,omitempty"`
			EnvironmentScope *string `json:"environment_scope,omitempty"`
			Hidden           *bool   `json:"hidden,omitempty"`
			Key              *string `json:"key,omitempty"`
			Masked           *bool   `json:"masked,omitempty"`
			Protected        *bool   `json:"protected,omitempty"`
			Raw              *bool   `json:"raw,omitempty"`
			Value            *string `json:"value,omitempty"`
			VariableType     *string `json:"variable_type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParseGetApiV4GroupsIdWikisResponse(rsp *http.Response) (*GetApiV4GroupsIdWikisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdWikisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Format         *string `json:"format,omitempty"`
			Slug           *string `json:"slug,omitempty"`
			Title          *string `json:"title,omitempty"`
			WikiPageMetaId *int32  `json:"wiki_page_meta_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdWikisResponse(rsp *http.Response) (*PostApiV4GroupsIdWikisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdWikisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Content        *string                 `json:"content,omitempty"`
			Encoding       *string                 `json:"encoding,omitempty"`
			Format         *string                 `json:"format,omitempty"`
			FrontMatter    *map[string]interface{} `json:"front_matter,omitempty"`
			Slug           *string                 `json:"slug,omitempty"`
			Title          *string                 `json:"title,omitempty"`
			WikiPageMetaId *int32                  `json:"wiki_page_meta_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParsePostApiV4GroupsIdWikisAttachmentsResponse(rsp *http.Response) (*PostApiV4GroupsIdWikisAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV4GroupsIdWikisAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Branch   *string `json:"branch,omitempty"`
			FileName *string `json:"file_name,omitempty"`
			FilePath *string `json:"file_path,omitempty"`
			Link     *struct {
				Markdown *string `json:"markdown,omitempty"`
				Url      *string `json:"url,omitempty"`
			} `json:"link,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
func ParseDeleteApiV4GroupsIdWikisSlugResponse(rsp *http.Response) (*DeleteApiV4GroupsIdWikisSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV4GroupsIdWikisSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
func ParseGetApiV4GroupsIdWikisSlugResponse(rsp *http.Response) (*GetApiV4GroupsIdWikisSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV4GroupsIdWikisSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Content        *string                 `json:"content,omitempty"`
			Encoding       *string                 `json:"encoding,omitempty"`
			Format         *string                 `json:"format,omitempty"`
			FrontMatter    *map[string]interface{} `json:"front_matter,omitempty"`
			Slug           *string                 `json:"slug,omitempty"`
			Title          *string                 `json:"title,omitempty"`
			WikiPageMetaId *int32                  `json:"wiki_page_meta_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
func ParsePutApiV4GroupsIdWikisSlugResponse(rsp *http.Response) (*PutApiV4GroupsIdWikisSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV4GroupsIdWikisSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Content        *string                 `json:"content,omitempty"`
			Encoding       *string                 `json:"encoding,omitempty"`
			Format         *string                 `json:"format,omitempty"`
			FrontMatter    *map[string]interface{} `json:"front_matter,omitempty"`
			Slug           *string                 `json:"slug,omitempty"`
			Title          *string                 `json:"title,omitempty"`
			WikiPageMetaId *int32                  `json:"wiki_page_meta_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
